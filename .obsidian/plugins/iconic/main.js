/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the GitHub repository of this plugin:
https://github.com/gfxholo/iconic
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// i18n/ar.json
var require_ar = __commonJS({
  "i18n/ar.json"(exports, module2) {
    module2.exports = {
      appItems: {
        help: "\u0641\u062A\u062D \u0627\u0644\u0645\u0633\u0627\u0639\u062F\u0629",
        settings: "\u0641\u062A\u062D \u0627\u0644\u0625\u0639\u062F\u0627\u062F\u0627\u062A",
        pin: "\u062A\u062B\u0628\u064A\u062A/\u0625\u0644\u063A\u0627\u0621 \u062A\u062B\u0628\u064A\u062A",
        sidebarLeft: "\u0637\u064A/\u0641\u062A\u062D \u0627\u0644\u0634\u0631\u064A\u0637 \u0627\u0644\u062C\u0627\u0646\u0628\u064A \u0627\u0644\u0623\u064A\u0633\u0631",
        sidebarRight: "\u0637\u064A/\u0641\u062A\u062D \u0627\u0644\u0634\u0631\u064A\u0637 \u0627\u0644\u062C\u0627\u0646\u0628\u064A \u0627\u0644\u0623\u064A\u0645\u0646"
      },
      menu: {
        changeIcon: "\u062A\u063A\u064A\u064A\u0631 \u0627\u0644\u0631\u0645\u0632...",
        changeIcons: "\u062A\u063A\u064A\u064A\u0631 {#} \u0623\u064A\u0642\u0648\u0646\u0627\u062A...",
        removeIcon: "\u0625\u0632\u0627\u0644\u0629 \u0627\u0644\u0631\u0645\u0632",
        removeIcons: "\u0625\u0632\u0627\u0644\u0629 {#} \u0623\u064A\u0642\u0648\u0646\u0627\u062A",
        resetColor: "\u0625\u0639\u0627\u062F\u0629 \u062A\u0639\u064A\u064A\u0646 \u0627\u0644\u0644\u0648\u0646",
        resetColors: "\u0625\u0639\u0627\u062F\u0629 \u062A\u0639\u064A\u064A\u0646 {#} \u0623\u0644\u0648\u0627\u0646"
      },
      iconPicker: {
        changeIcon: "\u062A\u063A\u064A\u064A\u0631 \u0627\u0644\u0631\u0645\u0632",
        changeIcons: "\u062A\u063A\u064A\u064A\u0631 {#} \u0623\u064A\u0642\u0648\u0646\u0627\u062A",
        changeEmoji: "\u062A\u063A\u064A\u064A\u0631 \u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u062A\u0639\u0628\u064A\u0631\u064A\u0629",
        changeEmojis: "\u062A\u063A\u064A\u064A\u0631 {#} \u0631\u0645\u0648\u0632 \u062A\u0639\u0628\u064A\u0631\u064A\u0629",
        search: "\u0628\u062D\u062B",
        searchIcons: "\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u062A\u0639\u0628\u064A\u0631\u064A\u0629...",
        searchEmojis: "\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u062A\u0639\u0628\u064A\u0631\u064A\u0629...",
        changeColor: "\u062A\u063A\u064A\u064A\u0631 \u0627\u0644\u0644\u0648\u0646",
        resetColor: "\u0625\u0639\u0627\u062F\u0629 \u062A\u0639\u064A\u064A\u0646 \u0627\u0644\u0644\u0648\u0646",
        remove: "\u0625\u0632\u0627\u0644\u0629",
        emojis: "\u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u062A\u0639\u0628\u064A\u0631\u064A\u0629",
        icons: "\u0627\u0644\u0623\u064A\u0642\u0648\u0646\u0627\u062A",
        cancel: "\u0625\u0644\u063A\u0627\u0621",
        save: "\u062D\u0642\u0638",
        colors: {
          red: "\u0623\u062D\u0645\u0631",
          orange: "\u0628\u0631\u062A\u0642\u0627\u0644\u064A",
          yellow: "\u0623\u0635\u0641\u0631",
          green: "\u0623\u062E\u0636\u0631",
          cyan: "\u0633\u0645\u0627\u0648\u064A",
          blue: "\u0623\u0632\u0631\u0642",
          purple: "\u0623\u0631\u062C\u0648\u0627\u0646\u064A",
          pink: "\u0648\u0631\u062F\u064A",
          gray: "\u0631\u0645\u0627\u062F\u064A"
        }
      },
      categories: {
        item: "\u063A\u0631\u0636",
        items: "\u0623\u063A\u0631\u0627\u0636",
        appItem: "\u0632\u0631",
        appItems: "\u0623\u0632\u0631\u0627\u0631",
        tab: "\u0639\u0644\u0627\u0645\u0627\u062A \u0627\u0644\u062A\u0628\u0648\u064A\u0628",
        tabs: "\u0639\u0644\u0627\u0645\u0627\u062A \u0627\u0644\u062A\u0628\u0648\u064A\u0628",
        file: "\u0645\u0644\u0641",
        files: "\u0645\u0644\u0641\u0627\u062A",
        folder: "\u0645\u062C\u0644\u062F",
        folders: "\u0645\u062C\u0644\u062F\u0627\u062A",
        group: "\u0645\u062C\u0645\u0648\u0639\u0629",
        groups: "\u0645\u062C\u0645\u0648\u0639\u0627\u062A",
        search: "\u0627\u0633\u062A\u0639\u0644\u0627\u0645",
        searches: "\u0627\u0633\u062A\u0639\u0644\u0627\u0645\u0627\u062A",
        graph: "\u0627\u0644\u0639\u0631\u0636 \u0627\u0644\u0628\u064A\u0627\u0646\u064A",
        graphs: "\u0627\u0644\u0639\u0631\u0648\u0636 \u0627\u0644\u0628\u064A\u0627\u0646\u064A\u0629",
        url: "\u0631\u0627\u0628\u0637",
        urls: "\u0631\u0648\u0627\u0628\u0637",
        property: "\u062E\u0627\u0635\u064A\u0629",
        properties: "\u062E\u0627\u0635\u064A\u0627\u062A ",
        ribbonItem: "\u0623\u0645\u0631 \u0627\u0644\u0634\u0631\u064A\u0637 \u0627\u0644\u062C\u0627\u0646\u0628\u064A",
        ribbonItems: "\u0623\u0648\u0627\u0645\u0631 \u0627\u0644\u0634\u0631\u064A\u0637 \u0627\u0644\u062C\u0627\u0646\u0628\u064A"
      },
      commands: {
        toggleBiggerIcons: "\u062A\u0628\u062F\u064A\u0644 \u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u0623\u0643\u0628\u0631",
        toggleClickableIcons: {
          desktop: "\u062A\u0628\u062F\u064A\u0644 \u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0646\u0642\u0631",
          mobile: "\u062A\u0628\u062F\u064A\u0644 \u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0645\u0633"
        },
        toggleAllFileIcons: "\u062A\u0628\u062F\u064A\u0644 \u062C\u0645\u064A\u0639 \u0623\u064A\u0642\u0648\u0646\u0627\u062A \u0627\u0644\u0645\u0644\u0641\u0627\u062A",
        toggleBiggerSearchResults: "\u062A\u0628\u062F\u064A\u0644 \u0646\u062A\u0627\u0626\u062C \u0627\u0644\u0628\u062D\u062B \u0627\u0644\u0623\u0643\u0628\u0631"
      },
      settings: {
        values: {
          on: "\u0627\u0644\u062C\u0648\u0627\u0644",
          off: "\u0625\u064A\u0642\u0627\u0641",
          desktop: "\u0633\u0637\u062D \u0627\u0644\u0645\u0643\u062A\u0628 \u0641\u0642\u0637",
          mobile: "\u0627\u0644\u062C\u0648\u0627\u0644 \u0641\u0642\u0637",
          list: "\u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0623\u0644\u0648\u0627\u0646",
          rgb: "\u0623\u062F\u0627\u0629 \u0627\u062E\u062A\u064A\u0627\u0631 \u0623\u0644\u0648\u0627\u0646 RGB"
        },
        headingListsAndTabs: "\u0623\u064A\u0642\u0648\u0646\u0627\u062A \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0648\u0639\u0644\u0627\u0645\u0627\u062A \u0627\u0644\u062A\u0628\u0648\u064A\u0628",
        biggerIcons: {
          name: "\u0623\u064A\u0642\u0648\u0646\u0627\u062A \u0623\u0643\u0628\u0631",
          desc: "\u0625\u0638\u0647\u0627\u0631 \u0623\u064A\u0642\u0648\u0646\u0627\u062A \u0623\u0643\u0628\u0631 \u0645\u0646 \u0648\u0627\u062C\u0647\u0629 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645 \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629."
        },
        clickableIcons: {
          nameDesktop: "\u0623\u064A\u0642\u0648\u0646\u0627\u062A \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0646\u0642\u0631",
          nameMobile: "\u0623\u064A\u0642\u0648\u0646\u0627\u062A \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0645\u0633",
          descDesktop: "\u0627\u0646\u0642\u0631 \u0641\u0648\u0642 \u0623\u064A\u0642\u0648\u0646\u0629 \u0644\u0641\u062A\u062D \u0623\u062F\u0627\u0629 \u0627\u062E\u062A\u064A\u0627\u0631 \u0627\u0644\u0623\u064A\u0642\u0648\u0646\u0627\u062A.",
          descMobile: "\u0627\u0646\u0642\u0631 \u0641\u0648\u0642 \u0623\u064A\u0642\u0648\u0646\u0629 \u0644\u0641\u062A\u062D \u0623\u062F\u0627\u0629 \u0627\u062E\u062A\u064A\u0627\u0631 \u0627\u0644\u0623\u064A\u0642\u0648\u0646\u0627\u062A."
        },
        showAllFileIcons: {
          name: "\u0625\u0638\u0647\u0627\u0631 \u062C\u0645\u064A\u0639 \u0623\u064A\u0642\u0648\u0646\u0627\u062A \u0627\u0644\u0645\u0644\u0641\u0627\u062A",
          desc: "\u0642\u0645 \u062F\u0627\u0626\u0645\u064B\u0627 \u0628\u0639\u0631\u0636 \u0623\u064A\u0642\u0648\u0646\u0629 \u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629 \u0644\u0644\u0645\u0644\u0641\u0627\u062A \u0627\u0644\u062A\u064A \u0644\u0627 \u062A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 \u0623\u064A\u0642\u0648\u0646\u0629."
        },
        headingIconPicker: "\u0623\u062F\u0627\u0629 \u0627\u062E\u062A\u064A\u0627\u0631 \u0627\u0644\u0623\u064A\u0642\u0648\u0646\u0627\u062A",
        showItemName: {
          name: "\u0625\u0638\u0647\u0627\u0631 \u0627\u0633\u0645 \u0627\u0644\u0639\u0646\u0635\u0631",
          desc: "\u0625\u0638\u0647\u0627\u0631 \u0627\u0633\u0645 \u0627\u0644\u0639\u0646\u0635\u0631 \u0627\u0644\u0630\u064A \u064A\u062A\u0645 \u062A\u062D\u0631\u064A\u0631\u0647."
        },
        biggerSearchResults: {
          name: "\u0646\u062A\u0627\u0626\u062C \u0628\u062D\u062B \u0623\u0643\u0628\u0631",
          desc: "\u0625\u0638\u0647\u0627\u0631 \u0623\u064A\u0642\u0648\u0646\u0627\u062A \u0623\u0643\u0628\u0631 \u0641\u064A \u0646\u062A\u0627\u0626\u062C \u0627\u0644\u0628\u062D\u062B."
        },
        maxSearchResults: {
          name: "\u0627\u0644\u062D\u062F \u0627\u0644\u0623\u0642\u0635\u0649 \u0644\u0646\u062A\u0627\u0626\u062C \u0627\u0644\u0628\u062D\u062B",
          desc: "\u0627\u062E\u062A\u0631 \u0639\u062F\u062F \u0627\u0644\u0631\u0645\u0648\u0632 \u0627\u0644\u062A\u064A \u062A\u0631\u064A\u062F \u0639\u0631\u0636\u0647\u0627 \u0645\u0631\u0629 \u0648\u0627\u062D\u062F\u0629."
        },
        colorPicker1: {
          name: "\u0623\u062F\u0627\u0629 \u0627\u062E\u062A\u064A\u0627\u0631 \u0627\u0644\u0623\u0644\u0648\u0627\u0646 \u0627\u0644\u0631\u0626\u064A\u0633\u064A\u0629",
          descDesktop: "\u062A\u0638\u0647\u0631 \u0639\u0646\u062F \u0627\u0644\u0646\u0642\u0631 \u0639\u0644\u0649 \u0641\u0642\u0627\u0639\u0629 \u0627\u0644\u0623\u0644\u0648\u0627\u0646.",
          descMobile: "\u062A\u0638\u0647\u0631 \u0639\u0646\u062F \u0644\u0645\u0633 \u0641\u0642\u0627\u0639\u0629 \u0627\u0644\u0623\u0644\u0648\u0627\u0646."
        },
        colorPicker2: {
          name: "\u0623\u062F\u0627\u0629 \u0627\u062E\u062A\u064A\u0627\u0631 \u0627\u0644\u0623\u0644\u0648\u0627\u0646 \u0627\u0644\u062B\u0627\u0646\u064A\u0629",
          descDesktop: "\u062A\u0638\u0647\u0631 \u0639\u0646\u062F \u0627\u0644\u0646\u0642\u0631 \u0627\u0644\u062B\u0627\u0646\u0648\u064A \u0639\u0644\u0649 \u0641\u0642\u0627\u0639\u0629 \u0627\u0644\u0623\u0644\u0648\u0627\u0646.",
          descMobile: "\u062A\u0638\u0647\u0631 \u0639\u0646\u062F \u0627\u0644\u0636\u063A\u0637 \u0645\u0639 \u0627\u0644\u0627\u0633\u062A\u0645\u0631\u0627\u0631 \u0639\u0644\u0649 \u0641\u0642\u0627\u0639\u0629 \u0627\u0644\u0623\u0644\u0648\u0627\u0646."
        },
        headingAdvanced: "\u0645\u062A\u0642\u062F\u0645",
        uncolorHover: {
          name: "\u062A\u0645\u0631\u064A\u0631 \u0627\u0644\u0645\u0627\u0648\u0633 \u0641\u0648\u0642 \u0639\u0646\u0635\u0631 \u0645\u0627 \u0628\u062F\u0648\u0646 \u0644\u0648\u0646",
          desc: "\u062A\u0639\u0637\u064A\u0644 \u0644\u0648\u0646 \u0627\u0644\u0631\u0645\u0632 \u0623\u062B\u0646\u0627\u0621 \u062A\u0645\u0631\u064A\u0631 \u0627\u0644\u0645\u0627\u0648\u0633 \u0641\u0648\u0642 \u0639\u0646\u0635\u0631 \u0645\u0627."
        },
        uncolorSelect: {
          name: "\u062A\u062D\u062F\u064A\u062F \u0628\u062F\u0648\u0646 \u0644\u0648\u0646",
          desc: "\u062A\u0639\u0637\u064A\u0644 \u0644\u0648\u0646 \u0627\u0644\u0631\u0645\u0632 \u0623\u062B\u0646\u0627\u0621 \u062A\u062D\u062F\u064A\u062F \u0627\u0644\u0639\u0646\u0635\u0631."
        },
        rememberDeletedItems: {
          name: "\u062A\u0630\u0643\u0631 \u0631\u0645\u0648\u0632 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0627\u0644\u0645\u062D\u0630\u0648\u0641\u0629",
          desc: "\u0633\u062A\u0638\u0647\u0631 \u0623\u064A\u0629 \u0631\u0645\u0648\u0632 \u0645\u062E\u0635\u0635\u0629 \u0645\u0631\u0629 \u0623\u062E\u0631\u0649 \u0639\u0646\u062F \u0648\u062C\u0648\u062F \u0627\u0644\u0639\u0646\u0635\u0631 \u0627\u0644\u062E\u0627\u0635 \u0628\u0647\u0627 \u0645\u0631\u0629 \u0623\u062E\u0631\u0649."
        }
      }
    };
  }
});

// i18n/de.json
var require_de = __commonJS({
  "i18n/de.json"(exports, module2) {
    module2.exports = {
      appItems: {
        help: "Hilfe \xF6ffnen",
        settings: "Einstellungen \xF6ffnen",
        pin: "Pin umschalten",
        sidebarLeft: "Linke Seitenleiste umschalten",
        sidebarRight: "Rechte Seitenleiste umschalten"
      },
      menu: {
        changeIcon: "Symbol \xE4ndern...",
        changeIcons: "{#} Symbole \xE4ndern...",
        removeIcon: "Symbol entfernen",
        removeIcons: "{#} Symbole entfernen",
        resetColor: "Farbe zur\xFCcksetzen",
        resetColors: "{#} Farben zur\xFCcksetzen"
      },
      iconPicker: {
        changeIcon: "Symbol \xE4ndern",
        changeIcons: "{#} Symbole \xE4ndern",
        changeEmoji: "Emoji \xE4ndern",
        changeEmojis: "{#} Emojis \xE4ndern",
        search: "Suchen",
        searchIcons: "Symbole suchen...",
        searchEmojis: "Emojis suchen...",
        changeColor: "Farbe \xE4ndern",
        resetColor: "Farbe zur\xFCcksetzen",
        remove: "Entfernen",
        emojis: "Emojis",
        icons: "Symbole",
        cancel: "Entfernen",
        save: "Abbrechen",
        colors: {
          red: "Rot",
          orange: "Orange",
          yellow: "Gelb",
          green: "Gr\xFCn",
          cyan: "Cyan",
          blue: "Blau",
          purple: "Violett",
          pink: "Rosa",
          gray: "Grau"
        }
      },
      categories: {
        item: "Element",
        items: "Elemente",
        appItem: "Schaltfl\xE4che",
        appItems: "Schaltfl\xE4chen",
        tab: "Tab",
        tabs: "Tabs",
        file: "Datei",
        files: "Dateien",
        folder: "Ordner",
        folders: "Ordner",
        group: "Gruppe",
        groups: "Gruppen",
        search: "Abfrage",
        searches: "Abfragen",
        graph: "Graph",
        graphs: "Graphen",
        url: "URL",
        urls: "URLs",
        property: "Property",
        properties: "Properties",
        ribbonItem: "Sidebar-Befehl",
        ribbonItems: "Sidebar-Befehle"
      },
      commands: {
        toggleBiggerIcons: "Gr\xF6\xDFere Symbole umschalten",
        toggleClickableIcons: {
          desktop: "Klickbare Symbole umschalten",
          mobile: "Tippbare Symbole umschalten"
        },
        toggleAllFileIcons: "Alle Dateisymbole umschalten",
        toggleBiggerSearchResults: "Gr\xF6\xDFere Suchergebnisse umschalten"
      },
      settings: {
        values: {
          on: "Ein",
          off: "Aus",
          desktop: "Nur Desktop",
          mobile: "Nur Mobilger\xE4t",
          list: "Farbliste",
          rgb: "RGB-Auswahl"
        },
        headingListsAndTabs: "Listen- & Registerkartensymbole",
        biggerIcons: {
          name: "Gr\xF6\xDFere Symbole",
          desc: "Gr\xF6\xDFere Symbole als die Standard-Benutzeroberfl\xE4che anzeigen."
        },
        clickableIcons: {
          nameDesktop: "Anklickbare Symbole",
          nameMobile: "Tippbare Symbole",
          descDesktop: "Klicken Sie auf ein Symbol, um die Symbolauswahl zu \xF6ffnen.",
          descMobile: "Tippen Sie auf ein Symbol, um die Symbolauswahl zu \xF6ffnen."
        },
        showAllFileIcons: {
          name: "Alle Dateisymbole anzeigen",
          desc: "F\xFCr Dateien ohne Symbol immer ein Standardsymbol anzeigen."
        },
        headingIconPicker: "Symbolauswahl",
        showItemName: {
          name: "Elementnamen anzeigen",
          desc: "Den Namen des bearbeiteten Elements anzeigen."
        },
        biggerSearchResults: {
          name: "Gr\xF6\xDFere Suchergebnisse",
          desc: "Gr\xF6\xDFere Symbole in Suchergebnissen anzeigen."
        },
        maxSearchResults: {
          name: "Maximale Suchergebnisse",
          desc: "W\xE4hlen Sie aus, wie viele Symbole gleichzeitig angezeigt werden sollen."
        },
        colorPicker1: {
          name: "Hauptfarbauswahl",
          descDesktop: "Erscheint, wenn Sie auf die Farbblase klicken.",
          descMobile: "Erscheint, wenn Sie die Farbblase ber\xFChren."
        },
        colorPicker2: {
          name: "Zweiter Farbw\xE4hler",
          descDesktop: "Erscheint, wenn Sie mit der rechten Maustaste auf die Farbblase klicken.",
          descMobile: "Erscheint, wenn Sie die Farbblase gedr\xFCckt halten."
        },
        headingAdvanced: "Erweitert",
        uncolorHover: {
          name: "Ungef\xE4rbter Hover",
          desc: "Symbolfarbe deaktivieren, w\xE4hrend \xFCber einem Element schwebt."
        },
        uncolorSelect: {
          name: "Ungef\xE4rbte Auswahl",
          desc: "Symbolfarbe deaktivieren, w\xE4hrend Element ausgew\xE4hlt ist."
        },
        rememberDeletedItems: {
          name: "Symbole gel\xF6schter Elemente merken",
          desc: "Alle benutzerdefinierten Symbole werden wieder angezeigt, wenn ihr Element wieder existiert."
        }
      }
    };
  }
});

// i18n/es.json
var require_es = __commonJS({
  "i18n/es.json"(exports, module2) {
    module2.exports = {
      appItems: {
        help: "Abrir ayuda",
        settings: "Abrir ajustes",
        pin: "Cambiar estado de fijado",
        sidebarLeft: "Alternar barra lateral izquierda",
        sidebarRight: "Alternar barra lateral derecha"
      },
      menu: {
        changeIcon: "Cambiar icono...",
        changeIcons: "Cambiar {#} iconos...",
        removeIcon: "Eliminar icono",
        removeIcons: "Eliminar {#} iconos",
        resetColor: "Restablecer color",
        resetColors: "Restablecer {#} colores"
      },
      iconPicker: {
        changeIcon: "Cambiar icono",
        changeIcons: "Cambiar {#} iconos",
        changeEmoji: "Cambiar emoji",
        changeEmojis: "Cambiar {#} emojis",
        search: "Buscar",
        searchIcons: "Buscar iconos...",
        searchEmojis: "Buscar emojis...",
        changeColor: "Cambiar color",
        resetColor: "Restablecer color",
        remove: "Eliminar",
        emojis: "Emojis",
        icons: "Iconos",
        cancel: "Cancelar",
        save: "Guardar",
        colors: {
          red: "Rojo",
          orange: "Naranja",
          yellow: "Amarillo",
          green: "Verde",
          cyan: "Cian",
          blue: "Azul",
          purple: "P\xFArpura",
          pink: "Rosa",
          gray: "Gris"
        }
      },
      categories: {
        item: "Elemento",
        items: "Elementos",
        appItem: "Bot\xF3n",
        appItems: "Botones",
        tab: "Pesta\xF1a",
        tabs: "Pesta\xF1as",
        file: "Archivo",
        files: "Archivos",
        folder: "Carpeta",
        folders: "Carpetas",
        group: "Grupo",
        groups: "Grupos",
        search: "Consulta",
        searches: "Consultas",
        graph: "Gr\xE1fica",
        graphs: "Gr\xE1ficos",
        url: "URL",
        urls: "URL",
        property: "Propiedad",
        properties: "Propiedades",
        ribbonItem: "Comando de cinta",
        ribbonItems: "Comandos de cinta"
      },
      commands: {
        toggleBiggerIcons: "Alternar \xEDconos m\xE1s grandes",
        toggleClickableIcons: {
          desktop: "Alternar \xEDconos en los que se puede hacer clic",
          mobile: "Alternar \xEDconos que se pueden tocar"
        },
        toggleAllFileIcons: "Alternar todos los \xEDconos de archivos",
        toggleBiggerSearchResults: "Alternar resultados de b\xFAsqueda m\xE1s grandes"
      },
      settings: {
        values: {
          on: "Activado",
          off: "Desactivado",
          desktop: "Solo escritorio",
          mobile: "Solo m\xF3vil",
          list: "Lista de colores",
          rgb: "Selector RGB"
        },
        headingListsAndTabs: "\xCDconos de listas y pesta\xF1as",
        biggerIcons: {
          name: "Iconos m\xE1s grandes",
          desc: "Mostrar \xEDconos m\xE1s grandes que la interfaz de usuario predeterminada."
        },
        clickableIcons: {
          nameDesktop: "Iconos en los que se puede hacer clic",
          nameMobile: "Iconos que se pueden tocar",
          descDesktop: "Haga clic en un \xEDcono para abrir el selector de \xEDconos.",
          descMobile: "Toque un \xEDcono para abrir el selector de \xEDconos."
        },
        showAllFileIcons: {
          name: "Mostrar todos los \xEDconos de archivos",
          desc: "Mostrar siempre un \xEDcono predeterminado para archivos sin \xEDcono."
        },
        headingIconPicker: "Selector de iconos",
        showItemName: {
          name: "Mostrar el nombre del elemento",
          desc: "Mostrar el nombre del elemento que se est\xE1 editando."
        },
        biggerSearchResults: {
          name: "Resultados de b\xFAsqueda m\xE1s grandes",
          desc: "Mostrar \xEDconos m\xE1s grandes en los resultados de b\xFAsqueda."
        },
        maxSearchResults: {
          name: "Resultados de b\xFAsqueda m\xE1ximos",
          desc: "Elige cu\xE1ntos \xEDconos quieres mostrar a la vez."
        },
        colorPicker1: {
          name: "Selector de color principal",
          descDesktop: "Aparece cuando hace clic en la burbuja de color.",
          descMobile: "Aparece cuando toca la burbuja de color."
        },
        colorPicker2: {
          name: "Segundo selector de color",
          descDesktop: "Aparece cuando haces clic secundario en la burbuja de color.",
          descMobile: "Aparece cuando mantienes presionada la burbuja de color."
        },
        headingAdvanced: "Avanzado",
        uncolorHover: {
          name: "Paso flotante sin color",
          desc: "Deshabilitar el color del icono al pasar el cursor sobre un elemento."
        },
        uncolorSelect: {
          name: "Selecci\xF3n sin color",
          desc: "Deshabilitar el color del icono mientras se selecciona el elemento."
        },
        rememberDeletedItems: {
          name: "Recordar \xEDconos de elementos eliminados",
          desc: "Cualquier \xEDcono personalizado reaparecer\xE1 cuando su elemento vuelva a existir."
        }
      }
    };
  }
});

// i18n/fr.json
var require_fr = __commonJS({
  "i18n/fr.json"(exports, module2) {
    module2.exports = {
      appItems: {
        help: "Ouvrir l'aide",
        settings: "Ouvrir les param\xE8tres",
        pin: "Basculer l'\xE9pingle",
        sidebarLeft: "Basculer la barre lat\xE9rale gauche",
        sidebarRight: "Basculer la barre lat\xE9rale droite"
      },
      menu: {
        changeIcon: "Modifier l'ic\xF4ne...",
        changeIcons: "Modifier {#} ic\xF4nes...",
        removeIcon: "Supprimer l'ic\xF4ne",
        removeIcons: "Supprimer {#} ic\xF4nes",
        resetColor: "R\xE9initialiser la couleur",
        resetColors: "R\xE9initialiser {#} couleurs"
      },
      iconPicker: {
        changeIcon: "Changer l'ic\xF4ne",
        changeIcons: "Changer {#} ic\xF4nes",
        changeEmoji: "Changer l'\xE9moji",
        changeEmojis: "Changer {#} \xE9mojis",
        search: "Rechercher",
        searchIcons: "Rechercher des ic\xF4nes...",
        searchEmojis: "Rechercher des \xE9mojis...",
        changeColor: "Changer la couleur",
        resetColor: "R\xE9initialiser la couleur",
        remove: "Supprimer",
        emojis: "\xC9mojis",
        icons: "Ic\xF4nes",
        cancel: "Annuler",
        save: "Sauvegarder",
        colors: {
          red: "Rouge",
          orange: "Orange",
          yellow: "Jaune",
          green: "Vert",
          cyan: "Cyan",
          blue: "Bleu",
          purple: "Violet",
          pink: "Rose",
          gray: "Gris"
        }
      },
      categories: {
        item: "\xC9l\xE9ment",
        items: "\xC9l\xE9ments",
        appItem: "Bouton",
        appItems: "Boutons",
        tab: "Onglet",
        tabs: "Onglets",
        file: "Fichier",
        files: "Fichiers",
        folder: "Dossier",
        folders: "Dossiers",
        group: "Groupe",
        groups: "Groupes",
        search: "Requ\xEAte",
        searches: "Requ\xEAtes",
        graph: "Graphique",
        graphs: "Graphiques",
        url: "URL",
        urls: "URL",
        property: "Propri\xE9t\xE9",
        properties: "Propri\xE9t\xE9s",
        ribbonItem: "Commande du ruban",
        ribbonItems: "Commandes du ruban"
      },
      commands: {
        toggleBiggerIcons: "Basculer les plus grandes ic\xF4nes",
        toggleClickableIcons: {
          desktop: "Basculer les ic\xF4nes cliquables",
          mobile: "Basculer les ic\xF4nes tactiles"
        },
        toggleAllFileIcons: "Basculer toutes les ic\xF4nes de fichier",
        toggleBiggerSearchResults: "Basculer les r\xE9sultats de recherche plus grands"
      },
      settings: {
        values: {
          on: "Activ\xE9",
          off: "D\xE9sactiv\xE9",
          desktop: "Bureau uniquement",
          mobile: "Mobile uniquement",
          list: "Liste de couleurs",
          rgb: "S\xE9lecteur RVB"
        },
        headingListsAndTabs: "Ic\xF4nes de liste et d'onglet",
        biggerIcons: {
          name: "Ic\xF4nes plus grandes",
          desc: "Afficher des ic\xF4nes plus grandes que l'interface utilisateur par d\xE9faut."
        },
        clickableIcons: {
          nameDesktop: "Ic\xF4nes cliquables",
          nameMobile: "Ic\xF4nes tactiles",
          descDesktop: "Cliquez sur une ic\xF4ne pour ouvrir le s\xE9lecteur d'ic\xF4nes.",
          descMobile: "Appuyez sur une ic\xF4ne pour ouvrir le s\xE9lecteur d'ic\xF4nes."
        },
        showAllFileIcons: {
          name: "Afficher toutes les ic\xF4nes de fichier",
          desc: "Affichez toujours une ic\xF4ne par d\xE9faut pour les fichiers sans ic\xF4ne."
        },
        headingIconPicker: "S\xE9lecteur d'ic\xF4nes",
        showItemName: {
          name: "Afficher le nom de l'\xE9l\xE9ment",
          desc: "Afficher le nom de l'\xE9l\xE9ment en cours de modification."
        },
        biggerSearchResults: {
          name: "R\xE9sultats de recherche plus grands.",
          desc: "Afficher des ic\xF4nes plus grandes dans les r\xE9sultats de recherche."
        },
        maxSearchResults: {
          name: "R\xE9sultats de recherche maximaux",
          desc: "Choisissez le nombre d'ic\xF4nes \xE0 afficher simultan\xE9ment."
        },
        colorPicker1: {
          name: "S\xE9lecteur de couleurs principal",
          descDesktop: "S'affiche lorsque vous cliquez sur la bulle de couleur.",
          descMobile: "S'affiche lorsque vous touchez la bulle de couleur."
        },
        colorPicker2: {
          name: "Deuxi\xE8me s\xE9lecteur de couleurs",
          descDesktop: "Appara\xEEt lorsque vous cliquez avec le bouton droit sur la bulle de couleur.",
          descMobile: "Appara\xEEt lorsque vous appuyez et maintenez la bulle de couleur."
        },
        headingAdvanced: "Avanc\xE9",
        uncolorHover: {
          name: "Survol non color\xE9",
          desc: "D\xE9sactiver la couleur de l'ic\xF4ne lors du survol d'un \xE9l\xE9ment."
        },
        uncolorSelect: {
          name: "S\xE9lection non color\xE9e",
          desc: "D\xE9sactiver la couleur de l'ic\xF4ne lorsque l'\xE9l\xE9ment est s\xE9lectionn\xE9."
        },
        rememberDeletedItems: {
          name: "M\xE9moriser les ic\xF4nes des \xE9l\xE9ments supprim\xE9s",
          desc: "Toutes les ic\xF4nes personnalis\xE9es r\xE9appara\xEEtront lorsque leur \xE9l\xE9ment existera \xE0 nouveau."
        }
      }
    };
  }
});

// i18n/id.json
var require_id = __commonJS({
  "i18n/id.json"(exports, module2) {
    module2.exports = {
      appItems: {
        help: "Buka bantuan",
        settings: "Buka pengaturan",
        pin: "Aktifkan/Matikan sematan",
        sidebarLeft: "Buka/Tutup bilah sisi kiri",
        sidebarRight: "Buka/Tutup bilah sisi kanan"
      },
      menu: {
        changeIcon: "Ubah ikon...",
        changeIcons: "Ubah {#} ikon...",
        removeIcon: "Hapus ikon",
        removeIcons: "Hapus {#} ikon",
        resetColor: "Atur ulang warna",
        resetColors: "Atur ulang {#} warna"
      },
      iconPicker: {
        changeIcon: "Ubah ikon",
        changeIcons: "Ubah {#} ikon",
        changeEmoji: "Ubah emoji",
        changeEmojis: "Ubah {#} emoji",
        search: "Search",
        searchIcons: "Cari ikon...",
        searchEmojis: "Cari emoji...",
        changeColor: "Ganti warna",
        resetColor: "Atur ulang warna",
        remove: "Hapus",
        emojis: "Emoji",
        icons: "Ikon",
        cancel: "Batal",
        save: "Simpan",
        colors: {
          red: "Merah",
          orange: "Oranye",
          yellow: "Kuning",
          green: "Hijau",
          cyan: "Sian",
          blue: "Biru",
          purple: "Ungu",
          pink: "Merah muda",
          gray: "Abu-abu"
        }
      },
      categories: {
        item: "Item",
        items: "Item",
        appItem: "Tombol",
        appItems: "Tombol",
        tab: "Tab",
        tabs: "Tab",
        file: "Berkas",
        files: "Berkas",
        folder: "Folder",
        folders: "Folder",
        group: "Grup",
        groups: "Grup",
        search: "Kueri",
        searches: "Kueri",
        graph: "Grafik",
        graphs: "Grafik",
        url: "URL",
        urls: "URL",
        property: "Properti",
        properties: "Properti",
        ribbonItem: "Perintah ribbon",
        ribbonItems: "Perintah ribbon"
      },
      commands: {
        toggleBiggerIcons: "Alihkan ikon yang lebih besar",
        toggleClickableIcons: {
          desktop: "Alihkan ikon yang dapat diklik",
          mobile: "Alihkan ikon yang dapat diketuk"
        },
        toggleAllFileIcons: "Beralih semua ikon berkas",
        toggleBiggerSearchResults: "Beralih hasil pencarian yang lebih besar"
      },
      settings: {
        values: {
          on: "Aktif",
          off: "Nonaktif",
          desktop: "Hanya desktop",
          mobile: "Hanya seluler",
          list: "Daftar warna",
          rgb: "Pemilih RGB"
        },
        headingListsAndTabs: "Ikon daftar & tab",
        biggerIcons: {
          name: "Ikon yang lebih besar",
          desc: "Tampilkan ikon yang lebih besar daripada UI default."
        },
        clickableIcons: {
          nameDesktop: "Ikon yang dapat diklik",
          nameMobile: "Ikon yang dapat diketuk",
          descDesktop: "Klik ikon untuk membuka pemilih ikon.",
          descMobile: "Ketuk ikon untuk membuka pemilih ikon."
        },
        showAllFileIcons: {
          name: "Tampilkan semua ikon berkas",
          desc: "Selalu tampilkan ikon default untuk file tanpa ikon."
        },
        headingIconPicker: "Pemilih ikon",
        showItemName: {
          name: "Tampilkan nama item",
          desc: "Tampilkan nama item yang sedang diedit."
        },
        biggerSearchResults: {
          name: "Hasil pencarian yang lebih besar",
          desc: "Tampilkan ikon yang lebih besar dalam hasil pencarian."
        },
        maxSearchResults: {
          name: "Hasil pencarian maksimal",
          desc: "Pilih berapa banyak ikon yang akan ditampilkan sekaligus."
        },
        colorPicker1: {
          name: "Pemilih warna utama",
          descDesktop: "Muncul saat Anda mengklik gelembung warna.",
          descMobile: "Muncul saat Anda menyentuh gelembung warna."
        },
        colorPicker2: {
          name: "Pemilih warna kedua",
          descDesktop: "Muncul saat Anda mengklik kedua gelembung warna.",
          descMobile: "Muncul saat Anda menekan & menahan gelembung warna."
        },
        headingAdvanced: "Lanjutan",
        uncolorHover: {
          name: "Hover tidak berwarna",
          desc: "Nonaktifkan warna ikon saat mengarahkan kursor ke item."
        },
        uncolorSelect: {
          name: "Pilihan tidak berwarna",
          desc: "Nonaktifkan warna ikon saat item dipilih."
        },
        rememberDeletedItems: {
          name: "Ingat ikon item yang dihapus",
          desc: "Ikon khusus apa pun akan muncul kembali ketika itemnya ada lagi."
        }
      }
    };
  }
});

// i18n/ja.json
var require_ja = __commonJS({
  "i18n/ja.json"(exports, module2) {
    module2.exports = {
      appItems: {
        help: "\u30D8\u30EB\u30D7\u3092\u958B\u304F",
        settings: "\u8A2D\u5B9A\u3092\u958B\u304F",
        pin: "\u30D4\u30F3\u3092\u30C8\u30B0\u30EB",
        sidebarLeft: "\u5DE6\u306E\u30B5\u30A4\u30C9\u30D0\u30FC\u3092\u958B\u9589",
        sidebarRight: "\u53F3\u306E\u30B5\u30A4\u30C9\u30D0\u30FC\u3092\u958B\u9589"
      },
      menu: {
        changeIcon: "\u30A2\u30A4\u30B3\u30F3\u3092\u5909\u66F4\u2026",
        changeIcons: "\u30A2\u30A4\u30B3\u30F3\u3092 {#} \u500B\u5909\u66F4\u2026",
        removeIcon: "\u30A2\u30A4\u30B3\u30F3\u3092\u524A\u9664",
        removeIcons: "\u30A2\u30A4\u30B3\u30F3\u3092 {#} \u500B\u524A\u9664",
        resetColor: "\u8272\u3092\u30EA\u30BB\u30C3\u30C8",
        resetColors: "\u8272\u3092 {#} \u500B\u30EA\u30BB\u30C3\u30C8"
      },
      iconPicker: {
        changeIcon: "\u30A2\u30A4\u30B3\u30F3\u3092\u5909\u66F4",
        changeIcons: "{#}\u500B\u306E\u30A2\u30A4\u30B3\u30F3\u3092\u5909\u66F4\u3059\u308B",
        changeEmoji: "\u7D75\u6587\u5B57\u3092\u5909\u66F4\u3059\u308B",
        changeEmojis: "\u7D75\u6587\u5B57\u3092 {#} \u500B\u5909\u66F4",
        search: "\u691C\u7D22",
        searchIcons: "\u30A2\u30A4\u30B3\u30F3\u3092\u691C\u7D22\u2026",
        searchEmojis: "\u7D75\u6587\u5B57\u3092\u691C\u7D22\u2026",
        changeColor: "\u8272\u3092\u5909\u3048\u308B",
        resetColor: "\u8272\u3092\u30EA\u30BB\u30C3\u30C8",
        remove: "\u524A\u9664",
        emojis: "\u7D75\u6587\u5B57",
        icons: "\u30A2\u30A4\u30B3\u30F3",
        cancel: "\u30AD\u30E3\u30F3\u30BB\u30EB",
        save: "\u4FDD\u5B58",
        colors: {
          red: "\u8D64",
          orange: "\u30AA\u30EC\u30F3\u30B8",
          yellow: "\u9EC4\u8272",
          green: "\u7DD1",
          cyan: "\u30B7\u30A2\u30F3",
          blue: "\u9752",
          purple: "\u7D2B",
          pink: "\u30D4\u30F3\u30AF",
          gray: "\u7070\u8272"
        }
      },
      categories: {
        item: "\u9805\u76EE",
        items: "\u9805\u76EE",
        appItem: "\u30DC\u30BF\u30F3",
        appItems: "\u30DC\u30BF\u30F3",
        tab: "\u30BF\u30D6",
        tabs: "\u30BF\u30D6",
        file: "\u30D5\u30A1\u30A4\u30EB",
        files: "\u30D5\u30A1\u30A4\u30EB",
        folder: "\u30D5\u30A9\u30EB\u30C0",
        folders: "\u30D5\u30A9\u30EB\u30C0",
        group: "\u30B0\u30EB\u30FC\u30D7",
        groups: "\u30B0\u30EB\u30FC\u30D7",
        search: "\u30AF\u30A8\u30EA",
        searches: "\u30AF\u30A8\u30EA",
        graph: "\u30B0\u30E9\u30D5",
        graphs: "\u30B0\u30E9\u30D5",
        url: "URL",
        urls: "URL",
        property: "\u30D7\u30ED\u30D1\u30C6\u30A3",
        properties: "\u30D7\u30ED\u30D1\u30C6\u30A3",
        ribbonItem: "\u30EA\u30DC\u30F3\u30B3\u30DE\u30F3\u30C9",
        ribbonItems: "\u30EA\u30DC\u30F3\u30B3\u30DE\u30F3\u30C9"
      },
      commands: {
        toggleBiggerIcons: "\u5927\u304D\u3044\u30A2\u30A4\u30B3\u30F3\u3092\u5207\u308A\u66FF\u3048\u308B",
        toggleClickableIcons: {
          desktop: "\u30AF\u30EA\u30C3\u30AF\u53EF\u80FD\u306A\u30A2\u30A4\u30B3\u30F3\u3092\u5207\u308A\u66FF\u3048\u308B",
          mobile: "\u30BF\u30C3\u30D7\u53EF\u80FD\u306A\u30A2\u30A4\u30B3\u30F3\u3092\u5207\u308A\u66FF\u3048\u308B"
        },
        toggleAllFileIcons: "\u3059\u3079\u3066\u306E\u30D5\u30A1\u30A4\u30EB\u30A2\u30A4\u30B3\u30F3\u3092\u5207\u308A\u66FF\u3048\u307E\u3059",
        toggleBiggerSearchResults: "\u691C\u7D22\u7D50\u679C\u3092\u5927\u304D\u304F\u5207\u308A\u66FF\u3048\u307E\u3059"
      },
      settings: {
        values: {
          on: "\u30AA\u30F3",
          off: "\u30AA\u30D5",
          desktop: "\u30C7\u30B9\u30AF\u30C8\u30C3\u30D7\u306E\u307F",
          mobile: "\u30E2\u30D0\u30A4\u30EB\u306E\u307F",
          list: "\u8272\u306E\u30EA\u30B9\u30C8",
          rgb: "RGB \u30D4\u30C3\u30AB\u30FC"
        },
        headingListsAndTabs: "\u30EA\u30B9\u30C8\u3068\u30BF\u30D6\u306E\u30A2\u30A4\u30B3\u30F3",
        biggerIcons: {
          name: "\u5927\u304D\u3044\u30A2\u30A4\u30B3\u30F3",
          desc: "\u30C7\u30D5\u30A9\u30EB\u30C8\u306E UI \u3088\u308A\u3082\u5927\u304D\u306A\u30A2\u30A4\u30B3\u30F3\u3092\u8868\u793A\u3057\u307E\u3059\u3002"
        },
        clickableIcons: {
          nameDesktop: "\u30AF\u30EA\u30C3\u30AF\u53EF\u80FD\u306A\u30A2\u30A4\u30B3\u30F3",
          nameMobile: "\u30BF\u30C3\u30D7\u53EF\u80FD\u306A\u30A2\u30A4\u30B3\u30F3",
          descDesktop: "\u30A2\u30A4\u30B3\u30F3\u3092\u30AF\u30EA\u30C3\u30AF\u3059\u308B\u3068\u30A2\u30A4\u30B3\u30F3\u30D4\u30C3\u30AB\u30FC\u304C\u958B\u304D\u307E\u3059\u3002",
          descMobile: "\u30A2\u30A4\u30B3\u30F3\u3092\u30BF\u30C3\u30D7\u3059\u308B\u3068\u30A2\u30A4\u30B3\u30F3\u30D4\u30C3\u30AB\u30FC\u304C\u958B\u304D\u307E\u3059\u3002"
        },
        showAllFileIcons: {
          name: "\u3059\u3079\u3066\u306E\u30D5\u30A1\u30A4\u30EB\u30A2\u30A4\u30B3\u30F3\u3092\u8868\u793A\u3057\u307E\u3059",
          desc: "\u30A2\u30A4\u30B3\u30F3\u306E\u306A\u3044\u30D5\u30A1\u30A4\u30EB\u306E\u5834\u5408\u306F\u5E38\u306B\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u30A2\u30A4\u30B3\u30F3\u3092\u8868\u793A\u3057\u307E\u3059\u3002"
        },
        headingIconPicker: "\u30A2\u30A4\u30B3\u30F3 \u30D4\u30C3\u30AB\u30FC",
        showItemName: {
          name: "\u30A2\u30A4\u30C6\u30E0\u540D\u3092\u8868\u793A\u3057\u307E\u3059",
          desc: "\u7DE8\u96C6\u4E2D\u306E\u30A2\u30A4\u30C6\u30E0\u306E\u540D\u524D\u3092\u8868\u793A\u3057\u307E\u3059\u3002"
        },
        biggerSearchResults: {
          name: "\u691C\u7D22\u7D50\u679C\u3092\u5927\u304D\u304F\u3059\u308B",
          desc: "\u691C\u7D22\u7D50\u679C\u306B\u5927\u304D\u3044\u30A2\u30A4\u30B3\u30F3\u3092\u8868\u793A\u3057\u307E\u3059\u3002"
        },
        maxSearchResults: {
          name: "\u691C\u7D22\u7D50\u679C\u306E\u6700\u5927\u6570",
          desc: "\u4E00\u5EA6\u306B\u8868\u793A\u3059\u308B\u30A2\u30A4\u30B3\u30F3\u306E\u6570\u3092\u9078\u629E\u3057\u307E\u3059\u3002"
        },
        colorPicker1: {
          name: "\u30E1\u30A4\u30F3 \u30AB\u30E9\u30FC \u30D4\u30C3\u30AB\u30FC",
          descDesktop: "\u30AB\u30E9\u30FC \u30D0\u30D6\u30EB\u3092\u30AF\u30EA\u30C3\u30AF\u3059\u308B\u3068\u8868\u793A\u3055\u308C\u307E\u3059\u3002",
          descMobile: "\u30AB\u30E9\u30FC \u30D0\u30D6\u30EB\u3092\u30BF\u30C3\u30C1\u3059\u308B\u3068\u8868\u793A\u3055\u308C\u307E\u3059\u3002"
        },
        colorPicker2: {
          name: "2 \u756A\u76EE\u306E\u30AB\u30E9\u30FC \u30D4\u30C3\u30AB\u30FC",
          descDesktop: "\u30AB\u30E9\u30FC \u30D0\u30D6\u30EB\u3092\u30BB\u30AB\u30F3\u30C0\u30EA \u30AF\u30EA\u30C3\u30AF\u3059\u308B\u3068\u8868\u793A\u3055\u308C\u307E\u3059\u3002",
          descMobile: "\u30AB\u30E9\u30FC \u30D0\u30D6\u30EB\u3092\u9577\u62BC\u3057\u3059\u308B\u3068\u8868\u793A\u3055\u308C\u307E\u3059\u3002"
        },
        headingAdvanced: "\u8A73\u7D30",
        uncolorHover: {
          name: "\u7121\u8272\u30DB\u30D0\u30FC",
          desc: "\u30A2\u30A4\u30C6\u30E0\u306B\u30DB\u30D0\u30FC\u3057\u3066\u3044\u308B\u9593\u3001\u30A2\u30A4\u30B3\u30F3\u306E\u8272\u3092\u7121\u52B9\u306B\u3057\u307E\u3059\u3002"
        },
        uncolorSelect: {
          name: "\u7121\u8272\u9078\u629E",
          desc: "\u30A2\u30A4\u30C6\u30E0\u304C\u9078\u629E\u3055\u308C\u3066\u3044\u308B\u9593\u3001\u30A2\u30A4\u30B3\u30F3\u306E\u8272\u3092\u7121\u52B9\u306B\u3057\u307E\u3059\u3002"
        },
        rememberDeletedItems: {
          name: "\u524A\u9664\u3057\u305F\u30A2\u30A4\u30C6\u30E0\u306E\u30A2\u30A4\u30B3\u30F3\u3092\u8A18\u61B6\u3059\u308B",
          desc: "\u30AB\u30B9\u30BF\u30E0\u30A2\u30A4\u30B3\u30F3\u306F\u3001\u305D\u306E\u30A2\u30A4\u30C6\u30E0\u304C\u518D\u3073\u5B58\u5728\u3059\u308B\u3068\u304D\u306B\u518D\u8868\u793A\u3055\u308C\u307E\u3059\u3002"
        }
      }
    };
  }
});

// i18n/ru.json
var require_ru = __commonJS({
  "i18n/ru.json"(exports, module2) {
    module2.exports = {
      appItems: {
        help: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0441\u043F\u0440\u0430\u0432\u043A\u0443",
        settings: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438",
        pin: "\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C/\u0432\u044B\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0437\u0430\u043A\u0440\u0435\u043F\u043B\u0435\u043D\u0438\u0435 \u043E\u0431\u043B\u0430\u0441\u0442\u0438",
        sidebarLeft: "\u0421\u0432\u0435\u0440\u043D\u0443\u0442\u044C/\u0440\u0430\u0437\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u043B\u0435\u0432\u0443\u044E \u043F\u0430\u043D\u0435\u043B\u044C",
        sidebarRight: "\u0421\u0432\u0435\u0440\u043D\u0443\u0442\u044C/\u0440\u0430\u0437\u0432\u0435\u0440\u043D\u0443\u0442\u044C \u043F\u0440\u0430\u0432\u0443\u044E \u043F\u0430\u043D\u0435\u043B\u044C"
      },
      menu: {
        changeIcon: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0437\u043D\u0430\u0447\u043E\u043A...",
        changeIcons: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C {#} \u0437\u043D\u0430\u0447\u043A\u043E\u0432...",
        removeIcon: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0437\u043D\u0430\u0447\u043E\u043A",
        removeIcons: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C {#} \u0437\u043D\u0430\u0447\u043A\u043E\u0432",
        resetColor: "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u0446\u0432\u0435\u0442",
        resetColors: "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C {#} \u0446\u0432\u0435\u0442\u043E\u0432"
      },
      iconPicker: {
        changeIcon: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0437\u043D\u0430\u0447\u043E\u043A",
        changeIcons: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C {#} \u0438\u043A\u043E\u043D\u043E\u043A",
        changeEmoji: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u044D\u043C\u043E\u0434\u0437\u0438",
        changeEmojis: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C {#} \u044D\u043C\u043E\u0434\u0437\u0438",
        search: "\u041F\u043E\u0438\u0441\u043A",
        searchIcons: "\u0417\u043D\u0430\u0447\u043A\u0438 \u043F\u043E\u0438\u0441\u043A\u0430...",
        searchEmojis: "\u041F\u043E\u0438\u0441\u043A \u044D\u043C\u043E\u0434\u0437\u0438...",
        changeColor: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0446\u0432\u0435\u0442",
        resetColor: "\u0421\u0431\u0440\u043E\u0441\u0438\u0442\u044C \u0446\u0432\u0435\u0442",
        remove: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C",
        emojis: "\u042D\u043C\u043E\u0434\u0437\u0438",
        icons: "\u0418\u043A\u043E\u043D\u043A\u0438",
        cancel: "\u041E\u0442\u043C\u0435\u043D\u0430",
        save: "\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C",
        colors: {
          red: "\u041A\u0440\u0430\u0441\u043D\u044B\u0439",
          orange: "\u041E\u0440\u0430\u043D\u0436\u0435\u0432\u044B\u0439",
          yellow: "\u0416\u0435\u043B\u0442\u044B\u0439",
          green: "\u0417\u0435\u043B\u0435\u043D\u044B\u0439",
          cyan: "\u0413\u043E\u043B\u0443\u0431\u043E\u0439",
          blue: "\u0421\u0438\u043D\u0438\u0439",
          purple: "\u0424\u0438\u043E\u043B\u0435\u0442\u043E\u0432\u044B\u0439",
          pink: "\u0420\u043E\u0437\u043E\u0432\u044B\u0439",
          gray: "\u0421\u0435\u0440\u044B\u0439"
        }
      },
      categories: {
        item: "\u042D\u043B\u0435\u043C\u0435\u043D\u0442",
        items: "\u042D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",
        appItem: "\u041A\u043D\u043E\u043F\u043A\u0430",
        appItems: "\u041A\u043D\u043E\u043F\u043A\u0438",
        tab: "\u0412\u043A\u043B\u0430\u0434\u043A\u0430",
        tabs: "\u0412\u043A\u043B\u0430\u0434\u043A\u0438",
        file: "\u0424\u0430\u0439\u043B",
        files: "\u0424\u0430\u0439\u043B\u044B",
        folder: "\u041F\u0430\u043F\u043A\u0430",
        folders: "\u041F\u0430\u043F\u043A\u0438",
        group: "\u0413\u0440\u0443\u043F\u043F\u0430",
        groups: "\u0413\u0440\u0443\u043F\u043F\u044B",
        search: "\u0417\u0430\u043F\u0440\u043E\u0441",
        searches: "\u0417\u0430\u043F\u0440\u043E\u0441\u044B",
        graph: "\u0413\u0440\u0430\u0444",
        graphs: "\u0413\u0440\u0430\u0444\u043E\u0432",
        url: "URL",
        urls: "URL",
        property: "\u0421\u0432\u043E\u0439\u0441\u0442\u0432\u043E",
        properties: "\u0421\u0432\u043E\u0439\u0441\u0442\u0432",
        ribbonItem: "\u041B\u0435\u043D\u0442\u043E\u0447\u043D\u0430\u044F \u043A\u043E\u043C\u0430\u043D\u0434\u0430",
        ribbonItems: "\u041B\u0435\u043D\u0442\u043E\u0447\u043D\u0430\u044F \u043A\u043E\u043C\u0430\u043D\u0434\u044B"
      },
      commands: {
        toggleBiggerIcons: "\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0431\u043E\u043B\u044C\u0448\u0438\u0435 \u0437\u043D\u0430\u0447\u043A\u0438",
        toggleClickableIcons: {
          desktop: "\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043A\u043B\u0438\u043A\u0430\u0431\u0435\u043B\u044C\u043D\u044B\u0435 \u0437\u043D\u0430\u0447\u043A\u0438",
          mobile: "\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0441\u0435\u043D\u0441\u043E\u0440\u043D\u044B\u0435 \u0437\u043D\u0430\u0447\u043A\u0438"
        },
        toggleAllFileIcons: "\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0432\u0441\u0435 \u0437\u043D\u0430\u0447\u043A\u0438 \u0444\u0430\u0439\u043B\u043E\u0432",
        toggleBiggerSearchResults: "\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0431\u043E\u043B\u044C\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u044B \u043F\u043E\u0438\u0441\u043A\u0430"
      },
      settings: {
        values: {
          on: "\u0412\u043A\u043B",
          off: "\u0412\u044B\u043A\u043B",
          desktop: "\u0422\u043E\u043B\u044C\u043A\u043E \u0434\u043B\u044F \u043D\u0430\u0441\u0442\u043E\u043B\u044C\u043D\u044B\u0445 \u043A\u043E\u043C\u043F\u044C\u044E\u0442\u0435\u0440\u043E\u0432",
          mobile: "\u0422\u043E\u043B\u044C\u043A\u043E \u0434\u043B\u044F \u043C\u043E\u0431\u0438\u043B\u044C\u043D\u044B\u0445 \u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432",
          list: "\u0421\u043F\u0438\u0441\u043E\u043A \u0446\u0432\u0435\u0442\u043E\u0432",
          rgb: "\u0412\u044B\u0431\u043E\u0440 RGB"
        },
        headingListsAndTabs: "\u0417\u043D\u0430\u0447\u043A\u0438 \u0441\u043F\u0438\u0441\u043A\u043E\u0432 \u0438 \u0432\u043A\u043B\u0430\u0434\u043E\u043A",
        biggerIcons: {
          name: "\u0411\u043E\u043B\u044C\u0448\u0438\u0435 \u0437\u043D\u0430\u0447\u043A\u0438",
          desc: "\u041F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u0437\u043D\u0430\u0447\u043A\u0438 \u0431\u043E\u043B\u044C\u0448\u0435\u0433\u043E \u0440\u0430\u0437\u043C\u0435\u0440\u0430, \u0447\u0435\u043C \u0432 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u043E\u043C \u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0435 \u043F\u043E \u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E."
        },
        clickableIcons: {
          nameDesktop: "\u041A\u043B\u0438\u043A\u0430\u0435\u043C\u044B\u0435 \u0437\u043D\u0430\u0447\u043A\u0438",
          nameMobile: "\u0421\u0435\u043D\u0441\u043E\u0440\u043D\u044B\u0435 \u0438\u043A\u043E\u043D\u043A\u0438",
          descDesktop: "\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u043D\u0430 \u0437\u043D\u0430\u0447\u043E\u043A, \u0447\u0442\u043E\u0431\u044B \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043E \u0432\u044B\u0431\u043E\u0440\u0430 \u0437\u043D\u0430\u0447\u043A\u043E\u0432.",
          descMobile: "\u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u043D\u0430 \u0437\u043D\u0430\u0447\u043E\u043A, \u0447\u0442\u043E\u0431\u044B \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043E \u0432\u044B\u0431\u043E\u0440\u0430 \u0437\u043D\u0430\u0447\u043A\u043E\u0432."
        },
        showAllFileIcons: {
          name: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0432\u0441\u0435 \u0437\u043D\u0430\u0447\u043A\u0438 \u0444\u0430\u0439\u043B\u043E\u0432",
          desc: "\u0412\u0441\u0435\u0433\u0434\u0430 \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u0437\u043D\u0430\u0447\u043E\u043A \u043F\u043E \u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E \u0434\u043B\u044F \u0444\u0430\u0439\u043B\u043E\u0432 \u0431\u0435\u0437 \u0437\u043D\u0430\u0447\u043A\u0430."
        },
        headingIconPicker: "\u0412\u044B\u0431\u043E\u0440 \u0437\u043D\u0430\u0447\u043A\u043E\u0432",
        showItemName: {
          name: "\u041F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u0438\u043C\u044F \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430",
          desc: "\u041F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u0438\u043C\u044F \u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u0443\u0435\u043C\u043E\u0433\u043E \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430."
        },
        biggerSearchResults: {
          name: "\u0411\u043E\u043B\u044C\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u044B \u043F\u043E\u0438\u0441\u043A\u0430",
          desc: "\u041F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u0431\u043E\u043B\u044C\u0448\u0438\u0435 \u0437\u043D\u0430\u0447\u043A\u0438 \u0432 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u0445 \u043F\u043E\u0438\u0441\u043A\u0430."
        },
        maxSearchResults: {
          name: "\u041C\u0430\u043A\u0441\u0438\u043C\u0443\u043C \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u043E\u0432 \u043F\u043E\u0438\u0441\u043A\u0430",
          desc: "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435, \u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0437\u043D\u0430\u0447\u043A\u043E\u0432 \u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0442\u044C \u043E\u0434\u043D\u043E\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E"
        },
        colorPicker1: {
          name: "\u041E\u0441\u043D\u043E\u0432\u043D\u043E\u0439 \u0432\u044B\u0431\u043E\u0440 \u0446\u0432\u0435\u0442\u0430",
          descDesktop: "\u041F\u043E\u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043F\u0440\u0438 \u043D\u0430\u0436\u0430\u0442\u0438\u0438 \u043D\u0430 \u0446\u0432\u0435\u0442\u043E\u0432\u043E\u0439 \u043F\u0443\u0437\u044B\u0440\u044C",
          descMobile: "\u041F\u043E\u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043F\u0440\u0438 \u043A\u0430\u0441\u0430\u043D\u0438\u0438 \u0446\u0432\u0435\u0442\u043E\u0432\u043E\u0433\u043E \u043F\u0443\u0437\u044B\u0440\u044F"
        },
        colorPicker2: {
          name: "\u0412\u0442\u043E\u0440\u043E\u0439 \u0432\u044B\u0431\u043E\u0440 \u0446\u0432\u0435\u0442\u0430",
          descDesktop: "\u041F\u043E\u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043F\u0440\u0438 \u043F\u043E\u0432\u0442\u043E\u0440\u043D\u043E\u043C \u043D\u0430\u0436\u0430\u0442\u0438\u0438 \u043D\u0430 \u0446\u0432\u0435\u0442\u043E\u0432\u043E\u0439 \u043F\u0443\u0437\u044B\u0440\u044C",
          descMobile: "\u041F\u043E\u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043F\u0440\u0438 \u043D\u0430\u0436\u0430\u0442\u0438\u0438 \u0438 \u0443\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u043D\u0438\u0438 \u0446\u0432\u0435\u0442\u043E\u0432\u043E\u0433\u043E \u043F\u0443\u0437\u044B\u0440\u044F"
        },
        headingAdvanced: "\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E",
        uncolorHover: {
          name: "\u041D\u0435\u043E\u043A\u0440\u0430\u0448\u0435\u043D\u043D\u043E\u0435 \u043D\u0430\u0432\u0435\u0434\u0435\u043D\u0438\u0435",
          desc: "\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0446\u0432\u0435\u0442 \u0437\u043D\u0430\u0447\u043A\u0430 \u043F\u0440\u0438 \u043D\u0430\u0432\u0435\u0434\u0435\u043D\u0438\u0438 \u043D\u0430 \u044D\u043B\u0435\u043C\u0435\u043D\u0442."
        },
        uncolorSelect: {
          name: "\u041D\u0435\u043E\u043A\u0440\u0430\u0448\u0435\u043D\u043D\u043E\u0435 \u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u0435",
          desc: "\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0446\u0432\u0435\u0442 \u0437\u043D\u0430\u0447\u043A\u0430 \u043F\u0440\u0438 \u0432\u044B\u0431\u043E\u0440\u0435 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430."
        },
        rememberDeletedItems: {
          name: "\u0417\u0430\u043F\u043E\u043C\u0438\u043D\u0430\u0442\u044C \u0437\u043D\u0430\u0447\u043A\u0438 \u0443\u0434\u0430\u043B\u0435\u043D\u043D\u044B\u0445 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432",
          desc: "\u041B\u044E\u0431\u044B\u0435 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0435 \u0437\u043D\u0430\u0447\u043A\u0438 \u043F\u043E\u044F\u0432\u044F\u0442\u0441\u044F \u0441\u043D\u043E\u0432\u0430, \u043A\u043E\u0433\u0434\u0430 \u0438\u0445 \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u0441\u043D\u043E\u0432\u0430 \u043F\u043E\u044F\u0432\u0438\u0442\u0441\u044F."
        }
      }
    };
  }
});

// i18n/zh.json
var require_zh = __commonJS({
  "i18n/zh.json"(exports, module2) {
    module2.exports = {
      appItems: {
        help: "\u67E5\u770B\u5E2E\u52A9",
        settings: "\u6253\u5F00\u8BBE\u7F6E",
        pin: "\u89E3\u9501/\u9501\u5B9A",
        sidebarLeft: "\u6298\u53E0/\u5C55\u5F00\u5DE6\u4FA7\u8FB9\u680F",
        sidebarRight: "\u6298\u53E0/\u5C55\u5F00\u53F3\u4FA7\u8FB9\u680F"
      },
      menu: {
        changeIcon: "\u66F4\u6539\u56FE\u6807\u2026\u2026",
        changeIcons: "\u66F4\u6539 {#} \u4E2A\u56FE\u6807\u2026\u2026",
        removeIcon: "\u5220\u9664\u56FE\u6807",
        removeIcons: "\u5220\u9664 {#} \u4E2A\u56FE\u6807",
        resetColor: "\u91CD\u7F6E\u989C\u8272",
        resetColors: "\u91CD\u7F6E {#} \u79CD\u989C\u8272"
      },
      iconPicker: {
        changeIcon: "\u66F4\u6539\u56FE\u6807",
        changeIcons: "\u66F4\u6539 {#} \u4E2A\u56FE\u6807",
        changeEmoji: "\u66F4\u6539\u8868\u60C5\u7B26\u53F7",
        changeEmojis: "\u66F4\u6362 {#} \u4E2A\u8868\u60C5\u7B26\u53F7",
        search: "\u641C\u7D22",
        searchIcons: "\u641C\u7D22\u56FE\u6807\u2026\u2026",
        searchEmojis: "\u641C\u7D22\u8868\u60C5\u7B26\u53F7\u2026\u2026",
        changeColor: "\u6362\u989C\u8272",
        resetColor: "\u91CD\u7F6E\u989C\u8272",
        remove: "\u79FB\u9664",
        emojis: "\u8868\u60C5\u7B26\u53F7",
        icons: "\u56FE\u6807",
        cancel: "\u53D6\u6D88",
        save: "\u4FDD\u5B58",
        colors: {
          red: "\u7EA2\u8272",
          orange: "\u6A59\u8272",
          yellow: "\u9EC4\u8272",
          green: "\u7EFF\u8272",
          cyan: "\u9752\u8272",
          blue: "\u84DD\u8272",
          purple: "\u7D2B\u8272",
          pink: "\u7C89\u8272",
          gray: "\u7070\u8272"
        }
      },
      categories: {
        item: "\u9879",
        items: "\u9879",
        appItem: "\u6309\u94AE",
        appItems: "\u6309\u94AE",
        tab: "\u6807\u7B7E",
        tabs: "\u6807\u7B7E",
        file: "\u6587\u4EF6",
        files: "\u6587\u4EF6",
        folder: "\u6587\u4EF6\u5939",
        folders: "\u6587\u4EF6\u5939",
        group: "\u4E66\u7B7E\u7EC4",
        groups: "\u4E66\u7B7E\u7EC4",
        search: "\u67E5\u8BE2",
        searches: "\u67E5\u8BE2",
        graph: "\u5173\u7CFB\u56FE\u8C31",
        graphs: "\u5173\u7CFB\u56FE\u8C31",
        url: "URL",
        urls: "URL",
        property: "\u6587\u6863\u5C5E\u6027",
        properties: "\u6587\u6863\u5C5E\u6027",
        ribbonItem: "\u5DE5\u5177\u680F\u547D\u4EE4",
        ribbonItems: "\u5DE5\u5177\u680F\u547D\u4EE4"
      },
      commands: {
        toggleBiggerIcons: "\u5207\u6362\u66F4\u5927\u56FE\u6807",
        toggleClickableIcons: {
          desktop: "\u5207\u6362\u53EF\u70B9\u51FB\u56FE\u6807",
          mobile: "\u5207\u6362\u53EF\u89E6\u6478\u56FE\u6807"
        },
        toggleAllFileIcons: "\u5207\u6362\u6240\u6709\u6587\u4EF6\u56FE\u6807",
        toggleBiggerSearchResults: "\u5207\u6362\u66F4\u5927\u7684\u641C\u7D22\u7ED3\u679C"
      },
      settings: {
        values: {
          on: "\u5F00\u542F",
          off: "\u5173\u95ED",
          desktop: "\u4EC5\u9650\u684C\u9762",
          mobile: "\u4EC5\u9650\u79FB\u52A8\u8BBE\u5907",
          list: "\u989C\u8272\u5217\u8868",
          rgb: "RGB \u9009\u62E9\u5668"
        },
        headingListsAndTabs: "\u5217\u8868\u548C\u9009\u9879\u5361\u56FE\u6807",
        biggerIcons: {
          name: "\u66F4\u5927\u7684\u56FE\u6807",
          desc: "\u663E\u793A\u6BD4\u9ED8\u8BA4 UI \u66F4\u5927\u7684\u56FE\u6807\u3002"
        },
        clickableIcons: {
          nameDesktop: "\u53EF\u70B9\u51FB\u7684\u56FE\u6807",
          nameMobile: "\u53EF\u89E6\u6478\u56FE\u6807",
          descDesktop: "\u5355\u51FB\u56FE\u6807\u4EE5\u6253\u5F00\u56FE\u6807\u9009\u62E9\u5668\u3002",
          descMobile: "\u70B9\u51FB\u56FE\u6807\u4EE5\u6253\u5F00\u56FE\u6807\u9009\u62E9\u5668\u3002"
        },
        showAllFileIcons: {
          name: "\u663E\u793A\u6240\u6709\u6587\u4EF6\u56FE\u6807",
          desc: "\u59CB\u7EC8\u4E3A\u6CA1\u6709\u56FE\u6807\u7684\u6587\u4EF6\u663E\u793A\u9ED8\u8BA4\u56FE\u6807\u3002"
        },
        headingIconPicker: "\u56FE\u6807\u9009\u62E9\u5668",
        showItemName: {
          name: "\u663E\u793A\u9879\u76EE\u540D\u79F0",
          desc: "\u663E\u793A\u6B63\u5728\u7F16\u8F91\u7684\u9879\u76EE\u7684\u540D\u79F0\u3002"
        },
        biggerSearchResults: {
          name: "\u66F4\u5927\u7684\u641C\u7D22\u7ED3\u679C",
          desc: "\u5728\u641C\u7D22\u7ED3\u679C\u4E2D\u663E\u793A\u66F4\u5927\u7684\u56FE\u6807\u3002"
        },
        maxSearchResults: {
          name: "\u6700\u5927\u641C\u7D22\u7ED3\u679C",
          desc: "\u9009\u62E9\u4E00\u6B21\u663E\u793A\u591A\u5C11\u4E2A\u56FE\u6807\u3002"
        },
        colorPicker1: {
          name: "\u4E3B\u989C\u8272\u9009\u62E9\u5668",
          descDesktop: "\u5355\u51FB\u989C\u8272\u6C14\u6CE1\u65F6\u663E\u793A\u3002",
          descMobile: "\u89E6\u6478\u989C\u8272\u6C14\u6CE1\u65F6\u663E\u793A\u3002"
        },
        colorPicker2: {
          name: "\u7B2C\u4E8C\u4E2A\u989C\u8272\u9009\u62E9\u5668",
          descDesktop: "\u5F53\u60A8\u53CC\u51FB\u989C\u8272\u6C14\u6CE1\u65F6\u663E\u793A\u3002",
          descMobile: "\u5F53\u60A8\u6309\u4F4F\u989C\u8272\u6C14\u6CE1\u65F6\u663E\u793A\u3002"
        },
        headingAdvanced: "\u9AD8\u7EA7",
        uncolorHover: {
          name: "\u65E0\u8272\u60AC\u505C",
          desc: "\u60AC\u505C\u9879\u76EE\u65F6\u7981\u7528\u56FE\u6807\u989C\u8272\u3002"
        },
        uncolorSelect: {
          name: "\u65E0\u8272\u9009\u62E9",
          desc: "\u9009\u62E9\u9879\u76EE\u65F6\u7981\u7528\u56FE\u6807\u989C\u8272\u3002"
        },
        rememberDeletedItems: {
          name: "\u8BB0\u4F4F\u5DF2\u5220\u9664\u9879\u76EE\u7684\u56FE\u6807",
          desc: "\u5F53\u9879\u76EE\u518D\u6B21\u5B58\u5728\u65F6\uFF0C\u4EFB\u4F55\u81EA\u5B9A\u4E49\u56FE\u6807\u90FD\u4F1A\u91CD\u65B0\u51FA\u73B0\u3002"
        }
      }
    };
  }
});

// src/IconicPlugin.ts
var IconicPlugin_exports = {};
__export(IconicPlugin_exports, {
  EMOJIS: () => Emojis_default,
  ICONS: () => ICONS,
  STRINGS: () => Strings,
  default: () => IconicPlugin11
});
module.exports = __toCommonJS(IconicPlugin_exports);
var import_obsidian9 = require("obsidian");

// src/IconicSettingTab.ts
var import_obsidian = require("obsidian");
var IconicSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.indicators = {};
    this.plugin = plugin;
  }
  /**
   * @override
   */
  display() {
    this.containerEl.empty();
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.headingListsAndTabs).setHeading();
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.biggerIcons.name).setDesc(Strings.settings.biggerIcons.desc).addExtraButton((indicator) => {
      indicator.extraSettingsEl.addClass("iconic-indicator");
      this.indicators.biggerIcons = indicator;
    }).addDropdown((dropdown) => {
      dropdown.addOption("on", Strings.settings.values.on).addOption("desktop", Strings.settings.values.desktop).addOption("mobile", Strings.settings.values.mobile).addOption("off", Strings.settings.values.off).setValue(this.plugin.settings.biggerIcons).onChange((value) => {
        this.refreshIndicator(this.indicators.biggerIcons, value);
        this.plugin.settings.biggerIcons = value;
        this.plugin.saveSettings();
        this.plugin.refreshBodyClasses();
      });
      this.refreshIndicator(this.indicators.biggerIcons, dropdown.getValue());
    });
    new import_obsidian.Setting(this.containerEl).setName(
      import_obsidian.Platform.isDesktop ? Strings.settings.clickableIcons.nameDesktop : Strings.settings.clickableIcons.nameMobile
    ).setDesc(
      import_obsidian.Platform.isDesktop ? Strings.settings.clickableIcons.descDesktop : Strings.settings.clickableIcons.descMobile
    ).addExtraButton((indicator) => {
      indicator.extraSettingsEl.addClass("iconic-indicator");
      this.indicators.clickableIcons = indicator;
    }).addDropdown((dropdown) => {
      dropdown.addOption("on", Strings.settings.values.on).addOption("desktop", Strings.settings.values.desktop).addOption("mobile", Strings.settings.values.mobile).addOption("off", Strings.settings.values.off).setValue(this.plugin.settings.clickableIcons).onChange((value) => {
        this.refreshIndicator(this.indicators.clickableIcons, value);
        this.plugin.settings.clickableIcons = value;
        this.plugin.saveSettings();
        this.plugin.refreshIconManagers();
        this.plugin.refreshBodyClasses();
      });
      this.refreshIndicator(this.indicators.clickableIcons, dropdown.getValue());
    });
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.showAllFileIcons.name).setDesc(Strings.settings.showAllFileIcons.desc).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showAllFileIcons).onChange((value) => {
        this.plugin.settings.showAllFileIcons = value;
        this.plugin.saveSettings();
        this.plugin.tabIconManager?.refreshIcons();
        this.plugin.fileIconManager?.refreshIcons();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.headingIconPicker).setHeading();
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.showItemName.name).setDesc(Strings.settings.showItemName.desc).addExtraButton((indicator) => {
      indicator.extraSettingsEl.addClass("iconic-indicator");
      this.indicators.showItemName = indicator;
    }).addDropdown((dropdown) => {
      dropdown.addOption("on", Strings.settings.values.on).addOption("desktop", Strings.settings.values.desktop).addOption("mobile", Strings.settings.values.mobile).addOption("off", Strings.settings.values.off).setValue(this.plugin.settings.showItemName).onChange((value) => {
        this.refreshIndicator(this.indicators.showItemName, value);
        this.plugin.settings.showItemName = value;
        this.plugin.saveSettings();
      });
      this.refreshIndicator(this.indicators.showItemName, dropdown.getValue());
    });
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.biggerSearchResults.name).setDesc(Strings.settings.biggerSearchResults.desc).addExtraButton((indicator) => {
      indicator.extraSettingsEl.addClass("iconic-indicator");
      this.indicators.biggerSearchResults = indicator;
    }).addDropdown((dropdown) => {
      dropdown.addOption("on", Strings.settings.values.on).addOption("desktop", Strings.settings.values.desktop).addOption("mobile", Strings.settings.values.mobile).addOption("off", Strings.settings.values.off).setValue(this.plugin.settings.biggerSearchResults).onChange((value) => {
        this.refreshIndicator(this.indicators.biggerSearchResults, value);
        this.plugin.settings.biggerSearchResults = value;
        this.plugin.saveSettings();
        this.plugin.refreshBodyClasses();
      });
      this.refreshIndicator(this.indicators.biggerSearchResults, dropdown.getValue());
    });
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.maxSearchResults.name).setDesc(Strings.settings.maxSearchResults.desc).addSlider(
      (slider) => slider.setLimits(10, 300, 10).setValue(this.plugin.settings.maxSearchResults).setDynamicTooltip().onChange((value) => {
        this.plugin.settings.maxSearchResults = value;
        this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.colorPicker1.name).setDesc(
      import_obsidian.Platform.isDesktop ? Strings.settings.colorPicker1.descDesktop : Strings.settings.colorPicker1.descMobile
    ).addExtraButton((indicator) => {
      indicator.extraSettingsEl.addClass("iconic-indicator");
      this.indicators.colorPicker1 = indicator;
    }).addDropdown((dropdown) => {
      dropdown.addOption("list", Strings.settings.values.list).addOption("rgb", Strings.settings.values.rgb).setValue(this.plugin.settings.colorPicker1).onChange((value) => {
        this.refreshIndicator(this.indicators.colorPicker1, value);
        this.plugin.settings.colorPicker1 = value;
        this.plugin.saveSettings();
      });
      this.refreshIndicator(this.indicators.colorPicker1, dropdown.getValue());
    });
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.colorPicker2.name).setDesc(
      import_obsidian.Platform.isDesktop ? Strings.settings.colorPicker2.descDesktop : Strings.settings.colorPicker2.descMobile
    ).addExtraButton((indicator) => {
      indicator.extraSettingsEl.addClass("iconic-indicator");
      this.indicators.colorPicker2 = indicator;
    }).addDropdown((dropdown) => {
      dropdown.addOption("list", Strings.settings.values.list).addOption("rgb", Strings.settings.values.rgb).setValue(this.plugin.settings.colorPicker2).onChange((value) => {
        this.refreshIndicator(this.indicators.colorPicker2, value);
        this.plugin.settings.colorPicker2 = value;
        this.plugin.saveSettings();
      });
      this.refreshIndicator(this.indicators.colorPicker2, dropdown.getValue());
    });
    new import_obsidian.Setting(this.containerEl).setHeading().setName(Strings.settings.headingAdvanced);
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.uncolorHover.name).setDesc(Strings.settings.uncolorHover.desc).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.uncolorHover).onChange((value) => {
        this.plugin.settings.uncolorHover = value;
        this.plugin.saveSettings();
        this.plugin.refreshBodyClasses();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.uncolorSelect.name).setDesc(Strings.settings.uncolorSelect.desc).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.uncolorSelect).onChange((value) => {
        this.plugin.settings.uncolorSelect = value;
        this.plugin.saveSettings();
        this.plugin.refreshBodyClasses();
      })
    );
    new import_obsidian.Setting(this.containerEl).setName(Strings.settings.rememberDeletedItems.name).setDesc(Strings.settings.rememberDeletedItems.desc).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.rememberDeletedItems).onChange((value) => {
        this.plugin.settings.rememberDeletedItems = value;
        this.plugin.saveSettings();
      })
    );
  }
  /**
   * Change a dropdown indicator icon.
   */
  refreshIndicator(indicator, value) {
    switch (value) {
      case "desktop":
        indicator.setIcon("lucide-monitor");
        break;
      case "mobile":
        indicator.setIcon("lucide-tablet-smartphone");
        break;
      case "list":
        indicator.setIcon("lucide-paint-bucket");
        break;
      case "rgb":
        indicator.setIcon("lucide-pipette");
        break;
      default:
        indicator.extraSettingsEl.hide();
        return;
    }
    indicator.extraSettingsEl.show();
  }
};

// src/AppIconManager.ts
var import_obsidian4 = require("obsidian");

// src/IconManager.ts
var import_obsidian2 = require("obsidian");

// src/ColorUtils.ts
var COLORS = ["red", "orange", "yellow", "green", "cyan", "blue", "purple", "pink", "gray"];
var REGEX_HEX_COLOR = /^#[0-9a-fA-F]{8}$|#[0-9a-fA-F]{6}$|#[0-9a-fA-F]{4}$|#[0-9a-fA-F]{3}$/;
var REGEX_RGB_COLOR = /^rgb\( *\d{1,3} *, *\d{1,3}, *\d{1,3} *\)$/;
var REGEX_HSL_COLOR = /^hsl\( *-?\d+ *, *\d{1,3}%, *\d{1,3}% *\)$/;
var ColorUtils = class {
  /**
   * Check if color string is a recognized color name.
   */
  static isNamedColor(color) {
    return color ? COLORS.includes(color) : false;
  }
  /**
   * Check if color string is a valid hex color.
   */
  static isHexColor(color) {
    return color ? REGEX_HEX_COLOR.test(color) : false;
  }
  /**
   * Take a named color and return its value in the theme CSS.
   */
  static getCssValue(namedColor) {
    let cssProp;
    switch (namedColor) {
      case "red":
        cssProp = "--color-red";
        break;
      case "orange":
        cssProp = "--color-orange";
        break;
      case "yellow":
        cssProp = "--color-yellow";
        break;
      case "green":
        cssProp = "--color-green";
        break;
      case "cyan":
        cssProp = "--color-cyan";
        break;
      case "blue":
        cssProp = "--color-blue";
        break;
      case "purple":
        cssProp = "--color-purple";
        break;
      case "pink":
        cssProp = "--color-pink";
        break;
      case "gray":
        cssProp = "--color-base-70";
        break;
      default:
        cssProp = "--icon-color";
        break;
    }
    return window.getComputedStyle(document.body).getPropertyValue(cssProp);
  }
  /**
   * Take a color string (named or hex) and return a hex color, based on the theme CSS.
   */
  static getColorHex(color) {
    if (color && REGEX_HEX_COLOR.test(color))
      return color;
    const cssValue = this.getCssValue(color);
    if (REGEX_HEX_COLOR.test(cssValue)) {
      return cssValue;
    } else if (REGEX_RGB_COLOR.test(cssValue)) {
      const [r, g, b] = cssValue.replaceAll(/\s/g, "").slice(4, -1).split(",").map((str) => parseInt(str).toString(16).padStart(2, "0"));
      return "#" + r + g + b;
    } else if (REGEX_HSL_COLOR.test(cssValue)) {
      const [h, s, l] = cssValue.replaceAll(/[\s%]/g, "").slice(4, -1).split(",").map((str) => parseInt(str));
      const [r, g, b] = this.hslToRgb(h, s, l).map((int) => int.toString(16).padStart(2, "0"));
      return "#" + r + g + b;
    } else {
      return "#000000";
    }
  }
  /**
   * Take a named color and return a RGB color array, based on the theme CSS.
   */
  static getColorRgb(namedColor) {
    const cssValue = this.getCssValue(namedColor);
    if (REGEX_HEX_COLOR.test(cssValue)) {
      const rgb = cssValue.replace("#", "");
      const r = parseInt(rgb.slice(0, 2), 16);
      const g = parseInt(rgb.slice(2, 4), 16);
      const b = parseInt(rgb.slice(4, 6), 16);
      return [r, g, b];
    } else if (REGEX_RGB_COLOR.test(cssValue)) {
      const [r, g, b] = cssValue.replaceAll(/\s/g, "").slice(4, -1).split(",").map((str) => parseInt(str));
      return [r, g, b];
    } else if (REGEX_HSL_COLOR.test(cssValue)) {
      const [h, s, l] = cssValue.replaceAll(/[\s%]/g, "").slice(4, -1).split(",").map((str) => parseInt(str));
      return this.hslToRgb(h, s, l);
    } else {
      return [0, 0, 0];
    }
  }
  /**
   * Convert hex color to HSL array.
   */
  static hexToHsl(hexColor) {
    hexColor = hexColor.replace("#", "");
    const r = parseInt(hexColor.slice(0, 2), 16);
    const g = parseInt(hexColor.slice(2, 4), 16);
    const b = parseInt(hexColor.slice(4, 6), 16);
    return this.rgbToHsl(r, g, b);
  }
  /**
   * Convert RGB to HSL array.
   * @see {@link https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB}
   */
  static rgbToHsl(r, g, b) {
    r = Math.max(Math.min(r, 255), 0) / 255;
    g = Math.max(Math.min(g, 255), 0) / 255;
    b = Math.max(Math.min(b, 255), 0) / 255;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    const chroma = max - min;
    const l = (max + min) / 2;
    const s = Number.isInteger(l) ? 0 : (max - l) / Math.min(l, 1 - l);
    let h = 0;
    if (chroma > 0)
      switch (max) {
        case r:
          h = (g - b) / chroma % 6;
          break;
        case g:
          h = (b - r) / chroma + 2;
          break;
        case b:
          h = (r - g) / chroma + 4;
          break;
      }
    return [Math.round(h * 60), Math.round(s * 100), Math.round(l * 100)];
  }
  /**
   * Convert HSL to RGB array.
   * @see {@link https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB}
   */
  static hslToRgb(h, s, l) {
    h = (h % 360 + 360) % 360 / 60;
    s = Math.max(Math.min(s, 100), 0) / 100;
    l = Math.max(Math.min(l, 100), 0) / 100;
    const chroma = (1 - Math.abs(2 * l - 1)) * s;
    const x = chroma * (1 - Math.abs(h % 2 - 1));
    const [rr, gg, bb] = h < 1 ? [chroma, x, 0] : h < 2 ? [x, chroma, 0] : h < 3 ? [0, chroma, x] : h < 4 ? [0, x, chroma] : h < 5 ? [x, 0, chroma] : h < 6 ? [chroma, 0, x] : [0, 0, 0];
    const offset = l - chroma / 2;
    const [r, g, b] = [rr + offset, gg + offset, bb + offset];
    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
  }
};

// src/IconManager.ts
var IconManager = class {
  constructor(plugin) {
    this.eventListeners = /* @__PURE__ */ new Map();
    this.mutationObservers = /* @__PURE__ */ new Map();
    this.app = plugin.app;
    this.plugin = plugin;
  }
  /**
   * Refresh icon inside a given element.
   */
  refreshIcon(item, iconEl, onClick) {
    iconEl.addClass("iconic-icon");
    if (item.icon) {
      if (ICONS.has(item.icon)) {
        (0, import_obsidian2.setIcon)(iconEl, item.icon);
      } else if (Emojis_default.has(item.icon)) {
        iconEl.empty();
        const emojiEl = iconEl.createDiv({ cls: "iconic-emoji", text: item.icon });
        if (item.color) {
          if (ColorUtils.isNamedColor(item.color)) {
            const [r, g, b] = ColorUtils.getColorRgb(item.color);
            const [h, s, l] = ColorUtils.rgbToHsl(r, g, b);
            IconManager.colorFilter(emojiEl, h, s, l);
          } else if (ColorUtils.isHexColor(item.color)) {
            const [h, s, l] = ColorUtils.hexToHsl(item.color);
            IconManager.colorFilter(emojiEl, h, s, l);
          }
        }
      }
      iconEl.show();
    } else if (iconEl.hasClass("collapse-icon")) {
      (0, import_obsidian2.setIcon)(iconEl, "right-triangle");
      iconEl.removeClass("iconic-icon");
      iconEl.show();
    } else if ("iconDefault" in item && item.iconDefault) {
      (0, import_obsidian2.setIcon)(iconEl, item.iconDefault);
      iconEl.show();
    } else {
      iconEl.hide();
    }
    const svgEl = iconEl.find(".svg-icon");
    if (svgEl) {
      if (ColorUtils.isNamedColor(item.color)) {
        svgEl.style.setProperty("color", ColorUtils.getColorHex(item.color));
      } else if (ColorUtils.isHexColor(item.color)) {
        svgEl.style.setProperty("color", item.color);
      } else {
        svgEl.style.removeProperty("color");
      }
    }
    if (onClick) {
      this.setEventListener(iconEl, "click", onClick, { capture: true });
    } else {
      this.stopEventListener(iconEl, "click");
    }
  }
  /**
   * Set an inline color filter on an element.
   */
  static colorFilter(element, h, s, l) {
    element.style.filter = `grayscale() sepia() hue-rotate(${h - 50}deg) saturate(${s * 5}%)`;
  }
  /**
   * Set an event listener which will be removed when plugin unloads.
   * Replaces any previous listener of the same element & type.
   */
  setEventListener(element, type, listener, options) {
    if (!this.eventListeners.has(type)) {
      this.eventListeners.set(type, /* @__PURE__ */ new Map());
    }
    const map = this.eventListeners.get(type);
    if (map.has(element)) {
      const { listener: listener2, options: options2 } = map.get(element);
      element.removeEventListener(type, listener2, options2);
    }
    this.plugin.registerDomEvent(element, type, listener, options);
    map.set(element, { listener, options });
  }
  /**
   * Stop event listener of the given element & type.
   */
  stopEventListener(element, type) {
    const listenerMap = this.eventListeners.get(type);
    if (listenerMap?.has(element)) {
      const { listener, options } = listenerMap.get(element);
      element.removeEventListener(type, listener, options);
      listenerMap.delete(element);
    }
  }
  /**
   * Stop all event listeners set by this {@link IconManager}.
   */
  stopEventListeners() {
    for (const [type, listenerMap] of this.eventListeners) {
      for (const [element, { listener, options }] of listenerMap) {
        element.removeEventListener(type, listener, options);
        listenerMap.delete(element);
      }
    }
  }
  /**
   * Set a mutation observer which will be removed when plugin unloads.
   * Replaces any previous observer of the same element.
   */
  setMutationObserver(element, options, callback) {
    const observer = new MutationObserver(callback);
    if (this.mutationObservers.has(element)) {
      this.mutationObservers.get(element)?.disconnect();
    }
    observer.observe(element, options);
    this.mutationObservers.set(element, observer);
    return observer;
  }
  /**
   * Stop mutation observer of the given element.
   */
  stopMutationObserver(element) {
    this.mutationObservers.get(element)?.disconnect();
    this.mutationObservers.delete(element);
  }
  /**
   * Stop all mutation observers set by this {@link IconManager}.
   */
  stopMutationObservers() {
    for (const [element, observer] of this.mutationObservers) {
      observer.disconnect();
      this.mutationObservers.delete(element);
    }
  }
  /**
   * Revert all DOM changes when plugin unloads.
   */
  unload() {
    this.refreshIcons(true);
    this.stopEventListeners();
    this.stopMutationObservers();
  }
};

// src/IconPicker.ts
var import_obsidian3 = require("obsidian");
var IconPickerManager = class extends IconManager {
  constructor(plugin) {
    super(plugin);
  }
  /**
   * @override
   */
  refreshIcon(item, iconEl, onClick) {
    super.refreshIcon(item, iconEl, onClick);
  }
  /**
   * Not used by {@link IconPicker}.
   */
  refreshIcons() {
  }
  /**
   * @override
   */
  setEventListener(element, type, listener, options) {
    super.setEventListener(element, type, listener, options);
  }
  /**
   * @override
   */
  stopEventListeners() {
    super.stopEventListeners();
  }
};
var IconPicker = class extends import_obsidian3.Modal {
  constructor(plugin, titleText, categoryText, nameText, icon, color, callback, multiCallback) {
    super(plugin.app);
    // State
    this.emojiMode = false;
    this.pauseColorPickerOnChange = false;
    this.searchResults = [];
    this.plugin = plugin;
    this.manager = new IconPickerManager(plugin);
    this.titleText = titleText;
    this.categoryText = categoryText;
    this.nameText = nameText;
    this.icon = icon;
    this.color = color;
    this.callback = callback;
    this.multiCallback = multiCallback;
    for (const command of this.plugin.commands) {
      const hotkeys = this.app.hotkeyManager?.customKeys?.[command.id] ?? [];
      for (const hotkey of hotkeys) {
        if (command.callback) {
          this.scope.register(hotkey.modifiers, hotkey.key, command.callback);
        }
      }
    }
  }
  /**
   * Open a dialog to change a single icon.
   */
  static openSingle(plugin, item, callback) {
    const title = Strings.iconPicker.changeIcon;
    const nameText = item.name;
    let categoryText;
    switch (item.category) {
      case "app":
        categoryText = Strings.categories.appItem;
        break;
      case "tab":
        categoryText = Strings.categories.tab;
        break;
      case "file":
        categoryText = Strings.categories.file;
        break;
      case "folder":
        categoryText = Strings.categories.folder;
        break;
      case "group":
        categoryText = Strings.categories.group;
        break;
      case "search":
        categoryText = Strings.categories.search;
        break;
      case "graph":
        categoryText = Strings.categories.graph;
        break;
      case "url":
        categoryText = Strings.categories.url;
        break;
      case "property":
        categoryText = Strings.categories.property;
        break;
      case "ribbon":
        categoryText = Strings.categories.ribbonItem;
        break;
      default:
        categoryText = Strings.categories.item;
        break;
    }
    new IconPicker(plugin, title, categoryText, nameText, item.icon, item.color, callback, null).open();
  }
  /**
   * Open a dialog to change multiple icons at once.
   */
  static openMulti(plugin, items, multiCallback) {
    const title = Strings.iconPicker.changeIcons.replace("{#}", items.length.toString());
    const nameText = items.map((item) => item.name).join(", ");
    const everyCategory = items.every((item) => item.category === items[0].category) ? items[0].category : void 0;
    const everyIcon = items.every((item) => item.icon === items[0].icon) ? items[0].icon : void 0;
    const everyColor = items.every((item) => item.color === items[0].color) ? items[0].color : void 0;
    let categoryText;
    switch (everyCategory) {
      case "app":
        categoryText = Strings.categories.appItems;
        break;
      case "tab":
        categoryText = Strings.categories.tabs;
        break;
      case "file":
        categoryText = Strings.categories.files;
        break;
      case "folder":
        categoryText = Strings.categories.folders;
        break;
      case "group":
        categoryText = Strings.categories.groups;
        break;
      case "search":
        categoryText = Strings.categories.searches;
        break;
      case "graph":
        categoryText = Strings.categories.graphs;
        break;
      case "url":
        categoryText = Strings.categories.urls;
        break;
      case "property":
        categoryText = Strings.categories.properties;
        break;
      case "ribbon":
        categoryText = Strings.categories.ribbonItems;
        break;
      default:
        categoryText = Strings.categories.items;
        break;
    }
    new IconPicker(plugin, title, categoryText, nameText, everyIcon, everyColor, null, multiCallback).open();
  }
  /**
   * @override
   */
  onOpen() {
    this.containerEl.addClass("mod-confirmation");
    this.modalEl.addClass("iconic-modal");
    this.setTitle(this.titleText);
    const showItemName = this.plugin.settings.showItemName === "on" || import_obsidian3.Platform.isDesktop && this.plugin.settings.showItemName === "desktop" || import_obsidian3.Platform.isMobile && this.plugin.settings.showItemName === "mobile";
    if (showItemName) {
      new import_obsidian3.Setting(this.contentEl).setName(this.categoryText).addText((itemNameField) => itemNameField.setValue(this.nameText)).setDisabled(true);
    }
    this.searchSetting = new import_obsidian3.Setting(this.contentEl).addExtraButton((colorResetButton) => {
      colorResetButton.setIcon("lucide-rotate-ccw").setTooltip(Strings.iconPicker.resetColor).onClick(() => this.resetColor());
      colorResetButton.extraSettingsEl.tabIndex = 0;
      colorResetButton.extraSettingsEl.addClass("iconic-reset-color");
      colorResetButton.extraSettingsEl.toggleClass("iconic-invisible", this.color === null);
      this.manager.setEventListener(colorResetButton.extraSettingsEl, "pointerdown", (event) => {
        event.preventDefault();
      });
      this.manager.setEventListener(colorResetButton.extraSettingsEl, "keydown", (event) => {
        if (event.key === "Enter" || event.key === " ") {
          this.resetColor();
        }
      });
      this.colorResetButton = colorResetButton;
    }).addColorPicker((colorPicker) => {
      colorPicker.setValue(ColorUtils.getColorHex(this.color)).onChange((value) => {
        if (this.pauseColorPickerOnChange) {
          this.pauseColorPickerOnChange = false;
          return;
        }
        this.color = value;
        this.colorPickerEl.ariaLabel = this.color;
        this.colorResetButton.extraSettingsEl.removeClass("iconic-invisible");
        this.updateSearchResults();
      });
      this.colorPicker = colorPicker;
    }).addSearch((searchField) => {
      searchField.setPlaceholder(Strings.iconPicker.searchIcons).onChange(() => this.updateSearchResults());
      searchField.inputEl.enterKeyHint = "go";
      this.manager.setEventListener(searchField.inputEl, "keydown", (event) => {
        if (event.key === "Enter" && this.searchResults.length > 0) {
          this.closeAndSave(this.searchResults[0][0], this.color);
        }
      });
      this.searchField = searchField;
    });
    if (!import_obsidian3.Platform.isPhone)
      this.searchSetting.setName(Strings.iconPicker.search);
    let openRgbPicker = false;
    this.colorPickerEl = this.searchSetting.controlEl.find('input[type="color"]');
    this.colorPickerEl.tabIndex = 0;
    this.colorPickerEl.dataset.tooltipDelay = "300";
    this.manager.setEventListener(this.colorPickerEl, "click", (event) => {
      if (openRgbPicker === true) {
        openRgbPicker = false;
      } else if (this.plugin.settings.colorPicker1 === "list") {
        this.openColorMenu(event.x, event.y);
        event.preventDefault();
      }
    });
    this.manager.setEventListener(this.colorPickerEl, "contextmenu", (event) => {
      navigator?.vibrate(100);
      if (this.plugin.settings.colorPicker2 === "rgb") {
        openRgbPicker = true;
        this.colorPickerEl.click();
      } else if (this.plugin.settings.colorPicker2 === "list") {
        this.openColorMenu(event.x, event.y);
        event.preventDefault();
      }
    });
    this.manager.setEventListener(this.colorPickerEl, "keydown", (event) => {
      if (event.key === "Enter" || event.key === " ") {
        const rect = this.colorPickerEl.getBoundingClientRect();
        this.openColorMenu(rect.top, rect.right);
        event.preventDefault();
      } else if (event.key === "Delete" || event.key === "Backspace") {
        this.resetColor();
      } else if (event.key == "ArrowUp" || event.key === "ArrowLeft") {
        this.previousColor();
      } else if (event.key == "ArrowDown" || event.key === "ArrowRight") {
        this.nextColor();
      }
    });
    this.manager.setEventListener(this.colorPickerEl, "wheel", (event) => {
      event.deltaY + event.deltaX < 0 ? this.previousColor() : this.nextColor();
    }, { passive: true });
    this.updateColorPicker();
    this.searchResultsSetting = new import_obsidian3.Setting(this.contentEl);
    this.searchResultsSetting.settingEl.addClass("iconic-search-results");
    this.manager.setEventListener(this.searchResultsSetting.settingEl, "wheel", (event) => {
      if (activeDocument.body.hasClass("mod-rtl")) {
        this.searchResultsSetting.settingEl.scrollLeft -= event.deltaY;
      } else {
        this.searchResultsSetting.settingEl.scrollLeft += event.deltaY;
      }
    }, { passive: true });
    const buttonContainerEl = this.modalEl.createDiv({ cls: "modal-button-container" });
    if (this.icon !== null || this.color !== null) {
      const removeButtonEl = buttonContainerEl.createEl("button", { text: Strings.iconPicker.remove });
      this.manager.setEventListener(removeButtonEl, "click", () => this.closeAndSave(null, null));
      if (import_obsidian3.Platform.isPhone) {
        removeButtonEl.addClass("mod-warning");
      } else {
        removeButtonEl.addClasses(["mod-secondary", "mod-destructive"]);
      }
    }
    if (import_obsidian3.Platform.isPhone) {
      this.emojiButtonEl = this.modalEl.createEl("button", {
        cls: ["modal-nav-action", "mod-secondary"],
        text: Strings.iconPicker.emojis
      });
    } else if (import_obsidian3.Platform.isTablet) {
      this.emojiButtonEl = buttonContainerEl.createEl("button", {
        text: Strings.iconPicker.emojis
      });
    } else {
      this.emojiButtonEl = buttonContainerEl.createDiv({
        cls: ["clickable-icon", "setting-editor-extra-setting-button"],
        attr: { tabIndex: 0, "aria-label": Strings.iconPicker.emojis, "data-tooltip-position": "top" }
      });
      (0, import_obsidian3.setIcon)(this.emojiButtonEl, "lucide-smile-plus");
    }
    this.manager.setEventListener(this.emojiButtonEl, "click", () => this.toggleEmojiMode());
    this.manager.setEventListener(this.emojiButtonEl, "pointerdown", (event) => event.preventDefault());
    this.manager.setEventListener(this.emojiButtonEl, "keydown", (event) => {
      if (event.key === "Enter" || event.key === " ") {
        this.toggleEmojiMode();
      }
    });
    if (this.icon) {
      if (ICONS.has(this.icon)) {
        this.searchField.setValue(ICONS.get(this.icon) ?? "");
      } else if (Emojis_default.has(this.icon)) {
        this.toggleEmojiMode();
        this.searchField.setValue(Emojis_default.get(this.icon) ?? "");
      }
    }
    if (!import_obsidian3.Platform.isPhone) {
      const cancelEl = buttonContainerEl.createEl("button", { cls: "mod-cancel", text: Strings.iconPicker.cancel });
      this.manager.setEventListener(cancelEl, "click", () => this.close());
    }
    const saveEl = import_obsidian3.Platform.isPhone ? this.modalEl.createEl("button", { cls: ["modal-nav-action", "mod-cta"], text: Strings.iconPicker.save }) : buttonContainerEl.createEl("button", { cls: "mod-cta", text: Strings.iconPicker.save });
    this.manager.setEventListener(saveEl, "click", () => this.closeAndSave(this.icon, this.color));
    setTimeout(() => {
      this.searchField.inputEl.focus();
      this.searchField.inputEl.select();
    }, 0);
    this.updateSearchResults();
  }
  /**
   * Open color menu at the given coordinates.
   */
  openColorMenu(x, y) {
    const menu = new import_obsidian3.Menu();
    for (const color of COLORS) {
      menu.addItem((menuItem) => {
        menuItem.setTitle(Strings.iconPicker.colors[color]).setSection("color").onClick(() => {
          this.color = color;
          this.colorResetButton.extraSettingsEl.removeClass("iconic-invisible");
          this.updateColorPicker();
          this.updateSearchResults();
        });
        this.manager.refreshIcon({ icon: "lucide-paint-bucket", color }, menuItem.iconEl);
      });
    }
    menu.showAtPosition({ x, y });
  }
  /**
   * Select previous color in list. Used by keyboard and scrollwheel events.
   */
  previousColor() {
    let index = COLORS.length - 1;
    if (this.color && COLORS.includes(this.color) && this.color !== COLORS.first()) {
      index = COLORS.indexOf(this.color) - 1;
    }
    this.color = COLORS[index];
    this.colorResetButton.extraSettingsEl.removeClass("iconic-invisible");
    this.updateColorPicker();
    this.updateSearchResults();
  }
  /**
   * Select next color in list. Used by keyboard and scrollwheel events.
   */
  nextColor() {
    let index = 0;
    if (this.color && COLORS.includes(this.color) && this.color !== COLORS.last()) {
      index = COLORS.indexOf(this.color) + 1;
    }
    this.color = COLORS[index];
    this.colorResetButton.extraSettingsEl.removeClass("iconic-invisible");
    this.updateColorPicker();
    this.updateSearchResults();
  }
  /**
   * Reset icon to the default color.
   */
  resetColor() {
    this.color = null;
    this.colorResetButton.extraSettingsEl.addClass("iconic-invisible");
    this.updateColorPicker();
    this.updateSearchResults();
  }
  /**
   * Toggle between icon search and emoji search.
   */
  toggleEmojiMode() {
    this.emojiMode = !this.emojiMode;
    if (this.emojiMode) {
      this.setTitle(Strings.iconPicker.changeEmoji);
      this.searchField.setPlaceholder(Strings.iconPicker.searchEmojis);
      if (import_obsidian3.Platform.isMobile) {
        this.emojiButtonEl.setText(Strings.iconPicker.icons);
      } else {
        (0, import_obsidian3.setIcon)(this.emojiButtonEl, "lucide-image-plus");
        this.emojiButtonEl.ariaLabel = Strings.iconPicker.icons;
      }
    } else {
      this.setTitle(Strings.iconPicker.changeIcon);
      this.searchField.setPlaceholder(Strings.iconPicker.searchIcons);
      if (import_obsidian3.Platform.isMobile) {
        this.emojiButtonEl.setText(Strings.iconPicker.emojis);
      } else {
        (0, import_obsidian3.setIcon)(this.emojiButtonEl, "lucide-smile-plus");
        this.emojiButtonEl.ariaLabel = Strings.iconPicker.emojis;
      }
    }
    this.updateSearchResults();
  }
  /**
   * Update color of color picker without triggering its onChange() callback.
   */
  updateColorPicker() {
    this.pauseColorPickerOnChange = true;
    this.colorPicker.setValue(ColorUtils.getColorHex(this.color));
    if (!this.color) {
      this.colorPickerEl.ariaLabel = Strings.iconPicker.changeColor;
    } else if (ColorUtils.isNamedColor(this.color)) {
      this.colorPickerEl.ariaLabel = Strings.iconPicker.colors[this.color];
    } else {
      this.colorPickerEl.ariaLabel = this.color;
    }
  }
  /**
   * Update search results based on current query.
   */
  updateSearchResults() {
    const query = this.searchField.getValue();
    const fuzzySearch = (0, import_obsidian3.prepareFuzzySearch)(query);
    const matches = [];
    const iconEntries = this.emojiMode ? [...Emojis_default] : [...ICONS];
    this.searchResults.length = 0;
    this.searchResultsSetting.clear();
    if (query)
      for (const [icon, iconName] of iconEntries) {
        if (query === icon) {
          matches.push([0, [icon, iconName]]);
        } else {
          const fuzzyMatch = fuzzySearch(iconName);
          if (fuzzyMatch)
            matches.push([fuzzyMatch.score, [icon, iconName]]);
        }
      }
    matches.sort(([scoreA], [scoreB]) => scoreA > scoreB ? -1 : 1);
    for (const [, iconEntry] of matches) {
      this.searchResults.push(iconEntry);
      if (this.searchResults.length === this.plugin.settings.maxSearchResults)
        break;
    }
    for (const iconEntry of this.searchResults) {
      const [icon, iconName] = iconEntry;
      this.searchResultsSetting.addExtraButton((iconButton) => {
        iconButton.setTooltip(iconName, { delay: 300 });
        const iconEl = iconButton.extraSettingsEl;
        iconEl.addClass("iconic-search-result");
        iconEl.tabIndex = 0;
        this.manager.refreshIcon({ icon, color: this.color ?? null }, iconEl, () => {
          this.closeAndSave(icon, this.color);
        });
        this.manager.setEventListener(iconEl, "keydown", (event) => {
          if (event.key === "Enter" || event.key === " ") {
            this.closeAndSave(icon, this.color);
          }
        });
      });
    }
    if (this.searchResults.length === 0) {
      this.searchResultsSetting.addExtraButton((button) => {
        button.extraSettingsEl.addClasses(["iconic-invisible", "iconic-search-result"]);
      });
    }
  }
  /**
   * Close dialog while passing icon & color to original callback.
   */
  closeAndSave(icon, color) {
    if (this.callback) {
      this.callback(icon ?? null, color ?? null);
    } else if (this.multiCallback) {
      this.multiCallback(icon, color);
    }
    this.close();
  }
  /**
   * @override
   */
  onClose() {
    this.contentEl.empty();
    this.manager.stopEventListeners();
  }
};

// src/AppIconManager.ts
var AppIconManager = class extends IconManager {
  constructor(plugin) {
    super(plugin);
    this.plugin.registerEvent(this.app.workspace.on("layout-change", () => this.refreshIcons()));
    this.refreshIcons();
  }
  /**
   * Refresh all app icons.
   */
  refreshIcons(unloading) {
    if (import_obsidian4.Platform.isDesktop) {
      this.helpEl = this.helpEl ? this.helpEl : fish(".workspace-drawer-vault-actions > .clickable-icon:has(.svg-icon.help)");
      if (this.helpEl) {
        const helpItem = this.plugin.getAppItem("help", unloading);
        this.refreshIcon(helpItem, this.helpEl);
        this.setEventListener(this.helpEl, "contextmenu", (event) => this.onContextMenu("help", event));
      }
    }
    if (import_obsidian4.Platform.isDesktop) {
      this.settingsEl = this.settingsEl ? this.settingsEl : fish(".workspace-drawer-vault-actions > .clickable-icon:has(.svg-icon.lucide-settings)");
    } else {
      this.settingsEl = this.settingsEl ? this.settingsEl : fish(".workspace-drawer-header-icon.mod-settings");
    }
    if (this.settingsEl) {
      const settingsItem = this.plugin.getAppItem("settings", unloading);
      this.refreshIcon(settingsItem, this.settingsEl);
      this.setEventListener(this.settingsEl, "contextmenu", (event) => this.onContextMenu("settings", event));
    }
    if (import_obsidian4.Platform.isMobile) {
      this.pinEls = this.pinEls?.length > 0 ? this.pinEls : fishAll(".workspace-drawer-header-icon.mod-pin");
      for (const pinEl of this.pinEls) {
        const pinItem = this.plugin.getAppItem("pin", unloading);
        this.refreshIcon(pinItem, pinEl);
        this.setEventListener(pinEl, "contextmenu", (event) => this.onContextMenu("pin", event));
      }
    }
    this.sidebarLeftEls = this.sidebarLeftEls?.length > 0 ? this.sidebarLeftEls : fishAll(".sidebar-toggle-button.mod-left").concat(fishAll(".view-action.clickable-icon.mod-left-split-toggle"));
    for (const sidebarLeftEl of this.sidebarLeftEls) {
      const iconEl = sidebarLeftEl.hasClass("clickable-icon") ? sidebarLeftEl : sidebarLeftEl.find(":scope > .clickable-icon");
      if (iconEl) {
        const item = this.plugin.getAppItem("sidebarLeft", unloading);
        this.refreshIcon(item, iconEl);
        this.setEventListener(sidebarLeftEl, "contextmenu", (event) => this.onContextMenu("sidebarLeft", event));
      }
    }
    this.sidebarRightEl = this.sidebarRightEl ? this.sidebarRightEl : fish(".sidebar-toggle-button.mod-right");
    if (this.sidebarRightEl) {
      const iconEl = this.sidebarRightEl.find(":scope > .clickable-icon");
      if (iconEl) {
        const item = this.plugin.getAppItem("sidebarRight", unloading);
        this.refreshIcon(item, iconEl);
        this.setEventListener(this.sidebarRightEl, "contextmenu", (event) => this.onContextMenu("sidebarRight", event));
      }
    }
  }
  /**
   * When user context-clicks an app item, open a menu or add custom items to the existing menu.
   */
  onContextMenu(appItemId, event) {
    navigator?.vibrate(100);
    this.plugin.menuManager.close();
    const appItem = this.plugin.getAppItem(appItemId);
    const menu = appItemId.startsWith("sidebar") && !import_obsidian4.Platform.isPhone ? this.plugin.menuManager : new import_obsidian4.Menu();
    if (appItemId.startsWith("sidebar"))
      menu.addSeparator();
    menu.addItem(
      (menuItem) => menuItem.setTitle(Strings.menu.changeIcon).setIcon("lucide-image-plus").onClick(() => IconPicker.openSingle(this.plugin, appItem, (newIcon, newColor) => {
        this.plugin.saveAppIcon(appItem, newIcon, newColor);
        this.refreshIcons();
      }))
    );
    if (appItem.icon || appItem.color) {
      menu.addItem(
        (menuItem) => menuItem.setTitle(appItem.icon ? Strings.menu.removeIcon : Strings.menu.resetColor).setIcon(appItem.icon ? "lucide-image-minus" : "lucide-rotate-ccw").onClick(() => {
          this.plugin.saveAppIcon(appItem, null, null);
          this.refreshIcons();
        })
      );
    }
    if (menu instanceof import_obsidian4.Menu)
      menu.showAtMouseEvent(event);
  }
};

// src/TabIconManager.ts
var import_obsidian5 = require("obsidian");
var TabIconManager = class extends IconManager {
  constructor(plugin) {
    super(plugin);
    this.plugin.registerEvent(this.app.workspace.on("layout-change", () => this.refreshIcons()));
    if (this.app.plugins?.plugins?.["obsidian-icon-folder"]) {
      this.plugin.registerEvent(this.app.workspace.on("active-leaf-change", () => this.refreshIcons()));
    }
    const tabListEl = activeDocument.body.find(".mod-root .workspace-tab-header-tab-list > .clickable-icon");
    if (tabListEl)
      this.setEventListener(tabListEl, "click", () => {
        const tabs = this.plugin.getTabItems().filter((tab) => tab.isRoot);
        this.plugin.menuManager.forSection("tablist", (item, i) => {
          const tab = tabs[i];
          if (tab) {
            tab.iconDefault = tab.iconDefault ?? "lucide-file";
            this.refreshIcon(tab, item.iconEl);
          }
        });
      });
    this.refreshIcons();
  }
  /**
   * Refresh all tab icons.
   */
  refreshIcons(unloading) {
    const tabs = this.plugin.getTabItems(unloading);
    for (const tab of tabs) {
      const tabEl = tab.tabEl;
      const iconEl = tab.iconEl;
      if (!tabEl || !iconEl)
        continue;
      if (tab.isRoot && this.plugin.isSettingEnabled("clickableIcons")) {
        if (tab.isFile) {
          const file = this.plugin.getFileItem(tab.id);
          this.refreshIcon(tab, iconEl, (event) => {
            IconPicker.openSingle(this.plugin, file, (newIcon, newColor) => {
              this.plugin.saveFileIcon(file, newIcon, newColor);
              this.refreshIcons();
              this.plugin.fileIconManager?.refreshIcons();
              this.plugin.bookmarkIconManager?.refreshIcons();
            });
            event.stopPropagation();
          });
        } else {
          this.refreshIcon(tab, iconEl, (event) => {
            IconPicker.openSingle(this.plugin, tab, (newIcon, newColor) => {
              this.plugin.saveTabIcon(tab, newIcon, newColor);
              this.refreshIcons();
            });
            event.stopPropagation();
          });
        }
      } else {
        this.refreshIcon(tab, iconEl);
      }
      this.setEventListener(tabEl, "dragstart", () => {
        if (tab.icon || tab.iconDefault) {
          const ghostEl = activeDocument.body.find(":scope > .drag-ghost > .drag-ghost-icon");
          if (ghostEl) {
            this.refreshIcon({ icon: tab.icon ?? tab.iconDefault, color: tab.color }, ghostEl);
          }
        }
      });
      if (!tab.isFile || !tabEl.hasClass("is-active")) {
        this.setEventListener(tabEl, "contextmenu", () => this.onContextMenu(tab.id, tab.isFile));
      }
      const statusEl = tabEl.find(":scope > .workspace-tab-header-inner > .workspace-tab-header-status-container");
      if (statusEl)
        this.setMutationObserver(statusEl, { childList: true }, (mutations) => {
          for (const mutation of mutations) {
            for (const addedNode of mutation.addedNodes) {
              if (addedNode instanceof HTMLElement && addedNode.hasClass("mod-pinned")) {
                this.refreshIcons();
                return;
              }
            }
            for (const removedNode of mutation.removedNodes) {
              if (removedNode instanceof HTMLElement && removedNode.hasClass("mod-pinned")) {
                this.refreshIcons();
                return;
              }
            }
          }
        });
      if (import_obsidian5.Platform.isMobile) {
        this.setEventListener(this.app.workspace.leftSplit.activeTabSelectEl, "change", () => this.refreshIcons());
        this.setEventListener(this.app.workspace.rightSplit.activeTabSelectEl, "change", () => this.refreshIcons());
        if (this.app.workspace.leftSplit.activeTabIconEl === iconEl) {
          this.setEventListener(this.app.workspace.leftSplit.activeTabHeaderEl, "contextmenu", () => this.onContextMenu(tab.id, tab.isFile));
        } else if (this.app.workspace.rightSplit.activeTabIconEl === iconEl) {
          this.setEventListener(this.app.workspace.rightSplit.activeTabHeaderEl, "contextmenu", () => this.onContextMenu(tab.id, tab.isFile));
        }
      }
    }
  }
  /**
   * When user context-clicks a tab, add custom items to the menu.
   */
  onContextMenu(tabId, isFile) {
    this.plugin.menuManager.close();
    if (isFile) {
      this.onFileContextMenu(this.plugin.getFileItem(tabId));
    } else {
      const tab = this.plugin.getTabItem(tabId);
      if (tab)
        this.onTabContextMenu(tab);
    }
  }
  /**
   * Add custom items to a tab menu.
   */
  onTabContextMenu(tab) {
    this.plugin.menuManager.addItemAfter(
      "close",
      (item) => item.setTitle(Strings.menu.changeIcon).setIcon("lucide-image-plus").setSection("icon").onClick(() => IconPicker.openSingle(this.plugin, tab, (newIcon, newColor) => {
        this.plugin.saveTabIcon(tab, newIcon, newColor);
        this.refreshIcons();
      }))
    );
    if (tab.icon || tab.color) {
      this.plugin.menuManager.addItem(
        (item) => item.setTitle(tab.icon ? Strings.menu.removeIcon : Strings.menu.resetColor).setIcon(tab.icon ? "lucide-image-minus" : "lucide-rotate-ccw").setSection("icon").onClick(() => {
          this.plugin.saveTabIcon(tab, null, null);
          this.refreshIcons();
        })
      );
    }
  }
  /**
   * Add custom items to a file tab menu.
   */
  onFileContextMenu(file) {
    this.plugin.menuManager.addItemAfter(
      "close",
      (item) => item.setTitle(Strings.menu.changeIcon).setIcon("lucide-image-plus").setSection("icon").onClick(() => IconPicker.openSingle(this.plugin, file, (newIcon, newColor) => {
        this.plugin.saveFileIcon(file, newIcon, newColor);
        this.refreshIcons();
        this.plugin.fileIconManager?.refreshIcons();
        this.plugin.bookmarkIconManager?.refreshIcons();
      }))
    );
    if (file.icon || file.color) {
      this.plugin.menuManager.addItem(
        (item) => item.setTitle(file.icon ? Strings.menu.removeIcon : Strings.menu.resetColor).setIcon(file.icon ? "lucide-image-minus" : "lucide-rotate-ccw").setSection("icon").onClick(() => {
          this.plugin.saveFileIcon(file, null, null);
          this.refreshIcons();
          this.plugin.fileIconManager?.refreshIcons();
          this.plugin.bookmarkIconManager?.refreshIcons();
        })
      );
    }
  }
};

// src/FileIconManager.ts
var FileIconManager = class extends IconManager {
  constructor(plugin) {
    super(plugin);
    this.plugin.registerEvent(this.app.workspace.on("file-menu", (menu, tFile) => {
      this.onContextMenu(tFile.path);
    }));
    this.plugin.registerEvent(this.app.workspace.on("files-menu", (menu, tFiles) => {
      this.onContextMenu(...tFiles.map((file) => file.path));
    }));
    this.plugin.registerEvent(this.app.workspace.on("layout-change", () => {
      if (activeDocument.contains(this.containerEl))
        return;
      this.app.workspace.iterateAllLeaves((leaf) => this.manageLeaf(leaf));
    }));
    this.app.workspace.iterateAllLeaves((leaf) => this.manageLeaf(leaf));
  }
  /**
   * Start managing the given leaf if has a matching type.
   */
  manageLeaf(leaf) {
    if (leaf.getViewState().type !== "file-explorer") {
      return;
    } else if (this.containerEl) {
      this.stopMutationObserver(this.containerEl);
    }
    this.containerEl = leaf.view.containerEl.find(":scope > .nav-files-container > div");
    if (this.containerEl)
      this.setMutationObserver(this.containerEl, { subtree: true, childList: true }, (mutations) => {
        for (const mutation of mutations) {
          for (const addedNode of mutation.addedNodes) {
            if (addedNode instanceof HTMLElement && addedNode.hasClass("tree-item")) {
              this.refreshIcons();
              return;
            }
          }
        }
      });
    this.refreshIcons();
  }
  /**
   * Refresh all file icons.
   */
  refreshIcons(unloading) {
    const files = this.plugin.getFileItems(unloading);
    const itemEls = this.containerEl?.findAll(":scope > .tree-item");
    if (itemEls)
      this.refreshChildIcons(files, itemEls);
  }
  /**
   * Refresh an array of file icons, including any subitems.
   */
  refreshChildIcons(files, itemEls) {
    for (const itemEl of itemEls) {
      itemEl.addClass("iconic-item");
      const selfEl = itemEl.find(":scope > .tree-item-self");
      const file = files.find((file2) => file2.id === selfEl?.dataset.path);
      if (!file)
        continue;
      if (file.items) {
        if (!itemEl.hasClass("is-collapsed")) {
          const childItemEls = itemEl.findAll(":scope > .tree-item-children > .tree-item");
          if (childItemEls)
            this.refreshChildIcons(file.items, childItemEls);
        }
        this.setMutationObserver(itemEl, { attributeFilter: ["class"] }, (mutations) => {
          if (file.items)
            for (const mutation of mutations) {
              if (mutation.target instanceof HTMLElement && !mutation.target.hasClass("is-collapsed")) {
                const childItemEls = itemEl.findAll(":scope > .tree-item-children > .tree-item");
                if (childItemEls)
                  this.refreshChildIcons(file.items, childItemEls);
              }
            }
        });
      }
      let iconEl = selfEl.find(":scope > .tree-item-icon");
      if (!iconEl)
        iconEl = selfEl.createDiv({ cls: "tree-item-icon" });
      if (iconEl.hasClass("collapse-icon") && !file.icon) {
        this.refreshIcon(file, iconEl);
      } else if (this.plugin.isSettingEnabled("clickableIcons")) {
        this.refreshIcon(file, iconEl, (event) => {
          IconPicker.openSingle(this.plugin, file, (newIcon, newColor) => {
            this.plugin.saveFileIcon(file, newIcon, newColor);
            this.refreshIcons();
            this.plugin.tabIconManager?.refreshIcons();
            this.plugin.bookmarkIconManager?.refreshIcons();
          });
          event.stopPropagation();
        });
      } else {
        this.refreshIcon(file, iconEl);
      }
      this.setEventListener(selfEl, "dragstart", () => {
        if (file.icon || file.iconDefault || file.color) {
          const ghostEl = activeDocument.body.find(":scope > .drag-ghost > .drag-ghost-self");
          if (ghostEl) {
            const spanEl = ghostEl.find("span");
            const ghostIcon = file.category === "folder" && file.icon === null ? "lucide-folder-open" : file.icon || file.iconDefault;
            this.refreshIcon({ icon: ghostIcon, color: file.color }, ghostEl);
            ghostEl.appendChild(spanEl);
          }
        }
      });
    }
  }
  /**
   * When user context-clicks a file, or opens a file pane menu, add custom items to the menu.
   */
  onContextMenu(...fileIds) {
    this.plugin.menuManager.close();
    const files = [];
    for (const fileId of fileIds) {
      files.push(this.plugin.getFileItem(fileId));
    }
    const changeTitle = files.length === 1 ? Strings.menu.changeIcon : Strings.menu.changeIcons.replace("{#}", files.length.toString());
    this.plugin.menuManager.addItemAfter(
      ["action-primary", "pane", "close", "open"],
      (item) => item.setTitle(changeTitle).setIcon("lucide-image-plus").setSection("icon").onClick(() => {
        if (files.length === 1) {
          IconPicker.openSingle(this.plugin, files[0], (newIcon, newColor) => {
            this.plugin.saveFileIcon(files[0], newIcon, newColor);
            this.refreshIcons();
            this.plugin.tabIconManager?.refreshIcons();
            this.plugin.bookmarkIconManager?.refreshIcons();
          });
        } else {
          IconPicker.openMulti(this.plugin, files, (newIcon, newColor) => {
            this.plugin.saveFileIcons(files, newIcon, newColor);
            this.refreshIcons();
            this.plugin.tabIconManager?.refreshIcons();
            this.plugin.bookmarkIconManager?.refreshIcons();
          });
        }
      })
    );
    const anyIcons = files.some((file) => file.icon);
    const anyColors = files.some((file) => file.color);
    const removalTitle = files.length === 1 ? files[0].icon ? Strings.menu.removeIcon : Strings.menu.resetColor : anyIcons ? Strings.menu.removeIcons.replace("{#}", files.length.toString()) : Strings.menu.resetColors.replace("{#}", files.length.toString());
    const removalIcon = anyIcons ? "lucide-image-minus" : "lucide-rotate-ccw";
    if (anyIcons || anyColors) {
      this.plugin.menuManager.addItem(
        (item) => item.setTitle(removalTitle).setIcon(removalIcon).setSection("icon").onClick(() => {
          if (files.length === 1) {
            this.plugin.saveFileIcon(files[0], null, null);
          } else {
            this.plugin.saveFileIcons(files, null, null);
          }
          this.refreshIcons();
          this.plugin.tabIconManager?.refreshIcons();
          this.plugin.bookmarkIconManager?.refreshIcons();
        })
      );
    }
  }
};

// src/BookmarkIconManager.ts
var BookmarkIconManager = class extends IconManager {
  constructor(plugin) {
    super(plugin);
    this.isTouchActive = false;
    this.selectionLookup = /* @__PURE__ */ new Map();
    this.plugin.registerEvent(this.app.workspace.on("layout-change", () => {
      if (activeDocument.contains(this.containerEl)) {
        return;
      } else {
        this.app.workspace.iterateAllLeaves((leaf) => this.manageLeaf(leaf));
      }
    }));
    if (this.app.plugins?.plugins?.["obsidian-icon-folder"]) {
      this.plugin.registerEvent(this.app.workspace.on("active-leaf-change", () => {
        this.refreshIcons();
      }));
    }
    this.app.workspace.iterateAllLeaves((leaf) => this.manageLeaf(leaf));
  }
  /**
   * Start managing this leaf if has a matching type.
   */
  manageLeaf(leaf) {
    if (leaf.getViewState().type !== "bookmarks") {
      return;
    } else if (this.containerEl) {
      this.stopMutationObserver(this.containerEl);
    }
    this.containerEl = leaf.view.containerEl.find(":scope > .view-content > div");
    if (this.containerEl)
      this.setMutationObserver(this.containerEl, {
        subtree: true,
        childList: true,
        attributeFilter: ["class"],
        attributeOldValue: true
      }, (mutations) => {
        for (const mutation of mutations) {
          if (mutation.attributeName === "class" && mutation.target instanceof HTMLElement && mutation.oldValue?.includes("is-being-renamed") && !mutation.target.hasClass("is-being-renamed")) {
            this.refreshIcons();
            return;
          }
          for (const addedNode of mutation.addedNodes) {
            if (addedNode instanceof HTMLElement && addedNode.hasClass("tree-item")) {
              this.refreshIcons();
              return;
            }
          }
        }
      });
    this.refreshIcons();
  }
  /**
   * Refresh all bookmark icons.
   */
  refreshIcons(unloading) {
    const bmarks = this.plugin.getBookmarkItems(unloading);
    const itemEls = this.containerEl?.findAll(":scope > .tree-item");
    if (itemEls) {
      this.selectionLookup.clear();
      this.refreshChildIcons(bmarks, itemEls);
    }
  }
  /**
   * Refresh an array of bookmark icons, including any subitems.
   */
  refreshChildIcons(bmarks, itemEls) {
    for (const itemEl of itemEls) {
      itemEl.addClass("iconic-item");
      const bmark = bmarks[itemEls.indexOf(itemEl)];
      if (!bmark)
        continue;
      if (bmark.items) {
        if (!itemEl.hasClass("is-collapsed")) {
          const childItemEls = itemEl.findAll(":scope > .tree-item-children > .tree-item");
          if (childItemEls)
            this.refreshChildIcons(bmark.items, childItemEls);
        }
        this.setMutationObserver(itemEl, { attributeFilter: ["class"] }, (mutations) => {
          if (bmark.items)
            for (const mutation of mutations) {
              if (mutation.target instanceof HTMLElement && !mutation.target.hasClass("is-collapsed")) {
                const childItemEls = itemEl.findAll(":scope > .tree-item-children > .tree-item");
                if (childItemEls)
                  this.refreshChildIcons(bmark.items, childItemEls);
              }
            }
        });
      }
      const iconEl = itemEl.find(":scope > .tree-item-self > .tree-item-icon");
      if (!iconEl)
        continue;
      if (iconEl.hasClass("collapse-icon") && !bmark.icon) {
        this.refreshIcon(bmark, iconEl);
      } else if (this.plugin.isSettingEnabled("clickableIcons")) {
        this.refreshIcon(bmark, iconEl, (event) => {
          IconPicker.openSingle(this.plugin, bmark, (newIcon, newColor) => {
            this.plugin.saveBookmarkIcon(bmark, newIcon, newColor);
            this.refreshIcons();
            this.plugin.tabIconManager?.refreshIcons();
            this.plugin.fileIconManager?.refreshIcons();
          });
          event.stopPropagation();
        });
      } else {
        this.refreshIcon(bmark, iconEl);
      }
      const selfEl = itemEl.find(":scope > .tree-item-self");
      if (selfEl) {
        this.selectionLookup.set(selfEl, bmark);
        this.setEventListener(selfEl, "touchstart", () => this.isTouchActive = true);
        this.setEventListener(selfEl, "contextmenu", () => {
          if (this.isTouchActive) {
            this.isTouchActive = false;
          } else {
            this.onContextMenu(bmark.id, bmark.isFile);
          }
        }, { capture: true });
      }
      this.setEventListener(selfEl, "dragstart", () => {
        if (bmark.icon || bmark.iconDefault) {
          const ghostEl = activeDocument.body.find(":scope > .drag-ghost > .drag-ghost-self");
          if (ghostEl) {
            const spanEl = ghostEl.find("span");
            const ghostIcon = bmark.category === "group" && bmark.icon === null ? "lucide-bookmark" : bmark.icon || bmark.iconDefault;
            this.refreshIcon({ icon: ghostIcon, color: bmark.color }, ghostEl);
            ghostEl.appendChild(spanEl);
          }
        }
      });
    }
  }
  /**
   * When user context-clicks a bookmark, add custom items to the menu.
   */
  onContextMenu(clickedBmarkId, isFile) {
    this.plugin.menuManager.close();
    const clickedBmark = this.plugin.getBookmarkItem(clickedBmarkId, isFile);
    const selectedBmarks = [];
    for (const [selectableEl, bmark] of this.selectionLookup) {
      if (selectableEl.hasClass("is-selected")) {
        selectedBmarks.push(this.plugin.getBookmarkItem(bmark.id, bmark.isFile));
      }
    }
    if (!selectedBmarks.some((selectedBmark) => selectedBmark.id === clickedBmark.id)) {
      selectedBmarks.length = 0;
    }
    const changeTitle = selectedBmarks.length < 2 ? Strings.menu.changeIcon : Strings.menu.changeIcons.replace("{#}", selectedBmarks.length.toString());
    this.plugin.menuManager.addItemAfter(
      "open",
      (item) => item.setTitle(changeTitle).setIcon("lucide-image-plus").setSection("icon").onClick(() => {
        if (selectedBmarks.length < 2) {
          IconPicker.openSingle(this.plugin, clickedBmark, (newIcon, newColor) => {
            this.plugin.saveBookmarkIcon(clickedBmark, newIcon, newColor);
            this.refreshIcons();
            this.plugin.tabIconManager?.refreshIcons();
            this.plugin.fileIconManager?.refreshIcons();
          });
        } else {
          IconPicker.openMulti(this.plugin, selectedBmarks, (newIcon, newColor) => {
            this.plugin.saveBookmarkIcons(selectedBmarks, newIcon, newColor);
            this.refreshIcons();
            this.plugin.tabIconManager?.refreshIcons();
            this.plugin.fileIconManager?.refreshIcons();
          });
        }
      })
    );
    const anyRemovable = selectedBmarks.some((bmark) => bmark.icon || bmark.color);
    const anyIcons = selectedBmarks.some((bmark) => bmark.icon);
    const removeTitle = selectedBmarks.length < 2 ? clickedBmark.icon ? Strings.menu.removeIcon : Strings.menu.resetColor : anyIcons ? Strings.menu.removeIcons.replace("{#}", selectedBmarks.length.toString()) : Strings.menu.resetColors.replace("{#}", selectedBmarks.length.toString());
    const removeIcon = clickedBmark.icon || anyIcons ? "lucide-image-minus" : "lucide-rotate-ccw";
    if (clickedBmark.icon || clickedBmark.color || anyRemovable) {
      this.plugin.menuManager.addItem(
        (item) => item.setTitle(removeTitle).setIcon(removeIcon).setSection("icon").onClick(() => {
          if (selectedBmarks.length < 2) {
            this.plugin.saveBookmarkIcon(clickedBmark, null, null);
          } else {
            this.plugin.saveBookmarkIcons(selectedBmarks, null, null);
          }
          this.refreshIcons();
          this.plugin.tabIconManager?.refreshIcons();
          this.plugin.fileIconManager?.refreshIcons();
        })
      );
    }
  }
};

// src/PropertyIconManager.ts
var PropertyIconManager = class extends IconManager {
  constructor(plugin) {
    super(plugin);
    this.plugin.registerEvent(this.app.workspace.on("layout-change", () => {
      if (activeDocument.contains(this.containerEl)) {
        return;
      } else {
        this.app.workspace.iterateAllLeaves((leaf) => this.manageLeaf(leaf));
      }
    }));
    this.app.workspace.iterateAllLeaves((leaf) => this.manageLeaf(leaf));
  }
  /**
   * Start managing this leaf if has a matching type.
   */
  manageLeaf(leaf) {
    if (leaf.getViewState().type !== "all-properties") {
      return;
    } else if (this.containerEl) {
      this.stopMutationObserver(this.containerEl);
    }
    this.containerEl = leaf.view.containerEl.find(":scope > .view-content > div");
    if (this.containerEl)
      this.setMutationObserver(this.containerEl, { subtree: true, childList: true }, (mutations) => {
        for (const mutation of mutations) {
          for (const addedNode of mutation.addedNodes) {
            if (addedNode instanceof HTMLElement && addedNode.hasClass("tree-item")) {
              this.refreshIcons();
              return;
            }
          }
        }
      });
    this.refreshIcons();
  }
  /**
   * Refresh all property icons.
   */
  refreshIcons(unloading) {
    this.stopMutationObserver(this.containerEl);
    const props = this.plugin.getPropertyItems(unloading);
    const itemEls = this.containerEl?.findAll(":scope > .tree-item") ?? [];
    for (const itemEl of itemEls) {
      itemEl.addClass("iconic-item");
      const textEl = itemEl.find(".tree-item-self > .tree-item-inner > .tree-item-inner-text");
      const prop = props.find((prop2) => prop2.id === textEl?.getText());
      if (!prop)
        continue;
      const iconEl = itemEl.find(".tree-item-self > .tree-item-icon");
      if (!iconEl)
        continue;
      if (this.plugin.isSettingEnabled("clickableIcons")) {
        this.refreshIcon(prop, iconEl, (event) => {
          IconPicker.openSingle(this.plugin, prop, (newIcon, newColor) => {
            this.plugin.savePropertyIcon(prop, newIcon, newColor);
            this.refreshIcons();
            this.plugin.editorIconManager?.refreshIcons();
          });
          event.stopPropagation();
        });
      } else {
        this.refreshIcon(prop, iconEl);
      }
      this.setEventListener(itemEl, "contextmenu", () => this.onContextMenu(prop.id), { capture: true });
    }
    if (this.containerEl)
      this.setMutationObserver(this.containerEl, { subtree: true, childList: true }, () => this.refreshIcons());
  }
  /**
   * When user context-clicks a property, add custom items to the menu.
   */
  onContextMenu(clickedPropId) {
    navigator.vibrate(100);
    this.plugin.menuManager.close();
    const clickedProp = this.plugin.getPropertyItem(clickedPropId);
    const selectedProps = [];
    for (const selfEl of this.containerEl?.findAll(".tree-item-self.is-selected") ?? []) {
      const textEl = selfEl.find(":scope > .tree-item-inner > .tree-item-inner-text");
      if (textEl?.textContent) {
        selectedProps.push(this.plugin.getPropertyItem(textEl.textContent));
      }
    }
    if (!selectedProps.some((selectedFile) => selectedFile.id === clickedProp.id)) {
      selectedProps.length = 0;
    }
    const changeTitle = selectedProps.length < 2 ? Strings.menu.changeIcon : Strings.menu.changeIcons.replace("{#}", selectedProps.length.toString());
    this.plugin.menuManager.addItemAfter(
      ["action.changeType", "action"],
      (item) => item.setTitle(changeTitle).setIcon("lucide-image-plus").setSection("icon").onClick(() => {
        if (selectedProps.length < 2) {
          IconPicker.openSingle(this.plugin, clickedProp, (newIcon, newColor) => {
            this.plugin.savePropertyIcon(clickedProp, newIcon, newColor);
            this.refreshIcons();
            this.plugin.editorIconManager?.refreshIcons();
          });
        } else {
          IconPicker.openMulti(this.plugin, selectedProps, (newIcon, newColor) => {
            this.plugin.savePropertyIcons(selectedProps, newIcon, newColor);
            this.refreshIcons();
            this.plugin.editorIconManager?.refreshIcons();
          });
        }
      })
    );
    const anySelectedIcons = selectedProps.some((file) => file.icon);
    const anySelectedColors = selectedProps.some((file) => file.color);
    const removeTitle = selectedProps.length < 2 ? clickedProp.icon ? Strings.menu.removeIcon : Strings.menu.resetColor : anySelectedIcons ? Strings.menu.removeIcons.replace("{#}", selectedProps.length.toString()) : Strings.menu.resetColors.replace("{#}", selectedProps.length.toString());
    const removeIcon = clickedProp.icon || anySelectedIcons ? "lucide-image-minus" : "lucide-rotate-ccw";
    if (clickedProp.icon || clickedProp.color || anySelectedIcons || anySelectedColors) {
      this.plugin.menuManager.addItem(
        (item) => item.setTitle(removeTitle).setIcon(removeIcon).setSection("icon").onClick(() => {
          if (selectedProps.length < 2) {
            this.plugin.savePropertyIcon(clickedProp, null, null);
          } else {
            this.plugin.savePropertyIcons(selectedProps, null, null);
          }
          this.refreshIcons();
          this.plugin.editorIconManager?.refreshIcons();
        })
      );
    }
  }
};

// src/EditorIconManager.ts
var import_obsidian6 = require("obsidian");
var EditorIconManager = class extends IconManager {
  constructor(plugin) {
    super(plugin);
    this.setMutationObserver(activeDocument.body, { childList: true }, (mutations) => {
      if (!activeDocument.activeElement?.hasClass("metadata-property-key-input"))
        return;
      for (const mutation of mutations) {
        for (const addedNode of mutation.addedNodes) {
          if (addedNode instanceof HTMLElement && addedNode.hasClass("suggestion-container")) {
            this.onSuggestionMenu(addedNode);
          }
        }
      }
    });
    this.plugin.registerEvent(this.app.workspace.on("active-leaf-change", (leaf) => {
      if (leaf?.view instanceof import_obsidian6.MarkdownView) {
        const props2 = this.plugin.getPropertyItems();
        this.refreshViewIcons(props2, leaf.view);
        const propListEl = leaf.view.metadataEditor?.propertyListEl;
        if (propListEl)
          this.observeProperties(propListEl);
      }
    }));
    const props = plugin.getPropertyItems();
    const markdownLeaves = this.app.workspace.getLeavesOfType("markdown");
    for (const leaf of markdownLeaves) {
      if (leaf.view instanceof import_obsidian6.MarkdownView)
        this.refreshViewIcons(props, leaf.view);
    }
  }
  /**
   * Refresh whenever a property changes.
   * @param propsEl Element with class 'metadata-properties'
   */
  observeProperties(propsEl) {
    this.setMutationObserver(propsEl, { subtree: true, childList: true }, (mutations) => {
      for (const mutation of mutations) {
        if (mutation.target instanceof HTMLElement && mutation.target.hasClass("metadata-property-icon")) {
          this.refreshIcons();
          return;
        }
        for (const addedNode of mutation.addedNodes) {
          if (addedNode instanceof HTMLElement && addedNode.hasClass("tree-item")) {
            this.refreshIcons();
            return;
          }
        }
      }
    });
    this.setEventListener(propsEl, "click", (event) => {
      const pointEls = activeDocument.elementsFromPoint(event.x, event.y);
      const iconEl = pointEls.find((el) => el.hasClass("metadata-property-icon"));
      const propEl = pointEls.find((el) => el.hasClass("metadata-property"));
      if (iconEl && propEl instanceof HTMLElement) {
        const prop = propEl.dataset.propertyKey ? this.plugin.getPropertyItem(propEl.dataset.propertyKey) : null;
        if (!prop)
          return;
        if (this.plugin.isSettingEnabled("clickableIcons")) {
          IconPicker.openSingle(this.plugin, prop, (newIcon, newColor) => {
            this.plugin.savePropertyIcon(prop, newIcon, newColor);
            this.refreshIcons();
            this.plugin.propertyIconManager?.refreshIcons();
          });
          event.stopPropagation();
        } else {
          this.onContextMenu(prop.id);
        }
      }
    }, { capture: true });
    this.setEventListener(propsEl, "contextmenu", (event) => {
      const pointEls = activeDocument.elementsFromPoint(event.x, event.y);
      const iconEl = pointEls.find((el) => el.hasClass("metadata-property-icon"));
      const propEl = pointEls.find((el) => el.hasClass("metadata-property"));
      if (iconEl && propEl instanceof HTMLElement) {
        const prop = propEl.dataset.propertyKey ? this.plugin.getPropertyItem(propEl.dataset.propertyKey) : null;
        if (prop)
          this.onContextMenu(prop.id);
      }
    }, { capture: true });
  }
  /**
   * Refresh all property icons in all MarkdownViews.
   */
  refreshIcons(unloadings) {
    const props = this.plugin.getPropertyItems(unloadings);
    const markdownLeaves = this.app.workspace.getLeavesOfType("markdown");
    for (const leaf of markdownLeaves) {
      if (leaf.view instanceof import_obsidian6.MarkdownView) {
        this.refreshViewIcons(props, leaf.view);
        const propListEl = leaf.view.metadataEditor?.propertyListEl;
        if (propListEl)
          this.observeProperties(propListEl);
      }
    }
  }
  /**
   * Refresh all property icons in a single MarkdownView.
  */
  refreshViewIcons(props, view) {
    const propListEl = view.metadataEditor?.propertyListEl;
    if (!propListEl)
      return;
    const propEls = propListEl.findAll(":scope > .metadata-property");
    for (const propEl of propEls) {
      const prop = props.find((prop2) => prop2.id === propEl.dataset.propertyKey);
      if (!prop)
        return;
      const keyEl = propEl.find(":scope > .metadata-property-key");
      const iconEl = keyEl?.find(":scope > .metadata-property-icon");
      if (iconEl)
        this.refreshIcon(prop, iconEl);
    }
  }
  /**
   * When user context-clicks a property, add custom items to the menu.
   */
  onContextMenu(propId) {
    this.plugin.menuManager.close();
    const prop = this.plugin.getPropertyItem(propId);
    this.plugin.menuManager.addItemAfter(
      ["action.changeType", "action"],
      (item) => item.setTitle(Strings.menu.changeIcon).setIcon("lucide-image-plus").setSection("icon").onClick(() => IconPicker.openSingle(this.plugin, prop, (newIcon, newColor) => {
        this.plugin.savePropertyIcon(prop, newIcon, newColor);
        this.refreshIcons();
        this.plugin.propertyIconManager?.refreshIcons();
      }))
    );
    if (prop.icon || prop.color) {
      this.plugin.menuManager.addItem(
        (item) => item.setTitle(prop.icon ? Strings.menu.removeIcon : Strings.menu.resetColor).setIcon(prop.icon ? "lucide-image-minus" : "lucide-rotate-ccw").setSection("icon").onClick(() => {
          this.plugin.savePropertyIcon(prop, null, null);
          this.refreshIcons();
          this.plugin.propertyIconManager?.refreshIcons();
        })
      );
    }
  }
  /**
   * Refresh all property icons in the current suggestions menu.
   */
  onSuggestionMenu(suggestMenuEl) {
    this.stopMutationObserver(suggestMenuEl);
    const propEls = suggestMenuEl.findAll(":scope > .suggestion > .suggestion-item");
    for (const propEl of propEls) {
      const propId = propEl.find(":scope > .suggestion-content > .suggestion-title")?.getText();
      if (propId) {
        const prop = this.plugin.getPropertyItem(propId);
        const iconEl = propEl.find(":scope > .suggestion-icon > .suggestion-flair");
        if (iconEl)
          this.refreshIcon(prop, iconEl);
      }
    }
    this.setMutationObserver(suggestMenuEl, { subtree: true, childList: true }, () => {
      this.onSuggestionMenu(suggestMenuEl);
    });
  }
};

// src/RibbonIconManager.ts
var import_obsidian7 = require("obsidian");
var RibbonIconManager = class extends IconManager {
  constructor(plugin) {
    super(plugin);
    this.refreshIcons();
    const containerEl = this.app.workspace.leftRibbon.ribbonItemsEl;
    this.setEventListener(containerEl, "auxclick", (event) => event.stopPropagation(), { capture: true });
    this.setMutationObserver(containerEl, { childList: true }, () => this.refreshIcons());
    const ribbonEl = activeDocument.body.find(
      import_obsidian7.Platform.isDesktop ? ".side-dock-ribbon.mod-left.workspace-ribbon" : ".side-dock-ribbon.mod-left.workspace-drawer-ribbon"
    );
    if (ribbonEl)
      this.setEventListener(ribbonEl, "contextmenu", () => {
        const ribbonItems = this.plugin.getRibbonItems();
        this.plugin.menuManager.forSection("order", (item) => {
          const ribbonItem = ribbonItems[0];
          if (ribbonItem) {
            item.setIcon(ribbonItem.icon);
            this.refreshIcon(ribbonItem, item.iconEl);
            ribbonItems.shift();
          }
        });
      });
    this.setMutationObserver(activeDocument.body, { childList: true }, (mutations) => {
      for (const mutation of mutations) {
        for (const addedNode of mutation.addedNodes) {
          if (addedNode instanceof HTMLElement && addedNode.hasClass("modal-container") && addedNode.find(".modal-content > div > .mobile-option-setting-item") && addedNode.find(".modal-content > .modal-button-container")) {
            this.refreshConfigIcons(addedNode);
          }
        }
      }
    });
  }
  /**
   * Refresh all ribbon icons.
   */
  refreshIcons(unloading) {
    const ribbonItems = this.plugin.getRibbonItems(unloading);
    for (const ribbonItem of ribbonItems) {
      const iconEl = ribbonItem.iconEl;
      if (!iconEl)
        continue;
      if (ribbonItem.isHidden) {
        ribbonItem.icon = null;
        ribbonItem.iconDefault = null;
      }
      this.refreshIcon(ribbonItem, iconEl);
      this.setEventListener(iconEl, "contextmenu", (event) => this.onContextMenu(ribbonItem.id, event));
    }
  }
  /**
   * Refresh all icons in the ribbon configuration dialog.
   */
  refreshConfigIcons(containerEl) {
    const iconEls = containerEl.findAll(".mobile-option-setting-item-option-icon:not(.mobile-option-setting-drag-icon)");
    if (iconEls.length === 0)
      return;
    const ribbonItems = this.plugin.getRibbonItems();
    const visibleItems = ribbonItems.filter((item) => !item.isHidden);
    const hiddenItems = ribbonItems.filter((item) => item.isHidden);
    const visibleEls = containerEl.findAll(".mobile-option-setting-item:has(.mobile-option-setting-item-remove-icon)");
    const hiddenEls = containerEl.findAll(".mobile-option-setting-item:has(.mobile-option-setting-item-add-icon)");
    const configItems = [
      ...visibleItems.map((item, i) => [item, visibleEls[i], "mobile-option-setting-item-remove-icon"]),
      ...hiddenItems.map((item, i) => [item, hiddenEls[i], "mobile-option-setting-item-add-icon"])
    ];
    for (const [item, itemEl, buttonClass] of configItems) {
      const iconEl = itemEl.find(":scope > .mobile-option-setting-item-option-icon");
      const buttonEl = itemEl.find(":scope > ." + buttonClass);
      this.refreshIcon(item, iconEl, (event) => {
        IconPicker.openSingle(this.plugin, item, (newIcon, newColor) => {
          this.plugin.saveRibbonIcon(item, newIcon, newColor);
          this.refreshIcons();
          this.refreshConfigIcons(containerEl);
        });
        event.stopPropagation();
      });
      this.setEventListener(buttonEl, "click", () => this.refreshConfigIcons(containerEl));
    }
  }
  /**
   * When user context-clicks a ribbon command, open a menu.
   */
  onContextMenu(ribbonItemId, event) {
    navigator.vibrate(100);
    this.plugin.menuManager.close();
    const ribbonItem = this.plugin.getRibbonItem(ribbonItemId);
    const menu = new import_obsidian7.Menu();
    menu.addItem(
      (menuItem) => menuItem.setTitle(Strings.menu.changeIcon).setIcon("lucide-image-plus").setSection("icon").onClick(() => IconPicker.openSingle(this.plugin, ribbonItem, (newIcon, newColor) => {
        this.plugin.saveRibbonIcon(ribbonItem, newIcon, newColor);
        this.refreshIcons();
      }))
    );
    if (ribbonItem.icon || ribbonItem.color) {
      menu.addItem(
        (menuItem) => menuItem.setTitle(ribbonItem.icon ? Strings.menu.removeIcon : Strings.menu.resetColor).setIcon(ribbonItem.icon ? "lucide-image-minus" : "lucide-rotate-ccw").setSection("icon").onClick(() => {
          this.plugin.saveRibbonIcon(ribbonItem, null, null);
          this.refreshIcons();
        })
      );
    }
    menu.showAtMouseEvent(event);
  }
};

// src/MenuManager.ts
var import_obsidian8 = require("obsidian");
var MenuManager = class {
  constructor() {
    this.queuedActions = [];
    const manager = this;
    import_obsidian8.Menu.prototype.showAtPosition = new Proxy(import_obsidian8.Menu.prototype.showAtPosition, {
      apply(showAtPosition, menu, args) {
        manager.menu = menu;
        if (manager.queuedActions.length > 0) {
          manager.runQueuedActions.call(manager);
        }
        return showAtPosition.call(menu, ...args);
      }
    });
  }
  /**
   * Run all actions in the queue.
   */
  runQueuedActions() {
    const actions = this.queuedActions;
    this.queuedActions = [];
    for (const action of actions)
      action();
  }
  /**
   * Add a menu item.
   */
  addItem(callback) {
    if (this.menu) {
      this.menu.addItem(callback);
    } else {
      this.queuedActions.push(() => this.addItem(callback));
    }
    return this;
  }
  /**
   * Add a menu item after the given sections, prioritized by array order.
   */
  addItemAfter(preSections, callback) {
    if (this.menu) {
      if (typeof preSections === "string")
        preSections = [preSections];
      this.menu.addItem((item) => {
        callback(item);
        const section = item.section;
        const sections = this.menu?.sections ?? [];
        let index = 0;
        for (const preSection of preSections) {
          if (sections.includes(preSection)) {
            index = sections.lastIndexOf(preSection) + 1;
            break;
          }
        }
        sections.remove(section);
        sections.splice(index, 0, section);
      });
    } else {
      this.queuedActions.push(() => this.addItemAfter(preSections, callback));
    }
    return this;
  }
  /**
   * Add a separator.
   */
  addSeparator() {
    if (this.menu) {
      this.menu.addSeparator();
    } else {
      this.queuedActions.push(() => this.addSeparator());
    }
    return this;
  }
  /**
   * Iterate menu items of a given section.
   */
  forSection(section, callback) {
    if (this.menu) {
      const items = this.menu.items.filter((item) => item.section === section);
      for (let i = 0; i < items.length; i++) {
        callback(items[i], i);
      }
    } else {
      this.queuedActions.push(() => this.forSection(section, callback));
    }
    return this;
  }
  /**
   * Close menu and discard the object.
   */
  close() {
    this.menu?.close();
    this.menu = null;
  }
};

// src/Emojis.ts
var Emojis_default = /* @__PURE__ */ new Map([
  ["\u{1F600}", "grinning face"],
  ["\u{1F603}", "grinning face with big eyes"],
  ["\u{1F604}", "grinning face with smiling eyes"],
  ["\u{1F601}", "beaming face with smiling eyes"],
  ["\u{1F606}", "grinning squinting face"],
  ["\u{1F605}", "grinning face with sweat"],
  ["\u{1F923}", "rolling on the floor laughing"],
  ["\u{1F602}", "face with tears of joy"],
  ["\u{1F642}", "slightly smiling face"],
  ["\u{1F643}", "upside-down face"],
  ["\u{1FAE0}", "melting face"],
  ["\u{1F609}", "winking face"],
  ["\u{1F60A}", "smiling face with smiling eyes"],
  ["\u{1F607}", "smiling face with halo"],
  ["\u{1F970}", "smiling face with hearts"],
  ["\u{1F60D}", "smiling face with heart-eyes"],
  ["\u{1F929}", "star-struck"],
  ["\u{1F618}", "face blowing a kiss"],
  ["\u{1F617}", "kissing face"],
  ["\u263A\uFE0F", "smiling face"],
  ["\u{1F61A}", "kissing face with closed eyes"],
  ["\u{1F619}", "kissing face with smiling eyes"],
  ["\u{1F972}", "smiling face with tear"],
  ["\u{1F60B}", "face savoring food"],
  ["\u{1F61B}", "face with tongue"],
  ["\u{1F61C}", "winking face with tongue"],
  ["\u{1F92A}", "zany face"],
  ["\u{1F61D}", "squinting face with tongue"],
  ["\u{1F911}", "money-mouth face"],
  ["\u{1F917}", "smiling face with open hands"],
  ["\u{1F92D}", "face with hand over mouth"],
  ["\u{1FAE2}", "face with open eyes and hand over mouth"],
  ["\u{1FAE3}", "face with peeking eye"],
  ["\u{1F92B}", "shushing face"],
  ["\u{1F914}", "thinking face"],
  ["\u{1FAE1}", "saluting face"],
  ["\u{1F910}", "zipper-mouth face"],
  ["\u{1F928}", "face with raised eyebrow"],
  ["\u{1F610}", "neutral face"],
  ["\u{1F611}", "expressionless face"],
  ["\u{1F636}", "face without mouth"],
  ["\u{1FAE5}", "dotted line face"],
  ["\u{1F636}\u200D\u{1F32B}\uFE0F", "face in clouds"],
  ["\u{1F60F}", "smirking face"],
  ["\u{1F612}", "unamused face"],
  ["\u{1F644}", "face with rolling eyes"],
  ["\u{1F62C}", "grimacing face"],
  ["\u{1F62E}\u200D\u{1F4A8}", "face exhaling"],
  ["\u{1F925}", "lying face"],
  ["\u{1FAE8}", "shaking face"],
  ["\u{1F642}\u200D\u2194\uFE0F", "head shaking horizontally"],
  ["\u{1F642}\u200D\u2195\uFE0F", "head shaking vertically"],
  ["\u{1F60C}", "relieved face"],
  ["\u{1F614}", "pensive face"],
  ["\u{1F62A}", "sleepy face"],
  ["\u{1F924}", "drooling face"],
  ["\u{1F634}", "sleeping face"],
  ["\u{1F637}", "face with medical mask"],
  ["\u{1F912}", "face with thermometer"],
  ["\u{1F915}", "face with head-bandage"],
  ["\u{1F922}", "nauseated face"],
  ["\u{1F92E}", "face vomiting"],
  ["\u{1F927}", "sneezing face"],
  ["\u{1F975}", "hot face"],
  ["\u{1F976}", "cold face"],
  ["\u{1F974}", "woozy face"],
  ["\u{1F635}", "face with crossed-out eyes"],
  ["\u{1F635}\u200D\u{1F4AB}", "face with spiral eyes"],
  ["\u{1F92F}", "exploding head"],
  ["\u{1F920}", "cowboy hat face"],
  ["\u{1F973}", "partying face"],
  ["\u{1F978}", "disguised face"],
  ["\u{1F60E}", "smiling face with sunglasses"],
  ["\u{1F913}", "nerd face"],
  ["\u{1F9D0}", "face with monocle"],
  ["\u{1F615}", "confused face"],
  ["\u{1FAE4}", "face with diagonal mouth"],
  ["\u{1F61F}", "worried face"],
  ["\u{1F641}", "slightly frowning face"],
  ["\u2639\uFE0F", "frowning face"],
  ["\u{1F62E}", "face with open mouth"],
  ["\u{1F62F}", "hushed face"],
  ["\u{1F632}", "astonished face"],
  ["\u{1F633}", "flushed face"],
  ["\u{1F97A}", "pleading face"],
  ["\u{1F979}", "face holding back tears"],
  ["\u{1F626}", "frowning face with open mouth"],
  ["\u{1F627}", "anguished face"],
  ["\u{1F628}", "fearful face"],
  ["\u{1F630}", "anxious face with sweat"],
  ["\u{1F625}", "sad but relieved face"],
  ["\u{1F622}", "crying face"],
  ["\u{1F62D}", "loudly crying face"],
  ["\u{1F631}", "face screaming in fear"],
  ["\u{1F616}", "confounded face"],
  ["\u{1F623}", "persevering face"],
  ["\u{1F61E}", "disappointed face"],
  ["\u{1F613}", "downcast face with sweat"],
  ["\u{1F629}", "weary face"],
  ["\u{1F62B}", "tired face"],
  ["\u{1F971}", "yawning face"],
  ["\u{1F624}", "face with steam from nose"],
  ["\u{1F621}", "enraged face"],
  ["\u{1F620}", "angry face"],
  ["\u{1F92C}", "face with symbols on mouth"],
  ["\u{1F608}", "smiling face with horns"],
  ["\u{1F47F}", "angry face with horns"],
  ["\u{1F480}", "skull"],
  ["\u2620\uFE0F", "skull and crossbones"],
  ["\u{1F4A9}", "pile of poo"],
  ["\u{1F921}", "clown face"],
  ["\u{1F479}", "ogre"],
  ["\u{1F47A}", "goblin"],
  ["\u{1F47B}", "ghost"],
  ["\u{1F47D}", "alien"],
  ["\u{1F47E}", "alien monster"],
  ["\u{1F916}", "robot"],
  ["\u{1F63A}", "grinning cat"],
  ["\u{1F638}", "grinning cat with smiling eyes"],
  ["\u{1F639}", "cat with tears of joy"],
  ["\u{1F63B}", "smiling cat with heart-eyes"],
  ["\u{1F63C}", "cat with wry smile"],
  ["\u{1F63D}", "kissing cat"],
  ["\u{1F640}", "weary cat"],
  ["\u{1F63F}", "crying cat"],
  ["\u{1F63E}", "pouting cat"],
  ["\u{1F648}", "see-no-evil monkey"],
  ["\u{1F649}", "hear-no-evil monkey"],
  ["\u{1F64A}", "speak-no-evil monkey"],
  ["\u{1F48C}", "love letter"],
  ["\u{1F498}", "heart with arrow"],
  ["\u{1F49D}", "heart with ribbon"],
  ["\u{1F496}", "sparkling heart"],
  ["\u{1F497}", "growing heart"],
  ["\u{1F493}", "beating heart"],
  ["\u{1F49E}", "revolving hearts"],
  ["\u{1F495}", "two hearts"],
  ["\u{1F49F}", "heart decoration"],
  ["\u2763\uFE0F", "heart exclamation"],
  ["\u{1F494}", "broken heart"],
  ["\u2764\uFE0F\u200D\u{1F525}", "heart on fire"],
  ["\u2764\uFE0F\u200D\u{1FA79}", "mending heart"],
  ["\u2764\uFE0F", "red heart"],
  ["\u{1FA77}", "pink heart"],
  ["\u{1F9E1}", "orange heart"],
  ["\u{1F49B}", "yellow heart"],
  ["\u{1F49A}", "green heart"],
  ["\u{1F499}", "blue heart"],
  ["\u{1FA75}", "light blue heart"],
  ["\u{1F49C}", "purple heart"],
  ["\u{1F90E}", "brown heart"],
  ["\u{1F5A4}", "black heart"],
  ["\u{1FA76}", "grey heart"],
  ["\u{1F90D}", "white heart"],
  ["\u{1F48B}", "kiss mark"],
  ["\u{1F4AF}", "hundred points"],
  ["\u{1F4A2}", "anger symbol"],
  ["\u{1F4A5}", "collision"],
  ["\u{1F4AB}", "dizzy"],
  ["\u{1F4A6}", "sweat droplets"],
  ["\u{1F4A8}", "dashing away"],
  ["\u{1F573}\uFE0F", "hole"],
  ["\u{1F4AC}", "speech balloon"],
  ["\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F", "eye in speech bubble"],
  ["\u{1F5E8}\uFE0F", "left speech bubble"],
  ["\u{1F5EF}\uFE0F", "right anger bubble"],
  ["\u{1F4AD}", "thought balloon"],
  ["\u{1F4A4}", "ZZZ"],
  ["\u{1F44B}", "waving hand"],
  ["\u{1F91A}", "raised back of hand"],
  ["\u{1F590}\uFE0F", "hand with fingers splayed"],
  ["\u270B", "raised hand"],
  ["\u{1F596}", "vulcan salute"],
  ["\u{1FAF1}", "rightwards hand"],
  ["\u{1FAF2}", "leftwards hand"],
  ["\u{1FAF3}", "palm down hand"],
  ["\u{1FAF4}", "palm up hand"],
  ["\u{1FAF7}", "leftwards pushing hand"],
  ["\u{1FAF8}", "rightwards pushing hand"],
  ["\u{1F44C}", "OK hand"],
  ["\u{1F90C}", "pinched fingers"],
  ["\u{1F90F}", "pinching hand"],
  ["\u270C\uFE0F", "victory hand"],
  ["\u{1F91E}", "crossed fingers"],
  ["\u{1FAF0}", "hand with index finger and thumb crossed"],
  ["\u{1F91F}", "love-you gesture"],
  ["\u{1F918}", "sign of the horns"],
  ["\u{1F919}", "call me hand"],
  ["\u{1F448}", "backhand index pointing left"],
  ["\u{1F449}", "backhand index pointing right"],
  ["\u{1F446}", "backhand index pointing up"],
  ["\u{1F595}", "middle finger"],
  ["\u{1F447}", "backhand index pointing down"],
  ["\u261D\uFE0F", "index pointing up"],
  ["\u{1FAF5}", "index pointing at the viewer"],
  ["\u{1F44D}", "thumbs up"],
  ["\u{1F44E}", "thumbs down"],
  ["\u270A", "raised fist"],
  ["\u{1F44A}", "oncoming fist"],
  ["\u{1F91B}", "left-facing fist"],
  ["\u{1F91C}", "right-facing fist"],
  ["\u{1F44F}", "clapping hands"],
  ["\u{1F64C}", "raising hands"],
  ["\u{1FAF6}", "heart hands"],
  ["\u{1F450}", "open hands"],
  ["\u{1F932}", "palms up together"],
  ["\u{1F91D}", "handshake"],
  ["\u{1F64F}", "folded hands"],
  ["\u270D\uFE0F", "writing hand"],
  ["\u{1F485}", "nail polish"],
  ["\u{1F933}", "selfie"],
  ["\u{1F4AA}", "flexed biceps"],
  ["\u{1F9BE}", "mechanical arm"],
  ["\u{1F9BF}", "mechanical leg"],
  ["\u{1F9B5}", "leg"],
  ["\u{1F9B6}", "foot"],
  ["\u{1F442}", "ear"],
  ["\u{1F9BB}", "ear with hearing aid"],
  ["\u{1F443}", "nose"],
  ["\u{1F9E0}", "brain"],
  ["\u{1FAC0}", "anatomical heart"],
  ["\u{1FAC1}", "lungs"],
  ["\u{1F9B7}", "tooth"],
  ["\u{1F9B4}", "bone"],
  ["\u{1F440}", "eyes"],
  ["\u{1F441}\uFE0F", "eye"],
  ["\u{1F445}", "tongue"],
  ["\u{1F444}", "mouth"],
  ["\u{1FAE6}", "biting lip"],
  ["\u{1F476}", "baby"],
  ["\u{1F9D2}", "child"],
  ["\u{1F466}", "boy"],
  ["\u{1F467}", "girl"],
  ["\u{1F9D1}", "person"],
  ["\u{1F471}", "person: blond hair"],
  ["\u{1F468}", "man"],
  ["\u{1F9D4}", "person: beard"],
  ["\u{1F9D4}\u200D\u2642\uFE0F", "man: beard"],
  ["\u{1F9D4}\u200D\u2640\uFE0F", "woman: beard"],
  ["\u{1F468}\u200D\u{1F9B0}", "man: red hair"],
  ["\u{1F468}\u200D\u{1F9B1}", "man: curly hair"],
  ["\u{1F468}\u200D\u{1F9B3}", "man: white hair"],
  ["\u{1F468}\u200D\u{1F9B2}", "man: bald"],
  ["\u{1F469}", "woman"],
  ["\u{1F469}\u200D\u{1F9B0}", "woman: red hair"],
  ["\u{1F9D1}\u200D\u{1F9B0}", "person: red hair"],
  ["\u{1F469}\u200D\u{1F9B1}", "woman: curly hair"],
  ["\u{1F9D1}\u200D\u{1F9B1}", "person: curly hair"],
  ["\u{1F469}\u200D\u{1F9B3}", "woman: white hair"],
  ["\u{1F9D1}\u200D\u{1F9B3}", "person: white hair"],
  ["\u{1F469}\u200D\u{1F9B2}", "woman: bald"],
  ["\u{1F9D1}\u200D\u{1F9B2}", "person: bald"],
  ["\u{1F471}\u200D\u2640\uFE0F", "woman: blond hair"],
  ["\u{1F471}\u200D\u2642\uFE0F", "man: blond hair"],
  ["\u{1F9D3}", "older person"],
  ["\u{1F474}", "old man"],
  ["\u{1F475}", "old woman"],
  ["\u{1F64D}", "person frowning"],
  ["\u{1F64D}\u200D\u2642\uFE0F", "man frowning"],
  ["\u{1F64D}\u200D\u2640\uFE0F", "woman frowning"],
  ["\u{1F64E}", "person pouting"],
  ["\u{1F64E}\u200D\u2642\uFE0F", "man pouting"],
  ["\u{1F64E}\u200D\u2640\uFE0F", "woman pouting"],
  ["\u{1F645}", "person gesturing NO"],
  ["\u{1F645}\u200D\u2642\uFE0F", "man gesturing NO"],
  ["\u{1F645}\u200D\u2640\uFE0F", "woman gesturing NO"],
  ["\u{1F646}", "person gesturing OK"],
  ["\u{1F646}\u200D\u2642\uFE0F", "man gesturing OK"],
  ["\u{1F646}\u200D\u2640\uFE0F", "woman gesturing OK"],
  ["\u{1F481}", "person tipping hand"],
  ["\u{1F481}\u200D\u2642\uFE0F", "man tipping hand"],
  ["\u{1F481}\u200D\u2640\uFE0F", "woman tipping hand"],
  ["\u{1F64B}", "person raising hand"],
  ["\u{1F64B}\u200D\u2642\uFE0F", "man raising hand"],
  ["\u{1F64B}\u200D\u2640\uFE0F", "woman raising hand"],
  ["\u{1F9CF}", "deaf person"],
  ["\u{1F9CF}\u200D\u2642\uFE0F", "deaf man"],
  ["\u{1F9CF}\u200D\u2640\uFE0F", "deaf woman"],
  ["\u{1F647}", "person bowing"],
  ["\u{1F647}\u200D\u2642\uFE0F", "man bowing"],
  ["\u{1F647}\u200D\u2640\uFE0F", "woman bowing"],
  ["\u{1F926}", "person facepalming"],
  ["\u{1F926}\u200D\u2642\uFE0F", "man facepalming"],
  ["\u{1F926}\u200D\u2640\uFE0F", "woman facepalming"],
  ["\u{1F937}", "person shrugging"],
  ["\u{1F937}\u200D\u2642\uFE0F", "man shrugging"],
  ["\u{1F937}\u200D\u2640\uFE0F", "woman shrugging"],
  ["\u{1F9D1}\u200D\u2695\uFE0F", "health worker"],
  ["\u{1F468}\u200D\u2695\uFE0F", "man health worker"],
  ["\u{1F469}\u200D\u2695\uFE0F", "woman health worker"],
  ["\u{1F9D1}\u200D\u{1F393}", "student"],
  ["\u{1F468}\u200D\u{1F393}", "man student"],
  ["\u{1F469}\u200D\u{1F393}", "woman student"],
  ["\u{1F9D1}\u200D\u{1F3EB}", "teacher"],
  ["\u{1F468}\u200D\u{1F3EB}", "man teacher"],
  ["\u{1F469}\u200D\u{1F3EB}", "woman teacher"],
  ["\u{1F9D1}\u200D\u2696\uFE0F", "judge"],
  ["\u{1F468}\u200D\u2696\uFE0F", "man judge"],
  ["\u{1F469}\u200D\u2696\uFE0F", "woman judge"],
  ["\u{1F9D1}\u200D\u{1F33E}", "farmer"],
  ["\u{1F468}\u200D\u{1F33E}", "man farmer"],
  ["\u{1F469}\u200D\u{1F33E}", "woman farmer"],
  ["\u{1F9D1}\u200D\u{1F373}", "cook"],
  ["\u{1F468}\u200D\u{1F373}", "man cook"],
  ["\u{1F469}\u200D\u{1F373}", "woman cook"],
  ["\u{1F9D1}\u200D\u{1F527}", "mechanic"],
  ["\u{1F468}\u200D\u{1F527}", "man mechanic"],
  ["\u{1F469}\u200D\u{1F527}", "woman mechanic"],
  ["\u{1F9D1}\u200D\u{1F3ED}", "factory worker"],
  ["\u{1F468}\u200D\u{1F3ED}", "man factory worker"],
  ["\u{1F469}\u200D\u{1F3ED}", "woman factory worker"],
  ["\u{1F9D1}\u200D\u{1F4BC}", "office worker"],
  ["\u{1F468}\u200D\u{1F4BC}", "man office worker"],
  ["\u{1F469}\u200D\u{1F4BC}", "woman office worker"],
  ["\u{1F9D1}\u200D\u{1F52C}", "scientist"],
  ["\u{1F468}\u200D\u{1F52C}", "man scientist"],
  ["\u{1F469}\u200D\u{1F52C}", "woman scientist"],
  ["\u{1F9D1}\u200D\u{1F4BB}", "technologist"],
  ["\u{1F468}\u200D\u{1F4BB}", "man technologist"],
  ["\u{1F469}\u200D\u{1F4BB}", "woman technologist"],
  ["\u{1F9D1}\u200D\u{1F3A4}", "singer"],
  ["\u{1F468}\u200D\u{1F3A4}", "man singer"],
  ["\u{1F469}\u200D\u{1F3A4}", "woman singer"],
  ["\u{1F9D1}\u200D\u{1F3A8}", "artist"],
  ["\u{1F468}\u200D\u{1F3A8}", "man artist"],
  ["\u{1F469}\u200D\u{1F3A8}", "woman artist"],
  ["\u{1F9D1}\u200D\u2708\uFE0F", "pilot"],
  ["\u{1F468}\u200D\u2708\uFE0F", "man pilot"],
  ["\u{1F469}\u200D\u2708\uFE0F", "woman pilot"],
  ["\u{1F9D1}\u200D\u{1F680}", "astronaut"],
  ["\u{1F468}\u200D\u{1F680}", "man astronaut"],
  ["\u{1F469}\u200D\u{1F680}", "woman astronaut"],
  ["\u{1F9D1}\u200D\u{1F692}", "firefighter"],
  ["\u{1F468}\u200D\u{1F692}", "man firefighter"],
  ["\u{1F469}\u200D\u{1F692}", "woman firefighter"],
  ["\u{1F46E}", "police officer"],
  ["\u{1F46E}\u200D\u2642\uFE0F", "man police officer"],
  ["\u{1F46E}\u200D\u2640\uFE0F", "woman police officer"],
  ["\u{1F575}\uFE0F", "detective"],
  ["\u{1F575}\uFE0F\u200D\u2642\uFE0F", "man detective"],
  ["\u{1F575}\uFE0F\u200D\u2640\uFE0F", "woman detective"],
  ["\u{1F482}", "guard"],
  ["\u{1F482}\u200D\u2642\uFE0F", "man guard"],
  ["\u{1F482}\u200D\u2640\uFE0F", "woman guard"],
  ["\u{1F977}", "ninja"],
  ["\u{1F477}", "construction worker"],
  ["\u{1F477}\u200D\u2642\uFE0F", "man construction worker"],
  ["\u{1F477}\u200D\u2640\uFE0F", "woman construction worker"],
  ["\u{1FAC5}", "person with crown"],
  ["\u{1F934}", "prince"],
  ["\u{1F478}", "princess"],
  ["\u{1F473}", "person wearing turban"],
  ["\u{1F473}\u200D\u2642\uFE0F", "man wearing turban"],
  ["\u{1F473}\u200D\u2640\uFE0F", "woman wearing turban"],
  ["\u{1F472}", "person with skullcap"],
  ["\u{1F9D5}", "woman with headscarf"],
  ["\u{1F935}", "person in tuxedo"],
  ["\u{1F935}\u200D\u2642\uFE0F", "man in tuxedo"],
  ["\u{1F935}\u200D\u2640\uFE0F", "woman in tuxedo"],
  ["\u{1F470}", "person with veil"],
  ["\u{1F470}\u200D\u2642\uFE0F", "man with veil"],
  ["\u{1F470}\u200D\u2640\uFE0F", "woman with veil"],
  ["\u{1F930}", "pregnant woman"],
  ["\u{1FAC3}", "pregnant man"],
  ["\u{1FAC4}", "pregnant person"],
  ["\u{1F931}", "breast-feeding"],
  ["\u{1F469}\u200D\u{1F37C}", "woman feeding baby"],
  ["\u{1F468}\u200D\u{1F37C}", "man feeding baby"],
  ["\u{1F9D1}\u200D\u{1F37C}", "person feeding baby"],
  ["\u{1F47C}", "baby angel"],
  ["\u{1F385}", "Santa Claus"],
  ["\u{1F936}", "Mrs. Claus"],
  ["\u{1F9D1}\u200D\u{1F384}", "mx claus"],
  ["\u{1F9B8}", "superhero"],
  ["\u{1F9B8}\u200D\u2642\uFE0F", "man superhero"],
  ["\u{1F9B8}\u200D\u2640\uFE0F", "woman superhero"],
  ["\u{1F9B9}", "supervillain"],
  ["\u{1F9B9}\u200D\u2642\uFE0F", "man supervillain"],
  ["\u{1F9B9}\u200D\u2640\uFE0F", "woman supervillain"],
  ["\u{1F9D9}", "mage"],
  ["\u{1F9D9}\u200D\u2642\uFE0F", "man mage"],
  ["\u{1F9D9}\u200D\u2640\uFE0F", "woman mage"],
  ["\u{1F9DA}", "fairy"],
  ["\u{1F9DA}\u200D\u2642\uFE0F", "man fairy"],
  ["\u{1F9DA}\u200D\u2640\uFE0F", "woman fairy"],
  ["\u{1F9DB}", "vampire"],
  ["\u{1F9DB}\u200D\u2642\uFE0F", "man vampire"],
  ["\u{1F9DB}\u200D\u2640\uFE0F", "woman vampire"],
  ["\u{1F9DC}", "merperson"],
  ["\u{1F9DC}\u200D\u2642\uFE0F", "merman"],
  ["\u{1F9DC}\u200D\u2640\uFE0F", "mermaid"],
  ["\u{1F9DD}", "elf"],
  ["\u{1F9DD}\u200D\u2642\uFE0F", "man elf"],
  ["\u{1F9DD}\u200D\u2640\uFE0F", "woman elf"],
  ["\u{1F9DE}", "genie"],
  ["\u{1F9DE}\u200D\u2642\uFE0F", "man genie"],
  ["\u{1F9DE}\u200D\u2640\uFE0F", "woman genie"],
  ["\u{1F9DF}", "zombie"],
  ["\u{1F9DF}\u200D\u2642\uFE0F", "man zombie"],
  ["\u{1F9DF}\u200D\u2640\uFE0F", "woman zombie"],
  ["\u{1F9CC}", "troll"],
  ["\u{1F486}", "person getting massage"],
  ["\u{1F486}\u200D\u2642\uFE0F", "man getting massage"],
  ["\u{1F486}\u200D\u2640\uFE0F", "woman getting massage"],
  ["\u{1F487}", "person getting haircut"],
  ["\u{1F487}\u200D\u2642\uFE0F", "man getting haircut"],
  ["\u{1F487}\u200D\u2640\uFE0F", "woman getting haircut"],
  ["\u{1F6B6}", "person walking"],
  ["\u{1F6B6}\u200D\u2642\uFE0F", "man walking"],
  ["\u{1F6B6}\u200D\u2640\uFE0F", "woman walking"],
  ["\u{1F6B6}\u200D\u27A1\uFE0F", "person walking facing right"],
  ["\u{1F6B6}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F", "woman walking facing right"],
  ["\u{1F6B6}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F", "man walking facing right"],
  ["\u{1F9CD}", "person standing"],
  ["\u{1F9CD}\u200D\u2642\uFE0F", "man standing"],
  ["\u{1F9CD}\u200D\u2640\uFE0F", "woman standing"],
  ["\u{1F9CE}", "person kneeling"],
  ["\u{1F9CE}\u200D\u2642\uFE0F", "man kneeling"],
  ["\u{1F9CE}\u200D\u2640\uFE0F", "woman kneeling"],
  ["\u{1F9CE}\u200D\u27A1\uFE0F", "person kneeling facing right"],
  ["\u{1F9CE}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F", "woman kneeling facing right"],
  ["\u{1F9CE}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F", "man kneeling facing right"],
  ["\u{1F9D1}\u200D\u{1F9AF}", "person with white cane"],
  ["\u{1F9D1}\u200D\u{1F9AF}\u200D\u27A1\uFE0F", "person with white cane facing right"],
  ["\u{1F468}\u200D\u{1F9AF}", "man with white cane"],
  ["\u{1F468}\u200D\u{1F9AF}\u200D\u27A1\uFE0F", "man with white cane facing right"],
  ["\u{1F469}\u200D\u{1F9AF}", "woman with white cane"],
  ["\u{1F469}\u200D\u{1F9AF}\u200D\u27A1\uFE0F", "woman with white cane facing right"],
  ["\u{1F9D1}\u200D\u{1F9BC}", "person in motorized wheelchair"],
  ["\u{1F9D1}\u200D\u{1F9BC}\u200D\u27A1\uFE0F", "person in motorized wheelchair facing right"],
  ["\u{1F468}\u200D\u{1F9BC}", "man in motorized wheelchair"],
  ["\u{1F468}\u200D\u{1F9BC}\u200D\u27A1\uFE0F", "man in motorized wheelchair facing right"],
  ["\u{1F469}\u200D\u{1F9BC}", "woman in motorized wheelchair"],
  ["\u{1F469}\u200D\u{1F9BC}\u200D\u27A1\uFE0F", "woman in motorized wheelchair facing right"],
  ["\u{1F9D1}\u200D\u{1F9BD}", "person in manual wheelchair"],
  ["\u{1F9D1}\u200D\u{1F9BD}\u200D\u27A1\uFE0F", "person in manual wheelchair facing right"],
  ["\u{1F468}\u200D\u{1F9BD}", "man in manual wheelchair"],
  ["\u{1F468}\u200D\u{1F9BD}\u200D\u27A1\uFE0F", "man in manual wheelchair facing right"],
  ["\u{1F469}\u200D\u{1F9BD}", "woman in manual wheelchair"],
  ["\u{1F469}\u200D\u{1F9BD}\u200D\u27A1\uFE0F", "woman in manual wheelchair facing right"],
  ["\u{1F3C3}", "person running"],
  ["\u{1F3C3}\u200D\u2642\uFE0F", "man running"],
  ["\u{1F3C3}\u200D\u2640\uFE0F", "woman running"],
  ["\u{1F3C3}\u200D\u27A1\uFE0F", "person running facing right"],
  ["\u{1F3C3}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F", "woman running facing right"],
  ["\u{1F3C3}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F", "man running facing right"],
  ["\u{1F483}", "woman dancing"],
  ["\u{1F57A}", "man dancing"],
  ["\u{1F574}\uFE0F", "person in suit levitating"],
  ["\u{1F46F}", "people with bunny ears"],
  ["\u{1F46F}\u200D\u2642\uFE0F", "men with bunny ears"],
  ["\u{1F46F}\u200D\u2640\uFE0F", "women with bunny ears"],
  ["\u{1F9D6}", "person in steamy room"],
  ["\u{1F9D6}\u200D\u2642\uFE0F", "man in steamy room"],
  ["\u{1F9D6}\u200D\u2640\uFE0F", "woman in steamy room"],
  ["\u{1F9D7}", "person climbing"],
  ["\u{1F9D7}\u200D\u2642\uFE0F", "man climbing"],
  ["\u{1F9D7}\u200D\u2640\uFE0F", "woman climbing"],
  ["\u{1F93A}", "person fencing"],
  ["\u{1F3C7}", "horse racing"],
  ["\u26F7\uFE0F", "skier"],
  ["\u{1F3C2}", "snowboarder"],
  ["\u{1F3CC}\uFE0F", "person golfing"],
  ["\u{1F3CC}\uFE0F\u200D\u2642\uFE0F", "man golfing"],
  ["\u{1F3CC}\uFE0F\u200D\u2640\uFE0F", "woman golfing"],
  ["\u{1F3C4}", "person surfing"],
  ["\u{1F3C4}\u200D\u2642\uFE0F", "man surfing"],
  ["\u{1F3C4}\u200D\u2640\uFE0F", "woman surfing"],
  ["\u{1F6A3}", "person rowing boat"],
  ["\u{1F6A3}\u200D\u2642\uFE0F", "man rowing boat"],
  ["\u{1F6A3}\u200D\u2640\uFE0F", "woman rowing boat"],
  ["\u{1F3CA}", "person swimming"],
  ["\u{1F3CA}\u200D\u2642\uFE0F", "man swimming"],
  ["\u{1F3CA}\u200D\u2640\uFE0F", "woman swimming"],
  ["\u26F9\uFE0F", "person bouncing ball"],
  ["\u26F9\uFE0F\u200D\u2642\uFE0F", "man bouncing ball"],
  ["\u26F9\uFE0F\u200D\u2640\uFE0F", "woman bouncing ball"],
  ["\u{1F3CB}\uFE0F", "person lifting weights"],
  ["\u{1F3CB}\uFE0F\u200D\u2642\uFE0F", "man lifting weights"],
  ["\u{1F3CB}\uFE0F\u200D\u2640\uFE0F", "woman lifting weights"],
  ["\u{1F6B4}", "person biking"],
  ["\u{1F6B4}\u200D\u2642\uFE0F", "man biking"],
  ["\u{1F6B4}\u200D\u2640\uFE0F", "woman biking"],
  ["\u{1F6B5}", "person mountain biking"],
  ["\u{1F6B5}\u200D\u2642\uFE0F", "man mountain biking"],
  ["\u{1F6B5}\u200D\u2640\uFE0F", "woman mountain biking"],
  ["\u{1F938}", "person cartwheeling"],
  ["\u{1F938}\u200D\u2642\uFE0F", "man cartwheeling"],
  ["\u{1F938}\u200D\u2640\uFE0F", "woman cartwheeling"],
  ["\u{1F93C}", "people wrestling"],
  ["\u{1F93C}\u200D\u2642\uFE0F", "men wrestling"],
  ["\u{1F93C}\u200D\u2640\uFE0F", "women wrestling"],
  ["\u{1F93D}", "person playing water polo"],
  ["\u{1F93D}\u200D\u2642\uFE0F", "man playing water polo"],
  ["\u{1F93D}\u200D\u2640\uFE0F", "woman playing water polo"],
  ["\u{1F93E}", "person playing handball"],
  ["\u{1F93E}\u200D\u2642\uFE0F", "man playing handball"],
  ["\u{1F93E}\u200D\u2640\uFE0F", "woman playing handball"],
  ["\u{1F939}", "person juggling"],
  ["\u{1F939}\u200D\u2642\uFE0F", "man juggling"],
  ["\u{1F939}\u200D\u2640\uFE0F", "woman juggling"],
  ["\u{1F9D8}", "person in lotus position"],
  ["\u{1F9D8}\u200D\u2642\uFE0F", "man in lotus position"],
  ["\u{1F9D8}\u200D\u2640\uFE0F", "woman in lotus position"],
  ["\u{1F6C0}", "person taking bath"],
  ["\u{1F6CC}", "person in bed"],
  ["\u{1F9D1}\u200D\u{1F91D}\u200D\u{1F9D1}", "people holding hands"],
  ["\u{1F46D}", "women holding hands"],
  ["\u{1F46B}", "woman and man holding hands"],
  ["\u{1F46C}", "men holding hands"],
  ["\u{1F48F}", "kiss"],
  ["\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}", "kiss: woman, man"],
  ["\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}", "kiss: man, man"],
  ["\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}", "kiss: woman, woman"],
  ["\u{1F491}", "couple with heart"],
  ["\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F468}", "couple with heart: woman, man"],
  ["\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F468}", "couple with heart: man, man"],
  ["\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F469}", "couple with heart: woman, woman"],
  ["\u{1F468}\u200D\u{1F469}\u200D\u{1F466}", "family: man, woman, boy"],
  ["\u{1F468}\u200D\u{1F469}\u200D\u{1F467}", "family: man, woman, girl"],
  ["\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}", "family: man, woman, girl, boy"],
  ["\u{1F468}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}", "family: man, woman, boy, boy"],
  ["\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}", "family: man, woman, girl, girl"],
  ["\u{1F468}\u200D\u{1F468}\u200D\u{1F466}", "family: man, man, boy"],
  ["\u{1F468}\u200D\u{1F468}\u200D\u{1F467}", "family: man, man, girl"],
  ["\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F466}", "family: man, man, girl, boy"],
  ["\u{1F468}\u200D\u{1F468}\u200D\u{1F466}\u200D\u{1F466}", "family: man, man, boy, boy"],
  ["\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F467}", "family: man, man, girl, girl"],
  ["\u{1F469}\u200D\u{1F469}\u200D\u{1F466}", "family: woman, woman, boy"],
  ["\u{1F469}\u200D\u{1F469}\u200D\u{1F467}", "family: woman, woman, girl"],
  ["\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}", "family: woman, woman, girl, boy"],
  ["\u{1F469}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}", "family: woman, woman, boy, boy"],
  ["\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}", "family: woman, woman, girl, girl"],
  ["\u{1F468}\u200D\u{1F466}", "family: man, boy"],
  ["\u{1F468}\u200D\u{1F466}\u200D\u{1F466}", "family: man, boy, boy"],
  ["\u{1F468}\u200D\u{1F467}", "family: man, girl"],
  ["\u{1F468}\u200D\u{1F467}\u200D\u{1F466}", "family: man, girl, boy"],
  ["\u{1F468}\u200D\u{1F467}\u200D\u{1F467}", "family: man, girl, girl"],
  ["\u{1F469}\u200D\u{1F466}", "family: woman, boy"],
  ["\u{1F469}\u200D\u{1F466}\u200D\u{1F466}", "family: woman, boy, boy"],
  ["\u{1F469}\u200D\u{1F467}", "family: woman, girl"],
  ["\u{1F469}\u200D\u{1F467}\u200D\u{1F466}", "family: woman, girl, boy"],
  ["\u{1F469}\u200D\u{1F467}\u200D\u{1F467}", "family: woman, girl, girl"],
  ["\u{1F5E3}\uFE0F", "speaking head"],
  ["\u{1F464}", "bust in silhouette"],
  ["\u{1F465}", "busts in silhouette"],
  ["\u{1FAC2}", "people hugging"],
  ["\u{1F46A}", "family"],
  ["\u{1F9D1}\u200D\u{1F9D1}\u200D\u{1F9D2}", "family: adult, adult, child"],
  ["\u{1F9D1}\u200D\u{1F9D1}\u200D\u{1F9D2}\u200D\u{1F9D2}", "family: adult, adult, child, child"],
  ["\u{1F9D1}\u200D\u{1F9D2}", "family: adult, child"],
  ["\u{1F9D1}\u200D\u{1F9D2}\u200D\u{1F9D2}", "family: adult, child, child"],
  ["\u{1F463}", "footprints"],
  ["\u{1F3FB}", "light skin tone"],
  // component
  ["\u{1F3FC}", "medium-light skin tone"],
  // component
  ["\u{1F3FD}", "medium skin tone"],
  // component
  ["\u{1F3FE}", "medium-dark skin tone"],
  // component
  ["\u{1F3FF}", "dark skin tone"],
  // component
  ["\u{1F9B0}", "red hair"],
  // component
  ["\u{1F9B1}", "curly hair"],
  // component
  ["\u{1F9B3}", "white hair"],
  // component
  ["\u{1F9B2}", "bald"],
  // component
  ["\u{1F435}", "monkey face"],
  ["\u{1F412}", "monkey"],
  ["\u{1F98D}", "gorilla"],
  ["\u{1F9A7}", "orangutan"],
  ["\u{1F436}", "dog face"],
  ["\u{1F415}", "dog"],
  ["\u{1F9AE}", "guide dog"],
  ["\u{1F415}\u200D\u{1F9BA}", "service dog"],
  ["\u{1F429}", "poodle"],
  ["\u{1F43A}", "wolf"],
  ["\u{1F98A}", "fox"],
  ["\u{1F99D}", "raccoon"],
  ["\u{1F431}", "cat face"],
  ["\u{1F408}", "cat"],
  ["\u{1F408}\u200D\u2B1B", "black cat"],
  ["\u{1F981}", "lion"],
  ["\u{1F42F}", "tiger face"],
  ["\u{1F405}", "tiger"],
  ["\u{1F406}", "leopard"],
  ["\u{1F434}", "horse face"],
  ["\u{1FACE}", "moose"],
  ["\u{1FACF}", "donkey"],
  ["\u{1F40E}", "horse"],
  ["\u{1F984}", "unicorn"],
  ["\u{1F993}", "zebra"],
  ["\u{1F98C}", "deer"],
  ["\u{1F9AC}", "bison"],
  ["\u{1F42E}", "cow face"],
  ["\u{1F402}", "ox"],
  ["\u{1F403}", "water buffalo"],
  ["\u{1F404}", "cow"],
  ["\u{1F437}", "pig face"],
  ["\u{1F416}", "pig"],
  ["\u{1F417}", "boar"],
  ["\u{1F43D}", "pig nose"],
  ["\u{1F40F}", "ram"],
  ["\u{1F411}", "ewe"],
  ["\u{1F410}", "goat"],
  ["\u{1F42A}", "camel"],
  ["\u{1F42B}", "two-hump camel"],
  ["\u{1F999}", "llama"],
  ["\u{1F992}", "giraffe"],
  ["\u{1F418}", "elephant"],
  ["\u{1F9A3}", "mammoth"],
  ["\u{1F98F}", "rhinoceros"],
  ["\u{1F99B}", "hippopotamus"],
  ["\u{1F42D}", "mouse face"],
  ["\u{1F401}", "mouse"],
  ["\u{1F400}", "rat"],
  ["\u{1F439}", "hamster"],
  ["\u{1F430}", "rabbit face"],
  ["\u{1F407}", "rabbit"],
  ["\u{1F43F}\uFE0F", "chipmunk"],
  ["\u{1F9AB}", "beaver"],
  ["\u{1F994}", "hedgehog"],
  ["\u{1F987}", "bat"],
  ["\u{1F43B}", "bear"],
  ["\u{1F43B}\u200D\u2744\uFE0F", "polar bear"],
  ["\u{1F428}", "koala"],
  ["\u{1F43C}", "panda"],
  ["\u{1F9A5}", "sloth"],
  ["\u{1F9A6}", "otter"],
  ["\u{1F9A8}", "skunk"],
  ["\u{1F998}", "kangaroo"],
  ["\u{1F9A1}", "badger"],
  ["\u{1F43E}", "paw prints"],
  ["\u{1F983}", "turkey"],
  ["\u{1F414}", "chicken"],
  ["\u{1F413}", "rooster"],
  ["\u{1F423}", "hatching chick"],
  ["\u{1F424}", "baby chick"],
  ["\u{1F425}", "front-facing baby chick"],
  ["\u{1F426}", "bird"],
  ["\u{1F427}", "penguin"],
  ["\u{1F54A}\uFE0F", "dove"],
  ["\u{1F985}", "eagle"],
  ["\u{1F986}", "duck"],
  ["\u{1F9A2}", "swan"],
  ["\u{1F989}", "owl"],
  ["\u{1F9A4}", "dodo"],
  ["\u{1FAB6}", "feather"],
  ["\u{1F9A9}", "flamingo"],
  ["\u{1F99A}", "peacock"],
  ["\u{1F99C}", "parrot"],
  ["\u{1FABD}", "wing"],
  ["\u{1F426}\u200D\u2B1B", "black bird"],
  ["\u{1FABF}", "goose"],
  ["\u{1F426}\u200D\u{1F525}", "phoenix"],
  ["\u{1F438}", "frog"],
  ["\u{1F40A}", "crocodile"],
  ["\u{1F422}", "turtle"],
  ["\u{1F98E}", "lizard"],
  ["\u{1F40D}", "snake"],
  ["\u{1F432}", "dragon face"],
  ["\u{1F409}", "dragon"],
  ["\u{1F995}", "sauropod"],
  ["\u{1F996}", "T-Rex"],
  ["\u{1F433}", "spouting whale"],
  ["\u{1F40B}", "whale"],
  ["\u{1F42C}", "dolphin"],
  ["\u{1F9AD}", "seal"],
  ["\u{1F41F}", "fish"],
  ["\u{1F420}", "tropical fish"],
  ["\u{1F421}", "blowfish"],
  ["\u{1F988}", "shark"],
  ["\u{1F419}", "octopus"],
  ["\u{1F41A}", "spiral shell"],
  ["\u{1FAB8}", "coral"],
  ["\u{1FABC}", "jellyfish"],
  ["\u{1F40C}", "snail"],
  ["\u{1F98B}", "butterfly"],
  ["\u{1F41B}", "bug"],
  ["\u{1F41C}", "ant"],
  ["\u{1F41D}", "honeybee"],
  ["\u{1FAB2}", "beetle"],
  ["\u{1F41E}", "lady beetle"],
  ["\u{1F997}", "cricket"],
  ["\u{1FAB3}", "cockroach"],
  ["\u{1F577}\uFE0F", "spider"],
  ["\u{1F578}\uFE0F", "spider web"],
  ["\u{1F982}", "scorpion"],
  ["\u{1F99F}", "mosquito"],
  ["\u{1FAB0}", "fly"],
  ["\u{1FAB1}", "worm"],
  ["\u{1F9A0}", "microbe"],
  ["\u{1F490}", "bouquet"],
  ["\u{1F338}", "cherry blossom"],
  ["\u{1F4AE}", "white flower"],
  ["\u{1FAB7}", "lotus"],
  ["\u{1F3F5}\uFE0F", "rosette"],
  ["\u{1F339}", "rose"],
  ["\u{1F940}", "wilted flower"],
  ["\u{1F33A}", "hibiscus"],
  ["\u{1F33B}", "sunflower"],
  ["\u{1F33C}", "blossom"],
  ["\u{1F337}", "tulip"],
  ["\u{1FABB}", "hyacinth"],
  ["\u{1F331}", "seedling"],
  ["\u{1FAB4}", "potted plant"],
  ["\u{1F332}", "evergreen tree"],
  ["\u{1F333}", "deciduous tree"],
  ["\u{1F334}", "palm tree"],
  ["\u{1F335}", "cactus"],
  ["\u{1F33E}", "sheaf of rice"],
  ["\u{1F33F}", "herb"],
  ["\u2618\uFE0F", "shamrock"],
  ["\u{1F340}", "four leaf clover"],
  ["\u{1F341}", "maple leaf"],
  ["\u{1F342}", "fallen leaf"],
  ["\u{1F343}", "leaf fluttering in wind"],
  ["\u{1FAB9}", "empty nest"],
  ["\u{1FABA}", "nest with eggs"],
  ["\u{1F344}", "mushroom"],
  ["\u{1F347}", "grapes"],
  ["\u{1F348}", "melon"],
  ["\u{1F349}", "watermelon"],
  ["\u{1F34A}", "tangerine"],
  ["\u{1F34B}", "lemon"],
  ["\u{1F34B}\u200D\u{1F7E9}", "lime"],
  ["\u{1F34C}", "banana"],
  ["\u{1F34D}", "pineapple"],
  ["\u{1F96D}", "mango"],
  ["\u{1F34E}", "red apple"],
  ["\u{1F34F}", "green apple"],
  ["\u{1F350}", "pear"],
  ["\u{1F351}", "peach"],
  ["\u{1F352}", "cherries"],
  ["\u{1F353}", "strawberry"],
  ["\u{1FAD0}", "blueberries"],
  ["\u{1F95D}", "kiwi fruit"],
  ["\u{1F345}", "tomato"],
  ["\u{1FAD2}", "olive"],
  ["\u{1F965}", "coconut"],
  ["\u{1F951}", "avocado"],
  ["\u{1F346}", "eggplant"],
  ["\u{1F954}", "potato"],
  ["\u{1F955}", "carrot"],
  ["\u{1F33D}", "ear of corn"],
  ["\u{1F336}\uFE0F", "hot pepper"],
  ["\u{1FAD1}", "bell pepper"],
  ["\u{1F952}", "cucumber"],
  ["\u{1F96C}", "leafy green"],
  ["\u{1F966}", "broccoli"],
  ["\u{1F9C4}", "garlic"],
  ["\u{1F9C5}", "onion"],
  ["\u{1F95C}", "peanuts"],
  ["\u{1FAD8}", "beans"],
  ["\u{1F330}", "chestnut"],
  ["\u{1FADA}", "ginger root"],
  ["\u{1FADB}", "pea pod"],
  ["\u{1F344}\u200D\u{1F7EB}", "brown mushroom"],
  ["\u{1F35E}", "bread"],
  ["\u{1F950}", "croissant"],
  ["\u{1F956}", "baguette bread"],
  ["\u{1FAD3}", "flatbread"],
  ["\u{1F968}", "pretzel"],
  ["\u{1F96F}", "bagel"],
  ["\u{1F95E}", "pancakes"],
  ["\u{1F9C7}", "waffle"],
  ["\u{1F9C0}", "cheese wedge"],
  ["\u{1F356}", "meat on bone"],
  ["\u{1F357}", "poultry leg"],
  ["\u{1F969}", "cut of meat"],
  ["\u{1F953}", "bacon"],
  ["\u{1F354}", "hamburger"],
  ["\u{1F35F}", "french fries"],
  ["\u{1F355}", "pizza"],
  ["\u{1F32D}", "hot dog"],
  ["\u{1F96A}", "sandwich"],
  ["\u{1F32E}", "taco"],
  ["\u{1F32F}", "burrito"],
  ["\u{1FAD4}", "tamale"],
  ["\u{1F959}", "stuffed flatbread"],
  ["\u{1F9C6}", "falafel"],
  ["\u{1F95A}", "egg"],
  ["\u{1F373}", "cooking"],
  ["\u{1F958}", "shallow pan of food"],
  ["\u{1F372}", "pot of food"],
  ["\u{1FAD5}", "fondue"],
  ["\u{1F963}", "bowl with spoon"],
  ["\u{1F957}", "green salad"],
  ["\u{1F37F}", "popcorn"],
  ["\u{1F9C8}", "butter"],
  ["\u{1F9C2}", "salt"],
  ["\u{1F96B}", "canned food"],
  ["\u{1F371}", "bento box"],
  ["\u{1F358}", "rice cracker"],
  ["\u{1F359}", "rice ball"],
  ["\u{1F35A}", "cooked rice"],
  ["\u{1F35B}", "curry rice"],
  ["\u{1F35C}", "steaming bowl"],
  ["\u{1F35D}", "spaghetti"],
  ["\u{1F360}", "roasted sweet potato"],
  ["\u{1F362}", "oden"],
  ["\u{1F363}", "sushi"],
  ["\u{1F364}", "fried shrimp"],
  ["\u{1F365}", "fish cake with swirl"],
  ["\u{1F96E}", "moon cake"],
  ["\u{1F361}", "dango"],
  ["\u{1F95F}", "dumpling"],
  ["\u{1F960}", "fortune cookie"],
  ["\u{1F961}", "takeout box"],
  ["\u{1F980}", "crab"],
  ["\u{1F99E}", "lobster"],
  ["\u{1F990}", "shrimp"],
  ["\u{1F991}", "squid"],
  ["\u{1F9AA}", "oyster"],
  ["\u{1F366}", "soft ice cream"],
  ["\u{1F367}", "shaved ice"],
  ["\u{1F368}", "ice cream"],
  ["\u{1F369}", "doughnut"],
  ["\u{1F36A}", "cookie"],
  ["\u{1F382}", "birthday cake"],
  ["\u{1F370}", "shortcake"],
  ["\u{1F9C1}", "cupcake"],
  ["\u{1F967}", "pie"],
  ["\u{1F36B}", "chocolate bar"],
  ["\u{1F36C}", "candy"],
  ["\u{1F36D}", "lollipop"],
  ["\u{1F36E}", "custard"],
  ["\u{1F36F}", "honey pot"],
  ["\u{1F37C}", "baby bottle"],
  ["\u{1F95B}", "glass of milk"],
  ["\u2615", "hot beverage"],
  ["\u{1FAD6}", "teapot"],
  ["\u{1F375}", "teacup without handle"],
  ["\u{1F376}", "sake"],
  ["\u{1F37E}", "bottle with popping cork"],
  ["\u{1F377}", "wine glass"],
  ["\u{1F378}", "cocktail glass"],
  ["\u{1F379}", "tropical drink"],
  ["\u{1F37A}", "beer mug"],
  ["\u{1F37B}", "clinking beer mugs"],
  ["\u{1F942}", "clinking glasses"],
  ["\u{1F943}", "tumbler glass"],
  ["\u{1FAD7}", "pouring liquid"],
  ["\u{1F964}", "cup with straw"],
  ["\u{1F9CB}", "bubble tea"],
  ["\u{1F9C3}", "beverage box"],
  ["\u{1F9C9}", "mate"],
  ["\u{1F9CA}", "ice"],
  ["\u{1F962}", "chopsticks"],
  ["\u{1F37D}\uFE0F", "fork and knife with plate"],
  ["\u{1F374}", "fork and knife"],
  ["\u{1F944}", "spoon"],
  ["\u{1F52A}", "kitchen knife"],
  ["\u{1FAD9}", "jar"],
  ["\u{1F3FA}", "amphora"],
  ["\u{1F30D}", "globe showing Europe-Africa"],
  ["\u{1F30E}", "globe showing Americas"],
  ["\u{1F30F}", "globe showing Asia-Australia"],
  ["\u{1F310}", "globe with meridians"],
  ["\u{1F5FA}\uFE0F", "world map"],
  ["\u{1F5FE}", "map of Japan"],
  ["\u{1F9ED}", "compass"],
  ["\u{1F3D4}\uFE0F", "snow-capped mountain"],
  ["\u26F0\uFE0F", "mountain"],
  ["\u{1F30B}", "volcano"],
  ["\u{1F5FB}", "mount fuji"],
  ["\u{1F3D5}\uFE0F", "camping"],
  ["\u{1F3D6}\uFE0F", "beach with umbrella"],
  ["\u{1F3DC}\uFE0F", "desert"],
  ["\u{1F3DD}\uFE0F", "desert island"],
  ["\u{1F3DE}\uFE0F", "national park"],
  ["\u{1F3DF}\uFE0F", "stadium"],
  ["\u{1F3DB}\uFE0F", "classical building"],
  ["\u{1F3D7}\uFE0F", "building construction"],
  ["\u{1F9F1}", "brick"],
  ["\u{1FAA8}", "rock"],
  ["\u{1FAB5}", "wood"],
  ["\u{1F6D6}", "hut"],
  ["\u{1F3D8}\uFE0F", "houses"],
  ["\u{1F3DA}\uFE0F", "derelict house"],
  ["\u{1F3E0}", "house"],
  ["\u{1F3E1}", "house with garden"],
  ["\u{1F3E2}", "office building"],
  ["\u{1F3E3}", "Japanese post office"],
  ["\u{1F3E4}", "post office"],
  ["\u{1F3E5}", "hospital"],
  ["\u{1F3E6}", "bank"],
  ["\u{1F3E8}", "hotel"],
  ["\u{1F3E9}", "love hotel"],
  ["\u{1F3EA}", "convenience store"],
  ["\u{1F3EB}", "school"],
  ["\u{1F3EC}", "department store"],
  ["\u{1F3ED}", "factory"],
  ["\u{1F3EF}", "Japanese castle"],
  ["\u{1F3F0}", "castle"],
  ["\u{1F492}", "wedding"],
  ["\u{1F5FC}", "Tokyo tower"],
  ["\u{1F5FD}", "Statue of Liberty"],
  ["\u26EA", "church"],
  ["\u{1F54C}", "mosque"],
  ["\u{1F6D5}", "hindu temple"],
  ["\u{1F54D}", "synagogue"],
  ["\u26E9\uFE0F", "shinto shrine"],
  ["\u{1F54B}", "kaaba"],
  ["\u26F2", "fountain"],
  ["\u26FA", "tent"],
  ["\u{1F301}", "foggy"],
  ["\u{1F303}", "night with stars"],
  ["\u{1F3D9}\uFE0F", "cityscape"],
  ["\u{1F304}", "sunrise over mountains"],
  ["\u{1F305}", "sunrise"],
  ["\u{1F306}", "cityscape at dusk"],
  ["\u{1F307}", "sunset"],
  ["\u{1F309}", "bridge at night"],
  ["\u2668\uFE0F", "hot springs"],
  ["\u{1F3A0}", "carousel horse"],
  ["\u{1F6DD}", "playground slide"],
  ["\u{1F3A1}", "ferris wheel"],
  ["\u{1F3A2}", "roller coaster"],
  ["\u{1F488}", "barber pole"],
  ["\u{1F3AA}", "circus tent"],
  ["\u{1F682}", "locomotive"],
  ["\u{1F683}", "railway car"],
  ["\u{1F684}", "high-speed train"],
  ["\u{1F685}", "bullet train"],
  ["\u{1F686}", "train"],
  ["\u{1F687}", "metro"],
  ["\u{1F688}", "light rail"],
  ["\u{1F689}", "station"],
  ["\u{1F68A}", "tram"],
  ["\u{1F69D}", "monorail"],
  ["\u{1F69E}", "mountain railway"],
  ["\u{1F68B}", "tram car"],
  ["\u{1F68C}", "bus"],
  ["\u{1F68D}", "oncoming bus"],
  ["\u{1F68E}", "trolleybus"],
  ["\u{1F690}", "minibus"],
  ["\u{1F691}", "ambulance"],
  ["\u{1F692}", "fire engine"],
  ["\u{1F693}", "police car"],
  ["\u{1F694}", "oncoming police car"],
  ["\u{1F695}", "taxi"],
  ["\u{1F696}", "oncoming taxi"],
  ["\u{1F697}", "automobile"],
  ["\u{1F698}", "oncoming automobile"],
  ["\u{1F699}", "sport utility vehicle"],
  ["\u{1F6FB}", "pickup truck"],
  ["\u{1F69A}", "delivery truck"],
  ["\u{1F69B}", "articulated lorry"],
  ["\u{1F69C}", "tractor"],
  ["\u{1F3CE}\uFE0F", "racing car"],
  ["\u{1F3CD}\uFE0F", "motorcycle"],
  ["\u{1F6F5}", "motor scooter"],
  ["\u{1F9BD}", "manual wheelchair"],
  ["\u{1F9BC}", "motorized wheelchair"],
  ["\u{1F6FA}", "auto rickshaw"],
  ["\u{1F6B2}", "bicycle"],
  ["\u{1F6F4}", "kick scooter"],
  ["\u{1F6F9}", "skateboard"],
  ["\u{1F6FC}", "roller skate"],
  ["\u{1F68F}", "bus stop"],
  ["\u{1F6E3}\uFE0F", "motorway"],
  ["\u{1F6E4}\uFE0F", "railway track"],
  ["\u{1F6E2}\uFE0F", "oil drum"],
  ["\u26FD", "fuel pump"],
  ["\u{1F6DE}", "wheel"],
  ["\u{1F6A8}", "police car light"],
  ["\u{1F6A5}", "horizontal traffic light"],
  ["\u{1F6A6}", "vertical traffic light"],
  ["\u{1F6D1}", "stop sign"],
  ["\u{1F6A7}", "construction"],
  ["\u2693", "anchor"],
  ["\u{1F6DF}", "ring buoy"],
  ["\u26F5", "sailboat"],
  ["\u{1F6F6}", "canoe"],
  ["\u{1F6A4}", "speedboat"],
  ["\u{1F6F3}\uFE0F", "passenger ship"],
  ["\u26F4\uFE0F", "ferry"],
  ["\u{1F6E5}\uFE0F", "motor boat"],
  ["\u{1F6A2}", "ship"],
  ["\u2708\uFE0F", "airplane"],
  ["\u{1F6E9}\uFE0F", "small airplane"],
  ["\u{1F6EB}", "airplane departure"],
  ["\u{1F6EC}", "airplane arrival"],
  ["\u{1FA82}", "parachute"],
  ["\u{1F4BA}", "seat"],
  ["\u{1F681}", "helicopter"],
  ["\u{1F69F}", "suspension railway"],
  ["\u{1F6A0}", "mountain cableway"],
  ["\u{1F6A1}", "aerial tramway"],
  ["\u{1F6F0}\uFE0F", "satellite"],
  ["\u{1F680}", "rocket"],
  ["\u{1F6F8}", "flying saucer"],
  ["\u{1F6CE}\uFE0F", "bellhop bell"],
  ["\u{1F9F3}", "luggage"],
  ["\u231B", "hourglass done"],
  ["\u23F3", "hourglass not done"],
  ["\u231A", "watch"],
  ["\u23F0", "alarm clock"],
  ["\u23F1\uFE0F", "stopwatch"],
  ["\u23F2\uFE0F", "timer clock"],
  ["\u{1F570}\uFE0F", "mantelpiece clock"],
  ["\u{1F55B}", "twelve o'clock"],
  ["\u{1F567}", "twelve-thirty"],
  ["\u{1F550}", "one o'clock"],
  ["\u{1F55C}", "one-thirty"],
  ["\u{1F551}", "two o'clock"],
  ["\u{1F55D}", "two-thirty"],
  ["\u{1F552}", "three o'clock"],
  ["\u{1F55E}", "three-thirty"],
  ["\u{1F553}", "four o'clock"],
  ["\u{1F55F}", "four-thirty"],
  ["\u{1F554}", "five o'clock"],
  ["\u{1F560}", "five-thirty"],
  ["\u{1F555}", "six o'clock"],
  ["\u{1F561}", "six-thirty"],
  ["\u{1F556}", "seven o'clock"],
  ["\u{1F562}", "seven-thirty"],
  ["\u{1F557}", "eight o'clock"],
  ["\u{1F563}", "eight-thirty"],
  ["\u{1F558}", "nine o'clock"],
  ["\u{1F564}", "nine-thirty"],
  ["\u{1F559}", "ten o'clock"],
  ["\u{1F565}", "ten-thirty"],
  ["\u{1F55A}", "eleven o'clock"],
  ["\u{1F566}", "eleven-thirty"],
  ["\u{1F311}", "new moon"],
  ["\u{1F312}", "waxing crescent moon"],
  ["\u{1F313}", "first quarter moon"],
  ["\u{1F314}", "waxing gibbous moon"],
  ["\u{1F315}", "full moon"],
  ["\u{1F316}", "waning gibbous moon"],
  ["\u{1F317}", "last quarter moon"],
  ["\u{1F318}", "waning crescent moon"],
  ["\u{1F319}", "crescent moon"],
  ["\u{1F31A}", "new moon face"],
  ["\u{1F31B}", "first quarter moon face"],
  ["\u{1F31C}", "last quarter moon face"],
  ["\u{1F321}\uFE0F", "thermometer"],
  ["\u2600\uFE0F", "sun"],
  ["\u{1F31D}", "full moon face"],
  ["\u{1F31E}", "sun with face"],
  ["\u{1FA90}", "ringed planet"],
  ["\u2B50", "star"],
  ["\u{1F31F}", "glowing star"],
  ["\u{1F320}", "shooting star"],
  ["\u{1F30C}", "milky way"],
  ["\u2601\uFE0F", "cloud"],
  ["\u26C5", "sun behind cloud"],
  ["\u26C8\uFE0F", "cloud with lightning and rain"],
  ["\u{1F324}\uFE0F", "sun behind small cloud"],
  ["\u{1F325}\uFE0F", "sun behind large cloud"],
  ["\u{1F326}\uFE0F", "sun behind rain cloud"],
  ["\u{1F327}\uFE0F", "cloud with rain"],
  ["\u{1F328}\uFE0F", "cloud with snow"],
  ["\u{1F329}\uFE0F", "cloud with lightning"],
  ["\u{1F32A}\uFE0F", "tornado"],
  ["\u{1F32B}\uFE0F", "fog"],
  ["\u{1F32C}\uFE0F", "wind face"],
  ["\u{1F300}", "cyclone"],
  ["\u{1F308}", "rainbow"],
  ["\u{1F302}", "closed umbrella"],
  ["\u2602\uFE0F", "umbrella"],
  ["\u2614", "umbrella with rain drops"],
  ["\u26F1\uFE0F", "umbrella on ground"],
  ["\u26A1", "high voltage"],
  ["\u2744\uFE0F", "snowflake"],
  ["\u2603\uFE0F", "snowman"],
  ["\u26C4", "snowman without snow"],
  ["\u2604\uFE0F", "comet"],
  ["\u{1F525}", "fire"],
  ["\u{1F4A7}", "droplet"],
  ["\u{1F30A}", "water wave"],
  ["\u{1F383}", "jack-o-lantern"],
  ["\u{1F384}", "Christmas tree"],
  ["\u{1F386}", "fireworks"],
  ["\u{1F387}", "sparkler"],
  ["\u{1F9E8}", "firecracker"],
  ["\u2728", "sparkles"],
  ["\u{1F388}", "balloon"],
  ["\u{1F389}", "party popper"],
  ["\u{1F38A}", "confetti ball"],
  ["\u{1F38B}", "tanabata tree"],
  ["\u{1F38D}", "pine decoration"],
  ["\u{1F38E}", "Japanese dolls"],
  ["\u{1F38F}", "carp streamer"],
  ["\u{1F390}", "wind chime"],
  ["\u{1F391}", "moon viewing ceremony"],
  ["\u{1F9E7}", "red envelope"],
  ["\u{1F380}", "ribbon"],
  ["\u{1F381}", "wrapped gift"],
  ["\u{1F397}\uFE0F", "reminder ribbon"],
  ["\u{1F39F}\uFE0F", "admission tickets"],
  ["\u{1F3AB}", "ticket"],
  ["\u{1F396}\uFE0F", "military medal"],
  ["\u{1F3C6}", "trophy"],
  ["\u{1F3C5}", "sports medal"],
  ["\u{1F947}", "1st place medal"],
  ["\u{1F948}", "2nd place medal"],
  ["\u{1F949}", "3rd place medal"],
  ["\u26BD", "soccer ball"],
  ["\u26BE", "baseball"],
  ["\u{1F94E}", "softball"],
  ["\u{1F3C0}", "basketball"],
  ["\u{1F3D0}", "volleyball"],
  ["\u{1F3C8}", "american football"],
  ["\u{1F3C9}", "rugby football"],
  ["\u{1F3BE}", "tennis"],
  ["\u{1F94F}", "flying disc"],
  ["\u{1F3B3}", "bowling"],
  ["\u{1F3CF}", "cricket game"],
  ["\u{1F3D1}", "field hockey"],
  ["\u{1F3D2}", "ice hockey"],
  ["\u{1F94D}", "lacrosse"],
  ["\u{1F3D3}", "ping pong"],
  ["\u{1F3F8}", "badminton"],
  ["\u{1F94A}", "boxing glove"],
  ["\u{1F94B}", "martial arts uniform"],
  ["\u{1F945}", "goal net"],
  ["\u26F3", "flag in hole"],
  ["\u26F8\uFE0F", "ice skate"],
  ["\u{1F3A3}", "fishing pole"],
  ["\u{1F93F}", "diving mask"],
  ["\u{1F3BD}", "running shirt"],
  ["\u{1F3BF}", "skis"],
  ["\u{1F6F7}", "sled"],
  ["\u{1F94C}", "curling stone"],
  ["\u{1F3AF}", "bullseye"],
  ["\u{1FA80}", "yo-yo"],
  ["\u{1FA81}", "kite"],
  ["\u{1F52B}", "water pistol"],
  ["\u{1F3B1}", "pool 8 ball"],
  ["\u{1F52E}", "crystal ball"],
  ["\u{1FA84}", "magic wand"],
  ["\u{1F3AE}", "video game"],
  ["\u{1F579}\uFE0F", "joystick"],
  ["\u{1F3B0}", "slot machine"],
  ["\u{1F3B2}", "game die"],
  ["\u{1F9E9}", "puzzle piece"],
  ["\u{1F9F8}", "teddy bear"],
  ["\u{1FA85}", "pi\xF1ata"],
  ["\u{1FAA9}", "mirror ball"],
  ["\u{1FA86}", "nesting dolls"],
  ["\u2660\uFE0F", "spade suit"],
  ["\u2665\uFE0F", "heart suit"],
  ["\u2666\uFE0F", "diamond suit"],
  ["\u2663\uFE0F", "club suit"],
  ["\u265F\uFE0F", "chess pawn"],
  ["\u{1F0CF}", "joker"],
  ["\u{1F004}", "mahjong red dragon"],
  ["\u{1F3B4}", "flower playing cards"],
  ["\u{1F3AD}", "performing arts"],
  ["\u{1F5BC}\uFE0F", "framed picture"],
  ["\u{1F3A8}", "artist palette"],
  ["\u{1F9F5}", "thread"],
  ["\u{1FAA1}", "sewing needle"],
  ["\u{1F9F6}", "yarn"],
  ["\u{1FAA2}", "knot"],
  ["\u{1F453}", "glasses"],
  ["\u{1F576}\uFE0F", "sunglasses"],
  ["\u{1F97D}", "goggles"],
  ["\u{1F97C}", "lab coat"],
  ["\u{1F9BA}", "safety vest"],
  ["\u{1F454}", "necktie"],
  ["\u{1F455}", "t-shirt"],
  ["\u{1F456}", "jeans"],
  ["\u{1F9E3}", "scarf"],
  ["\u{1F9E4}", "gloves"],
  ["\u{1F9E5}", "coat"],
  ["\u{1F9E6}", "socks"],
  ["\u{1F457}", "dress"],
  ["\u{1F458}", "kimono"],
  ["\u{1F97B}", "sari"],
  ["\u{1FA71}", "one-piece swimsuit"],
  ["\u{1FA72}", "briefs"],
  ["\u{1FA73}", "shorts"],
  ["\u{1F459}", "bikini"],
  ["\u{1F45A}", "woman's clothes"],
  ["\u{1FAAD}", "folding hand fan"],
  ["\u{1F45B}", "purse"],
  ["\u{1F45C}", "handbag"],
  ["\u{1F45D}", "clutch bag"],
  ["\u{1F6CD}\uFE0F", "shopping bags"],
  ["\u{1F392}", "backpack"],
  ["\u{1FA74}", "thong sandal"],
  ["\u{1F45E}", "man's shoe"],
  ["\u{1F45F}", "running shoe"],
  ["\u{1F97E}", "hiking boot"],
  ["\u{1F97F}", "flat shoe"],
  ["\u{1F460}", "high-heeled shoe"],
  ["\u{1F461}", "woman's sandal"],
  ["\u{1FA70}", "ballet shoes"],
  ["\u{1F462}", "woman's boot"],
  ["\u{1FAAE}", "hair pick"],
  ["\u{1F451}", "crown"],
  ["\u{1F452}", "woman's hat"],
  ["\u{1F3A9}", "top hat"],
  ["\u{1F393}", "graduation cap"],
  ["\u{1F9E2}", "billed cap"],
  ["\u{1FA96}", "military helmet"],
  ["\u26D1\uFE0F", "rescue worker's helmet"],
  ["\u{1F4FF}", "prayer beads"],
  ["\u{1F484}", "lipstick"],
  ["\u{1F48D}", "ring"],
  ["\u{1F48E}", "gem stone"],
  ["\u{1F507}", "muted speaker"],
  ["\u{1F508}", "speaker low volume"],
  ["\u{1F509}", "speaker medium volume"],
  ["\u{1F50A}", "speaker high volume"],
  ["\u{1F4E2}", "loudspeaker"],
  ["\u{1F4E3}", "megaphone"],
  ["\u{1F4EF}", "postal horn"],
  ["\u{1F514}", "bell"],
  ["\u{1F515}", "bell with slash"],
  ["\u{1F3BC}", "musical score"],
  ["\u{1F3B5}", "musical note"],
  ["\u{1F3B6}", "musical notes"],
  ["\u{1F399}\uFE0F", "studio microphone"],
  ["\u{1F39A}\uFE0F", "level slider"],
  ["\u{1F39B}\uFE0F", "control knobs"],
  ["\u{1F3A4}", "microphone"],
  ["\u{1F3A7}", "headphone"],
  ["\u{1F4FB}", "radio"],
  ["\u{1F3B7}", "saxophone"],
  ["\u{1FA97}", "accordion"],
  ["\u{1F3B8}", "guitar"],
  ["\u{1F3B9}", "musical keyboard"],
  ["\u{1F3BA}", "trumpet"],
  ["\u{1F3BB}", "violin"],
  ["\u{1FA95}", "banjo"],
  ["\u{1F941}", "drum"],
  ["\u{1FA98}", "long drum"],
  ["\u{1FA87}", "maracas"],
  ["\u{1FA88}", "flute"],
  ["\u{1F4F1}", "mobile phone"],
  ["\u{1F4F2}", "mobile phone with arrow"],
  ["\u260E\uFE0F", "telephone"],
  ["\u{1F4DE}", "telephone receiver"],
  ["\u{1F4DF}", "pager"],
  ["\u{1F4E0}", "fax machine"],
  ["\u{1F50B}", "battery"],
  ["\u{1FAAB}", "low battery"],
  ["\u{1F50C}", "electric plug"],
  ["\u{1F4BB}", "laptop"],
  ["\u{1F5A5}\uFE0F", "desktop computer"],
  ["\u{1F5A8}\uFE0F", "printer"],
  ["\u2328\uFE0F", "keyboard"],
  ["\u{1F5B1}\uFE0F", "computer mouse"],
  ["\u{1F5B2}\uFE0F", "trackball"],
  ["\u{1F4BD}", "computer disk"],
  ["\u{1F4BE}", "floppy disk"],
  ["\u{1F4BF}", "optical disk"],
  ["\u{1F4C0}", "dvd"],
  ["\u{1F9EE}", "abacus"],
  ["\u{1F3A5}", "movie camera"],
  ["\u{1F39E}\uFE0F", "film frames"],
  ["\u{1F4FD}\uFE0F", "film projector"],
  ["\u{1F3AC}", "clapper board"],
  ["\u{1F4FA}", "television"],
  ["\u{1F4F7}", "camera"],
  ["\u{1F4F8}", "camera with flash"],
  ["\u{1F4F9}", "video camera"],
  ["\u{1F4FC}", "videocassette"],
  ["\u{1F50D}", "magnifying glass tilted left"],
  ["\u{1F50E}", "magnifying glass tilted right"],
  ["\u{1F56F}\uFE0F", "candle"],
  ["\u{1F4A1}", "light bulb"],
  ["\u{1F526}", "flashlight"],
  ["\u{1F3EE}", "red paper lantern"],
  ["\u{1FA94}", "diya lamp"],
  ["\u{1F4D4}", "notebook with decorative cover"],
  ["\u{1F4D5}", "closed book"],
  ["\u{1F4D6}", "open book"],
  ["\u{1F4D7}", "green book"],
  ["\u{1F4D8}", "blue book"],
  ["\u{1F4D9}", "orange book"],
  ["\u{1F4DA}", "books"],
  ["\u{1F4D3}", "notebook"],
  ["\u{1F4D2}", "ledger"],
  ["\u{1F4C3}", "page with curl"],
  ["\u{1F4DC}", "scroll"],
  ["\u{1F4C4}", "page facing up"],
  ["\u{1F4F0}", "newspaper"],
  ["\u{1F5DE}\uFE0F", "rolled-up newspaper"],
  ["\u{1F4D1}", "bookmark tabs"],
  ["\u{1F516}", "bookmark"],
  ["\u{1F3F7}\uFE0F", "label"],
  ["\u{1F4B0}", "money bag"],
  ["\u{1FA99}", "coin"],
  ["\u{1F4B4}", "yen banknote"],
  ["\u{1F4B5}", "dollar banknote"],
  ["\u{1F4B6}", "euro banknote"],
  ["\u{1F4B7}", "pound banknote"],
  ["\u{1F4B8}", "money with wings"],
  ["\u{1F4B3}", "credit card"],
  ["\u{1F9FE}", "receipt"],
  ["\u{1F4B9}", "chart increasing with yen"],
  ["\u2709\uFE0F", "envelope"],
  ["\u{1F4E7}", "e-mail"],
  ["\u{1F4E8}", "incoming envelope"],
  ["\u{1F4E9}", "envelope with arrow"],
  ["\u{1F4E4}", "outbox tray"],
  ["\u{1F4E5}", "inbox tray"],
  ["\u{1F4E6}", "package"],
  ["\u{1F4EB}", "closed mailbox with raised flag"],
  ["\u{1F4EA}", "closed mailbox with lowered flag"],
  ["\u{1F4EC}", "open mailbox with raised flag"],
  ["\u{1F4ED}", "open mailbox with lowered flag"],
  ["\u{1F4EE}", "postbox"],
  ["\u{1F5F3}\uFE0F", "ballot box with ballot"],
  ["\u270F\uFE0F", "pencil"],
  ["\u2712\uFE0F", "black nib"],
  ["\u{1F58B}\uFE0F", "fountain pen"],
  ["\u{1F58A}\uFE0F", "pen"],
  ["\u{1F58C}\uFE0F", "paintbrush"],
  ["\u{1F58D}\uFE0F", "crayon"],
  ["\u{1F4DD}", "memo"],
  ["\u{1F4BC}", "briefcase"],
  ["\u{1F4C1}", "file folder"],
  ["\u{1F4C2}", "open file folder"],
  ["\u{1F5C2}\uFE0F", "card index dividers"],
  ["\u{1F4C5}", "calendar"],
  ["\u{1F4C6}", "tear-off calendar"],
  ["\u{1F5D2}\uFE0F", "spiral notepad"],
  ["\u{1F5D3}\uFE0F", "spiral calendar"],
  ["\u{1F4C7}", "card index"],
  ["\u{1F4C8}", "chart increasing"],
  ["\u{1F4C9}", "chart decreasing"],
  ["\u{1F4CA}", "bar chart"],
  ["\u{1F4CB}", "clipboard"],
  ["\u{1F4CC}", "pushpin"],
  ["\u{1F4CD}", "round pushpin"],
  ["\u{1F4CE}", "paperclip"],
  ["\u{1F587}\uFE0F", "linked paperclips"],
  ["\u{1F4CF}", "straight ruler"],
  ["\u{1F4D0}", "triangular ruler"],
  ["\u2702\uFE0F", "scissors"],
  ["\u{1F5C3}\uFE0F", "card file box"],
  ["\u{1F5C4}\uFE0F", "file cabinet"],
  ["\u{1F5D1}\uFE0F", "wastebasket"],
  ["\u{1F512}", "locked"],
  ["\u{1F513}", "unlocked"],
  ["\u{1F50F}", "locked with pen"],
  ["\u{1F510}", "locked with key"],
  ["\u{1F511}", "key"],
  ["\u{1F5DD}\uFE0F", "old key"],
  ["\u{1F528}", "hammer"],
  ["\u{1FA93}", "axe"],
  ["\u26CF\uFE0F", "pick"],
  ["\u2692\uFE0F", "hammer and pick"],
  ["\u{1F6E0}\uFE0F", "hammer and wrench"],
  ["\u{1F5E1}\uFE0F", "dagger"],
  ["\u2694\uFE0F", "crossed swords"],
  ["\u{1F4A3}", "bomb"],
  ["\u{1FA83}", "boomerang"],
  ["\u{1F3F9}", "bow and arrow"],
  ["\u{1F6E1}\uFE0F", "shield"],
  ["\u{1FA9A}", "carpentry saw"],
  ["\u{1F527}", "wrench"],
  ["\u{1FA9B}", "screwdriver"],
  ["\u{1F529}", "nut and bolt"],
  ["\u2699\uFE0F", "gear"],
  ["\u{1F5DC}\uFE0F", "clamp"],
  ["\u2696\uFE0F", "balance scale"],
  ["\u{1F9AF}", "white cane"],
  ["\u{1F517}", "link"],
  ["\u26D3\uFE0F\u200D\u{1F4A5}", "broken chain"],
  ["\u26D3\uFE0F", "chains"],
  ["\u{1FA9D}", "hook"],
  ["\u{1F9F0}", "toolbox"],
  ["\u{1F9F2}", "magnet"],
  ["\u{1FA9C}", "ladder"],
  ["\u2697\uFE0F", "alembic"],
  ["\u{1F9EA}", "test tube"],
  ["\u{1F9EB}", "petri dish"],
  ["\u{1F9EC}", "dna"],
  ["\u{1F52C}", "microscope"],
  ["\u{1F52D}", "telescope"],
  ["\u{1F4E1}", "satellite antenna"],
  ["\u{1F489}", "syringe"],
  ["\u{1FA78}", "drop of blood"],
  ["\u{1F48A}", "pill"],
  ["\u{1FA79}", "adhesive bandage"],
  ["\u{1FA7C}", "crutch"],
  ["\u{1FA7A}", "stethoscope"],
  ["\u{1FA7B}", "x-ray"],
  ["\u{1F6AA}", "door"],
  ["\u{1F6D7}", "elevator"],
  ["\u{1FA9E}", "mirror"],
  ["\u{1FA9F}", "window"],
  ["\u{1F6CF}\uFE0F", "bed"],
  ["\u{1F6CB}\uFE0F", "couch and lamp"],
  ["\u{1FA91}", "chair"],
  ["\u{1F6BD}", "toilet"],
  ["\u{1FAA0}", "plunger"],
  ["\u{1F6BF}", "shower"],
  ["\u{1F6C1}", "bathtub"],
  ["\u{1FAA4}", "mouse trap"],
  ["\u{1FA92}", "razor"],
  ["\u{1F9F4}", "lotion bottle"],
  ["\u{1F9F7}", "safety pin"],
  ["\u{1F9F9}", "broom"],
  ["\u{1F9FA}", "basket"],
  ["\u{1F9FB}", "roll of paper"],
  ["\u{1FAA3}", "bucket"],
  ["\u{1F9FC}", "soap"],
  ["\u{1FAE7}", "bubbles"],
  ["\u{1FAA5}", "toothbrush"],
  ["\u{1F9FD}", "sponge"],
  ["\u{1F9EF}", "fire extinguisher"],
  ["\u{1F6D2}", "shopping cart"],
  ["\u{1F6AC}", "cigarette"],
  ["\u26B0\uFE0F", "coffin"],
  ["\u{1FAA6}", "headstone"],
  ["\u26B1\uFE0F", "funeral urn"],
  ["\u{1F9FF}", "nazar amulet"],
  ["\u{1FAAC}", "hamsa"],
  ["\u{1F5FF}", "moai"],
  ["\u{1FAA7}", "placard"],
  ["\u{1FAAA}", "identification card"],
  ["\u{1F3E7}", "ATM sign"],
  ["\u{1F6AE}", "litter in bin sign"],
  ["\u{1F6B0}", "potable water"],
  ["\u267F", "wheelchair symbol"],
  ["\u{1F6B9}", "men's room"],
  ["\u{1F6BA}", "women's room"],
  ["\u{1F6BB}", "restroom"],
  ["\u{1F6BC}", "baby symbol"],
  ["\u{1F6BE}", "water closet"],
  ["\u{1F6C2}", "passport control"],
  ["\u{1F6C3}", "customs"],
  ["\u{1F6C4}", "baggage claim"],
  ["\u{1F6C5}", "left luggage"],
  ["\u26A0\uFE0F", "warning"],
  ["\u{1F6B8}", "children crossing"],
  ["\u26D4", "no entry"],
  ["\u{1F6AB}", "prohibited"],
  ["\u{1F6B3}", "no bicycles"],
  ["\u{1F6AD}", "no smoking"],
  ["\u{1F6AF}", "no littering"],
  ["\u{1F6B1}", "non-potable water"],
  ["\u{1F6B7}", "no pedestrians"],
  ["\u{1F4F5}", "no mobile phones"],
  ["\u{1F51E}", "no one under eighteen"],
  ["\u2622\uFE0F", "radioactive"],
  ["\u2623\uFE0F", "biohazard"],
  ["\u2B06\uFE0F", "up arrow"],
  ["\u2197\uFE0F", "up-right arrow"],
  ["\u27A1\uFE0F", "right arrow"],
  ["\u2198\uFE0F", "down-right arrow"],
  ["\u2B07\uFE0F", "down arrow"],
  ["\u2199\uFE0F", "down-left arrow"],
  ["\u2B05\uFE0F", "left arrow"],
  ["\u2196\uFE0F", "up-left arrow"],
  ["\u2195\uFE0F", "up-down arrow"],
  ["\u2194\uFE0F", "left-right arrow"],
  ["\u21A9\uFE0F", "right arrow curving left"],
  ["\u21AA\uFE0F", "left arrow curving right"],
  ["\u2934\uFE0F", "right arrow curving up"],
  ["\u2935\uFE0F", "right arrow curving down"],
  ["\u{1F503}", "clockwise vertical arrows"],
  ["\u{1F504}", "counterclockwise arrows button"],
  ["\u{1F519}", "BACK arrow"],
  ["\u{1F51A}", "END arrow"],
  ["\u{1F51B}", "ON! arrow"],
  ["\u{1F51C}", "SOON arrow"],
  ["\u{1F51D}", "TOP arrow"],
  ["\u{1F6D0}", "place of worship"],
  ["\u269B\uFE0F", "atom symbol"],
  ["\u{1F549}\uFE0F", "om"],
  ["\u2721\uFE0F", "star of David"],
  ["\u2638\uFE0F", "wheel of dharma"],
  ["\u262F\uFE0F", "yin yang"],
  ["\u271D\uFE0F", "latin cross"],
  ["\u2626\uFE0F", "orthodox cross"],
  ["\u262A\uFE0F", "star and crescent"],
  ["\u262E\uFE0F", "peace symbol"],
  ["\u{1F54E}", "menorah"],
  ["\u{1F52F}", "dotted six-pointed star"],
  ["\u{1FAAF}", "khanda"],
  ["\u2648", "Aries"],
  ["\u2649", "Taurus"],
  ["\u264A", "Gemini"],
  ["\u264B", "Cancer"],
  ["\u264C", "Leo"],
  ["\u264D", "Virgo"],
  ["\u264E", "Libra"],
  ["\u264F", "Scorpio"],
  ["\u2650", "Sagittarius"],
  ["\u2651", "Capricorn"],
  ["\u2652", "Aquarius"],
  ["\u2653", "Pisces"],
  ["\u26CE", "Ophiuchus"],
  ["\u{1F500}", "shuffle tracks button"],
  ["\u{1F501}", "repeat button"],
  ["\u{1F502}", "repeat single button"],
  ["\u25B6\uFE0F", "play button"],
  ["\u23E9", "fast-forward button"],
  ["\u23ED\uFE0F", "next track button"],
  ["\u23EF\uFE0F", "play or pause button"],
  ["\u25C0\uFE0F", "reverse button"],
  ["\u23EA", "fast reverse button"],
  ["\u23EE\uFE0F", "last track button"],
  ["\u{1F53C}", "upwards button"],
  ["\u23EB", "fast up button"],
  ["\u{1F53D}", "downwards button"],
  ["\u23EC", "fast down button"],
  ["\u23F8\uFE0F", "pause button"],
  ["\u23F9\uFE0F", "stop button"],
  ["\u23FA\uFE0F", "record button"],
  ["\u23CF\uFE0F", "eject button"],
  ["\u{1F3A6}", "cinema"],
  ["\u{1F505}", "dim button"],
  ["\u{1F506}", "bright button"],
  ["\u{1F4F6}", "antenna bars"],
  ["\u{1F6DC}", "wireless"],
  ["\u{1F4F3}", "vibration mode"],
  ["\u{1F4F4}", "mobile phone off"],
  ["\u2640\uFE0F", "female sign"],
  ["\u2642\uFE0F", "male sign"],
  ["\u26A7\uFE0F", "transgender symbol"],
  ["\u2716\uFE0F", "multiply"],
  ["\u2795", "plus"],
  ["\u2796", "minus"],
  ["\u2797", "divide"],
  ["\u{1F7F0}", "heavy equals sign"],
  ["\u267E\uFE0F", "infinity"],
  ["\u203C\uFE0F", "double exclamation mark"],
  ["\u2049\uFE0F", "exclamation question mark"],
  ["\u2753", "red question mark"],
  ["\u2754", "white question mark"],
  ["\u2755", "white exclamation mark"],
  ["\u2757", "red exclamation mark"],
  ["\u3030\uFE0F", "wavy dash"],
  ["\u{1F4B1}", "currency exchange"],
  ["\u{1F4B2}", "heavy dollar sign"],
  ["\u2695\uFE0F", "medical symbol"],
  ["\u267B\uFE0F", "recycling symbol"],
  ["\u269C\uFE0F", "fleur-de-lis"],
  ["\u{1F531}", "trident emblem"],
  ["\u{1F4DB}", "name badge"],
  ["\u{1F530}", "Japanese symbol for beginner"],
  ["\u2B55", "hollow red circle"],
  ["\u2705", "check mark button"],
  ["\u2611\uFE0F", "check box with check"],
  ["\u2714\uFE0F", "check mark"],
  ["\u274C", "cross mark"],
  ["\u274E", "cross mark button"],
  ["\u27B0", "curly loop"],
  ["\u27BF", "double curly loop"],
  ["\u303D\uFE0F", "part alternation mark"],
  ["\u2733\uFE0F", "eight-spoked asterisk"],
  ["\u2734\uFE0F", "eight-pointed star"],
  ["\u2747\uFE0F", "sparkle"],
  ["\xA9\uFE0F", "copyright"],
  ["\xAE\uFE0F", "registered"],
  ["\u2122\uFE0F", "trade mark"],
  ["#\uFE0F\u20E3", "keycap: #"],
  ["*\uFE0F\u20E3", "keycap: *"],
  ["0\uFE0F\u20E3", "keycap: 0"],
  ["1\uFE0F\u20E3", "keycap: 1"],
  ["2\uFE0F\u20E3", "keycap: 2"],
  ["3\uFE0F\u20E3", "keycap: 3"],
  ["4\uFE0F\u20E3", "keycap: 4"],
  ["5\uFE0F\u20E3", "keycap: 5"],
  ["6\uFE0F\u20E3", "keycap: 6"],
  ["7\uFE0F\u20E3", "keycap: 7"],
  ["8\uFE0F\u20E3", "keycap: 8"],
  ["9\uFE0F\u20E3", "keycap: 9"],
  ["\u{1F51F}", "keycap: 10"],
  ["\u{1F520}", "input latin uppercase"],
  ["\u{1F521}", "input latin lowercase"],
  ["\u{1F522}", "input numbers"],
  ["\u{1F523}", "input symbols"],
  ["\u{1F524}", "input latin letters"],
  ["\u{1F170}\uFE0F", "A button (blood type)"],
  ["\u{1F18E}", "AB button (blood type)"],
  ["\u{1F171}\uFE0F", "B button (blood type)"],
  ["\u{1F191}", "CL button"],
  ["\u{1F192}", "COOL button"],
  ["\u{1F193}", "FREE button"],
  ["\u2139\uFE0F", "information"],
  ["\u{1F194}", "ID button"],
  ["\u24C2\uFE0F", "circled M"],
  ["\u{1F195}", "NEW button"],
  ["\u{1F196}", "NG button"],
  ["\u{1F17E}\uFE0F", "O button (blood type)"],
  ["\u{1F197}", "OK button"],
  ["\u{1F17F}\uFE0F", "P button"],
  ["\u{1F198}", "SOS button"],
  ["\u{1F199}", "UP! button"],
  ["\u{1F19A}", "VS button"],
  ["\u{1F201}", "Japanese \u201Chere\u201D button"],
  ["\u{1F202}\uFE0F", "Japanese \u201Cservice charge\u201D button"],
  ["\u{1F237}\uFE0F", "Japanese \u201Cmonthly amount\u201D button"],
  ["\u{1F236}", "Japanese \u201Cnot free of charge\u201D button"],
  ["\u{1F22F}", "Japanese \u201Creserved\u201D button"],
  ["\u{1F250}", "Japanese \u201Cbargain\u201D button"],
  ["\u{1F239}", "Japanese \u201Cdiscount\u201D button"],
  ["\u{1F21A}", "Japanese \u201Cfree of charge\u201D button"],
  ["\u{1F232}", "Japanese \u201Cprohibited\u201D button"],
  ["\u{1F251}", "Japanese \u201Cacceptable\u201D button"],
  ["\u{1F238}", "Japanese \u201Capplication\u201D button"],
  ["\u{1F234}", "Japanese \u201Cpassing grade\u201D button"],
  ["\u{1F233}", "Japanese \u201Cvacancy\u201D button"],
  ["\u3297\uFE0F", "Japanese \u201Ccongratulations\u201D button"],
  ["\u3299\uFE0F", "Japanese \u201Csecret\u201D button"],
  ["\u{1F23A}", "Japanese \u201Copen for business\u201D button"],
  ["\u{1F235}", "Japanese \u201Cno vacancy\u201D button"],
  ["\u{1F534}", "red circle"],
  ["\u{1F7E0}", "orange circle"],
  ["\u{1F7E1}", "yellow circle"],
  ["\u{1F7E2}", "green circle"],
  ["\u{1F535}", "blue circle"],
  ["\u{1F7E3}", "purple circle"],
  ["\u{1F7E4}", "brown circle"],
  ["\u26AB", "black circle"],
  ["\u26AA", "white circle"],
  ["\u{1F7E5}", "red square"],
  ["\u{1F7E7}", "orange square"],
  ["\u{1F7E8}", "yellow square"],
  ["\u{1F7E9}", "green square"],
  ["\u{1F7E6}", "blue square"],
  ["\u{1F7EA}", "purple square"],
  ["\u{1F7EB}", "brown square"],
  ["\u2B1B", "black large square"],
  ["\u2B1C", "white large square"],
  ["\u25FC\uFE0F", "black medium square"],
  ["\u25FB\uFE0F", "white medium square"],
  ["\u25FE", "black medium-small square"],
  ["\u25FD", "white medium-small square"],
  ["\u25AA\uFE0F", "black small square"],
  ["\u25AB\uFE0F", "white small square"],
  ["\u{1F536}", "large orange diamond"],
  ["\u{1F537}", "large blue diamond"],
  ["\u{1F538}", "small orange diamond"],
  ["\u{1F539}", "small blue diamond"],
  ["\u{1F53A}", "red triangle pointed up"],
  ["\u{1F53B}", "red triangle pointed down"],
  ["\u{1F4A0}", "diamond with a dot"],
  ["\u{1F518}", "radio button"],
  ["\u{1F533}", "white square button"],
  ["\u{1F532}", "black square button"],
  ["\u{1F3C1}", "chequered flag"],
  ["\u{1F6A9}", "triangular flag"],
  ["\u{1F38C}", "crossed flags"],
  ["\u{1F3F4}", "black flag"],
  ["\u{1F3F3}\uFE0F", "white flag"],
  ["\u{1F3F3}\uFE0F\u200D\u{1F308}", "rainbow flag"],
  ["\u{1F3F3}\uFE0F\u200D\u26A7\uFE0F", "transgender flag"],
  ["\u{1F3F4}\u200D\u2620\uFE0F", "pirate flag"],
  ["\u{1F1E6}\u{1F1E8}", "flag: Ascension Island"],
  ["\u{1F1E6}\u{1F1E9}", "flag: Andorra"],
  ["\u{1F1E6}\u{1F1EA}", "flag: United Arab Emirates"],
  ["\u{1F1E6}\u{1F1EB}", "flag: Afghanistan"],
  ["\u{1F1E6}\u{1F1EC}", "flag: Antigua & Barbuda"],
  ["\u{1F1E6}\u{1F1EE}", "flag: Anguilla"],
  ["\u{1F1E6}\u{1F1F1}", "flag: Albania"],
  ["\u{1F1E6}\u{1F1F2}", "flag: Armenia"],
  ["\u{1F1E6}\u{1F1F4}", "flag: Angola"],
  ["\u{1F1E6}\u{1F1F6}", "flag: Antarctica"],
  ["\u{1F1E6}\u{1F1F7}", "flag: Argentina"],
  ["\u{1F1E6}\u{1F1F8}", "flag: American Samoa"],
  ["\u{1F1E6}\u{1F1F9}", "flag: Austria"],
  ["\u{1F1E6}\u{1F1FA}", "flag: Australia"],
  ["\u{1F1E6}\u{1F1FC}", "flag: Aruba"],
  ["\u{1F1E6}\u{1F1FD}", "flag: \xC5land Islands"],
  ["\u{1F1E6}\u{1F1FF}", "flag: Azerbaijan"],
  ["\u{1F1E7}\u{1F1E6}", "flag: Bosnia & Herzegovina"],
  ["\u{1F1E7}\u{1F1E7}", "flag: Barbados"],
  ["\u{1F1E7}\u{1F1E9}", "flag: Bangladesh"],
  ["\u{1F1E7}\u{1F1EA}", "flag: Belgium"],
  ["\u{1F1E7}\u{1F1EB}", "flag: Burkina Faso"],
  ["\u{1F1E7}\u{1F1EC}", "flag: Bulgaria"],
  ["\u{1F1E7}\u{1F1ED}", "flag: Bahrain"],
  ["\u{1F1E7}\u{1F1EE}", "flag: Burundi"],
  ["\u{1F1E7}\u{1F1EF}", "flag: Benin"],
  ["\u{1F1E7}\u{1F1F1}", "flag: St. Barth\xE9lemy"],
  ["\u{1F1E7}\u{1F1F2}", "flag: Bermuda"],
  ["\u{1F1E7}\u{1F1F3}", "flag: Brunei"],
  ["\u{1F1E7}\u{1F1F4}", "flag: Bolivia"],
  ["\u{1F1E7}\u{1F1F6}", "flag: Caribbean Netherlands"],
  ["\u{1F1E7}\u{1F1F7}", "flag: Brazil"],
  ["\u{1F1E7}\u{1F1F8}", "flag: Bahamas"],
  ["\u{1F1E7}\u{1F1F9}", "flag: Bhutan"],
  ["\u{1F1E7}\u{1F1FB}", "flag: Bouvet Island"],
  ["\u{1F1E7}\u{1F1FC}", "flag: Botswana"],
  ["\u{1F1E7}\u{1F1FE}", "flag: Belarus"],
  ["\u{1F1E7}\u{1F1FF}", "flag: Belize"],
  ["\u{1F1E8}\u{1F1E6}", "flag: Canada"],
  ["\u{1F1E8}\u{1F1E8}", "flag: Cocos (Keeling) Islands"],
  ["\u{1F1E8}\u{1F1E9}", "flag: Congo - Kinshasa"],
  ["\u{1F1E8}\u{1F1EB}", "flag: Central African Republic"],
  ["\u{1F1E8}\u{1F1EC}", "flag: Congo - Brazzaville"],
  ["\u{1F1E8}\u{1F1ED}", "flag: Switzerland"],
  ["\u{1F1E8}\u{1F1EE}", "flag: C\xF4te d'Ivoire"],
  ["\u{1F1E8}\u{1F1F0}", "flag: Cook Islands"],
  ["\u{1F1E8}\u{1F1F1}", "flag: Chile"],
  ["\u{1F1E8}\u{1F1F2}", "flag: Cameroon"],
  ["\u{1F1E8}\u{1F1F3}", "flag: China"],
  ["\u{1F1E8}\u{1F1F4}", "flag: Colombia"],
  ["\u{1F1E8}\u{1F1F5}", "flag: Clipperton Island"],
  ["\u{1F1E8}\u{1F1F7}", "flag: Costa Rica"],
  ["\u{1F1E8}\u{1F1FA}", "flag: Cuba"],
  ["\u{1F1E8}\u{1F1FB}", "flag: Cape Verde"],
  ["\u{1F1E8}\u{1F1FC}", "flag: Cura\xE7ao"],
  ["\u{1F1E8}\u{1F1FD}", "flag: Christmas Island"],
  ["\u{1F1E8}\u{1F1FE}", "flag: Cyprus"],
  ["\u{1F1E8}\u{1F1FF}", "flag: Czechia"],
  ["\u{1F1E9}\u{1F1EA}", "flag: Germany"],
  ["\u{1F1E9}\u{1F1EC}", "flag: Diego Garcia"],
  ["\u{1F1E9}\u{1F1EF}", "flag: Djibouti"],
  ["\u{1F1E9}\u{1F1F0}", "flag: Denmark"],
  ["\u{1F1E9}\u{1F1F2}", "flag: Dominica"],
  ["\u{1F1E9}\u{1F1F4}", "flag: Dominican Republic"],
  ["\u{1F1E9}\u{1F1FF}", "flag: Algeria"],
  ["\u{1F1EA}\u{1F1E6}", "flag: Ceuta & Melilla"],
  ["\u{1F1EA}\u{1F1E8}", "flag: Ecuador"],
  ["\u{1F1EA}\u{1F1EA}", "flag: Estonia"],
  ["\u{1F1EA}\u{1F1EC}", "flag: Egypt"],
  ["\u{1F1EA}\u{1F1ED}", "flag: Western Sahara"],
  ["\u{1F1EA}\u{1F1F7}", "flag: Eritrea"],
  ["\u{1F1EA}\u{1F1F8}", "flag: Spain"],
  ["\u{1F1EA}\u{1F1F9}", "flag: Ethiopia"],
  ["\u{1F1EA}\u{1F1FA}", "flag: European Union"],
  ["\u{1F1EB}\u{1F1EE}", "flag: Finland"],
  ["\u{1F1EB}\u{1F1EF}", "flag: Fiji"],
  ["\u{1F1EB}\u{1F1F0}", "flag: Falkland Islands"],
  ["\u{1F1EB}\u{1F1F2}", "flag: Micronesia"],
  ["\u{1F1EB}\u{1F1F4}", "flag: Faroe Islands"],
  ["\u{1F1EB}\u{1F1F7}", "flag: France"],
  ["\u{1F1EC}\u{1F1E6}", "flag: Gabon"],
  ["\u{1F1EC}\u{1F1E7}", "flag: United Kingdom"],
  ["\u{1F1EC}\u{1F1E9}", "flag: Grenada"],
  ["\u{1F1EC}\u{1F1EA}", "flag: Georgia"],
  ["\u{1F1EC}\u{1F1EB}", "flag: French Guiana"],
  ["\u{1F1EC}\u{1F1EC}", "flag: Guernsey"],
  ["\u{1F1EC}\u{1F1ED}", "flag: Ghana"],
  ["\u{1F1EC}\u{1F1EE}", "flag: Gibraltar"],
  ["\u{1F1EC}\u{1F1F1}", "flag: Greenland"],
  ["\u{1F1EC}\u{1F1F2}", "flag: Gambia"],
  ["\u{1F1EC}\u{1F1F3}", "flag: Guinea"],
  ["\u{1F1EC}\u{1F1F5}", "flag: Guadeloupe"],
  ["\u{1F1EC}\u{1F1F6}", "flag: Equatorial Guinea"],
  ["\u{1F1EC}\u{1F1F7}", "flag: Greece"],
  ["\u{1F1EC}\u{1F1F8}", "flag: South Georgia & South Sandwich Islands"],
  ["\u{1F1EC}\u{1F1F9}", "flag: Guatemala"],
  ["\u{1F1EC}\u{1F1FA}", "flag: Guam"],
  ["\u{1F1EC}\u{1F1FC}", "flag: Guinea-Bissau"],
  ["\u{1F1EC}\u{1F1FE}", "flag: Guyana"],
  ["\u{1F1ED}\u{1F1F0}", "flag: Hong Kong SAR China"],
  ["\u{1F1ED}\u{1F1F2}", "flag: Heard & McDonald Islands"],
  ["\u{1F1ED}\u{1F1F3}", "flag: Honduras"],
  ["\u{1F1ED}\u{1F1F7}", "flag: Croatia"],
  ["\u{1F1ED}\u{1F1F9}", "flag: Haiti"],
  ["\u{1F1ED}\u{1F1FA}", "flag: Hungary"],
  ["\u{1F1EE}\u{1F1E8}", "flag: Canary Islands"],
  ["\u{1F1EE}\u{1F1E9}", "flag: Indonesia"],
  ["\u{1F1EE}\u{1F1EA}", "flag: Ireland"],
  ["\u{1F1EE}\u{1F1F1}", "flag: Israel"],
  ["\u{1F1EE}\u{1F1F2}", "flag: Isle of Man"],
  ["\u{1F1EE}\u{1F1F3}", "flag: India"],
  ["\u{1F1EE}\u{1F1F4}", "flag: British Indian Ocean Territory"],
  ["\u{1F1EE}\u{1F1F6}", "flag: Iraq"],
  ["\u{1F1EE}\u{1F1F7}", "flag: Iran"],
  ["\u{1F1EE}\u{1F1F8}", "flag: Iceland"],
  ["\u{1F1EE}\u{1F1F9}", "flag: Italy"],
  ["\u{1F1EF}\u{1F1EA}", "flag: Jersey"],
  ["\u{1F1EF}\u{1F1F2}", "flag: Jamaica"],
  ["\u{1F1EF}\u{1F1F4}", "flag: Jordan"],
  ["\u{1F1EF}\u{1F1F5}", "flag: Japan"],
  ["\u{1F1F0}\u{1F1EA}", "flag: Kenya"],
  ["\u{1F1F0}\u{1F1EC}", "flag: Kyrgyzstan"],
  ["\u{1F1F0}\u{1F1ED}", "flag: Cambodia"],
  ["\u{1F1F0}\u{1F1EE}", "flag: Kiribati"],
  ["\u{1F1F0}\u{1F1F2}", "flag: Comoros"],
  ["\u{1F1F0}\u{1F1F3}", "flag: St. Kitts & Nevis"],
  ["\u{1F1F0}\u{1F1F5}", "flag: North Korea"],
  ["\u{1F1F0}\u{1F1F7}", "flag: South Korea"],
  ["\u{1F1F0}\u{1F1FC}", "flag: Kuwait"],
  ["\u{1F1F0}\u{1F1FE}", "flag: Cayman Islands"],
  ["\u{1F1F0}\u{1F1FF}", "flag: Kazakhstan"],
  ["\u{1F1F1}\u{1F1E6}", "flag: Laos"],
  ["\u{1F1F1}\u{1F1E7}", "flag: Lebanon"],
  ["\u{1F1F1}\u{1F1E8}", "flag: St. Lucia"],
  ["\u{1F1F1}\u{1F1EE}", "flag: Liechtenstein"],
  ["\u{1F1F1}\u{1F1F0}", "flag: Sri Lanka"],
  ["\u{1F1F1}\u{1F1F7}", "flag: Liberia"],
  ["\u{1F1F1}\u{1F1F8}", "flag: Lesotho"],
  ["\u{1F1F1}\u{1F1F9}", "flag: Lithuania"],
  ["\u{1F1F1}\u{1F1FA}", "flag: Luxembourg"],
  ["\u{1F1F1}\u{1F1FB}", "flag: Latvia"],
  ["\u{1F1F1}\u{1F1FE}", "flag: Libya"],
  ["\u{1F1F2}\u{1F1E6}", "flag: Morocco"],
  ["\u{1F1F2}\u{1F1E8}", "flag: Monaco"],
  ["\u{1F1F2}\u{1F1E9}", "flag: Moldova"],
  ["\u{1F1F2}\u{1F1EA}", "flag: Montenegro"],
  ["\u{1F1F2}\u{1F1EB}", "flag: St. Martin"],
  ["\u{1F1F2}\u{1F1EC}", "flag: Madagascar"],
  ["\u{1F1F2}\u{1F1ED}", "flag: Marshall Islands"],
  ["\u{1F1F2}\u{1F1F0}", "flag: North Macedonia"],
  ["\u{1F1F2}\u{1F1F1}", "flag: Mali"],
  ["\u{1F1F2}\u{1F1F2}", "flag: Myanmar (Burma)"],
  ["\u{1F1F2}\u{1F1F3}", "flag: Mongolia"],
  ["\u{1F1F2}\u{1F1F4}", "flag: Macao SAR China"],
  ["\u{1F1F2}\u{1F1F5}", "flag: Northern Mariana Islands"],
  ["\u{1F1F2}\u{1F1F6}", "flag: Martinique"],
  ["\u{1F1F2}\u{1F1F7}", "flag: Mauritania"],
  ["\u{1F1F2}\u{1F1F8}", "flag: Montserrat"],
  ["\u{1F1F2}\u{1F1F9}", "flag: Malta"],
  ["\u{1F1F2}\u{1F1FA}", "flag: Mauritius"],
  ["\u{1F1F2}\u{1F1FB}", "flag: Maldives"],
  ["\u{1F1F2}\u{1F1FC}", "flag: Malawi"],
  ["\u{1F1F2}\u{1F1FD}", "flag: Mexico"],
  ["\u{1F1F2}\u{1F1FE}", "flag: Malaysia"],
  ["\u{1F1F2}\u{1F1FF}", "flag: Mozambique"],
  ["\u{1F1F3}\u{1F1E6}", "flag: Namibia"],
  ["\u{1F1F3}\u{1F1E8}", "flag: New Caledonia"],
  ["\u{1F1F3}\u{1F1EA}", "flag: Niger"],
  ["\u{1F1F3}\u{1F1EB}", "flag: Norfolk Island"],
  ["\u{1F1F3}\u{1F1EC}", "flag: Nigeria"],
  ["\u{1F1F3}\u{1F1EE}", "flag: Nicaragua"],
  ["\u{1F1F3}\u{1F1F1}", "flag: Netherlands"],
  ["\u{1F1F3}\u{1F1F4}", "flag: Norway"],
  ["\u{1F1F3}\u{1F1F5}", "flag: Nepal"],
  ["\u{1F1F3}\u{1F1F7}", "flag: Nauru"],
  ["\u{1F1F3}\u{1F1FA}", "flag: Niue"],
  ["\u{1F1F3}\u{1F1FF}", "flag: New Zealand"],
  ["\u{1F1F4}\u{1F1F2}", "flag: Oman"],
  ["\u{1F1F5}\u{1F1E6}", "flag: Panama"],
  ["\u{1F1F5}\u{1F1EA}", "flag: Peru"],
  ["\u{1F1F5}\u{1F1EB}", "flag: French Polynesia"],
  ["\u{1F1F5}\u{1F1EC}", "flag: Papua New Guinea"],
  ["\u{1F1F5}\u{1F1ED}", "flag: Philippines"],
  ["\u{1F1F5}\u{1F1F0}", "flag: Pakistan"],
  ["\u{1F1F5}\u{1F1F1}", "flag: Poland"],
  ["\u{1F1F5}\u{1F1F2}", "flag: St. Pierre & Miquelon"],
  ["\u{1F1F5}\u{1F1F3}", "flag: Pitcairn Islands"],
  ["\u{1F1F5}\u{1F1F7}", "flag: Puerto Rico"],
  ["\u{1F1F5}\u{1F1F8}", "flag: Palestinian Territories"],
  ["\u{1F1F5}\u{1F1F9}", "flag: Portugal"],
  ["\u{1F1F5}\u{1F1FC}", "flag: Palau"],
  ["\u{1F1F5}\u{1F1FE}", "flag: Paraguay"],
  ["\u{1F1F6}\u{1F1E6}", "flag: Qatar"],
  ["\u{1F1F7}\u{1F1EA}", "flag: R\xE9union"],
  ["\u{1F1F7}\u{1F1F4}", "flag: Romania"],
  ["\u{1F1F7}\u{1F1F8}", "flag: Serbia"],
  ["\u{1F1F7}\u{1F1FA}", "flag: Russia"],
  ["\u{1F1F7}\u{1F1FC}", "flag: Rwanda"],
  ["\u{1F1F8}\u{1F1E6}", "flag: Saudi Arabia"],
  ["\u{1F1F8}\u{1F1E7}", "flag: Solomon Islands"],
  ["\u{1F1F8}\u{1F1E8}", "flag: Seychelles"],
  ["\u{1F1F8}\u{1F1E9}", "flag: Sudan"],
  ["\u{1F1F8}\u{1F1EA}", "flag: Sweden"],
  ["\u{1F1F8}\u{1F1EC}", "flag: Singapore"],
  ["\u{1F1F8}\u{1F1ED}", "flag: St. Helena"],
  ["\u{1F1F8}\u{1F1EE}", "flag: Slovenia"],
  ["\u{1F1F8}\u{1F1EF}", "flag: Svalbard & Jan Mayen"],
  ["\u{1F1F8}\u{1F1F0}", "flag: Slovakia"],
  ["\u{1F1F8}\u{1F1F1}", "flag: Sierra Leone"],
  ["\u{1F1F8}\u{1F1F2}", "flag: San Marino"],
  ["\u{1F1F8}\u{1F1F3}", "flag: Senegal"],
  ["\u{1F1F8}\u{1F1F4}", "flag: Somalia"],
  ["\u{1F1F8}\u{1F1F7}", "flag: Suriname"],
  ["\u{1F1F8}\u{1F1F8}", "flag: South Sudan"],
  ["\u{1F1F8}\u{1F1F9}", "flag: S\xE3o Tom\xE9 & Pr\xEDncipe"],
  ["\u{1F1F8}\u{1F1FB}", "flag: El Salvador"],
  ["\u{1F1F8}\u{1F1FD}", "flag: Sint Maarten"],
  ["\u{1F1F8}\u{1F1FE}", "flag: Syria"],
  ["\u{1F1F8}\u{1F1FF}", "flag: Eswatini"],
  ["\u{1F1F9}\u{1F1E6}", "flag: Tristan da Cunha"],
  ["\u{1F1F9}\u{1F1E8}", "flag: Turks & Caicos Islands"],
  ["\u{1F1F9}\u{1F1E9}", "flag: Chad"],
  ["\u{1F1F9}\u{1F1EB}", "flag: French Southern Territories"],
  ["\u{1F1F9}\u{1F1EC}", "flag: Togo"],
  ["\u{1F1F9}\u{1F1ED}", "flag: Thailand"],
  ["\u{1F1F9}\u{1F1EF}", "flag: Tajikistan"],
  ["\u{1F1F9}\u{1F1F0}", "flag: Tokelau"],
  ["\u{1F1F9}\u{1F1F1}", "flag: Timor-Leste"],
  ["\u{1F1F9}\u{1F1F2}", "flag: Turkmenistan"],
  ["\u{1F1F9}\u{1F1F3}", "flag: Tunisia"],
  ["\u{1F1F9}\u{1F1F4}", "flag: Tonga"],
  ["\u{1F1F9}\u{1F1F7}", "flag: T\xFCrkiye"],
  ["\u{1F1F9}\u{1F1F9}", "flag: Trinidad & Tobago"],
  ["\u{1F1F9}\u{1F1FB}", "flag: Tuvalu"],
  ["\u{1F1F9}\u{1F1FC}", "flag: Taiwan"],
  ["\u{1F1F9}\u{1F1FF}", "flag: Tanzania"],
  ["\u{1F1FA}\u{1F1E6}", "flag: Ukraine"],
  ["\u{1F1FA}\u{1F1EC}", "flag: Uganda"],
  ["\u{1F1FA}\u{1F1F2}", "flag: U.S. Outlying Islands"],
  ["\u{1F1FA}\u{1F1F3}", "flag: United Nations"],
  ["\u{1F1FA}\u{1F1F8}", "flag: United States"],
  ["\u{1F1FA}\u{1F1FE}", "flag: Uruguay"],
  ["\u{1F1FA}\u{1F1FF}", "flag: Uzbekistan"],
  ["\u{1F1FB}\u{1F1E6}", "flag: Vatican City"],
  ["\u{1F1FB}\u{1F1E8}", "flag: St. Vincent & Grenadines"],
  ["\u{1F1FB}\u{1F1EA}", "flag: Venezuela"],
  ["\u{1F1FB}\u{1F1EC}", "flag: British Virgin Islands"],
  ["\u{1F1FB}\u{1F1EE}", "flag: U.S. Virgin Islands"],
  ["\u{1F1FB}\u{1F1F3}", "flag: Vietnam"],
  ["\u{1F1FB}\u{1F1FA}", "flag: Vanuatu"],
  ["\u{1F1FC}\u{1F1EB}", "flag: Wallis & Futuna"],
  ["\u{1F1FC}\u{1F1F8}", "flag: Samoa"],
  ["\u{1F1FD}\u{1F1F0}", "flag: Kosovo"],
  ["\u{1F1FE}\u{1F1EA}", "flag: Yemen"],
  ["\u{1F1FE}\u{1F1F9}", "flag: Mayotte"],
  ["\u{1F1FF}\u{1F1E6}", "flag: South Africa"],
  ["\u{1F1FF}\u{1F1F2}", "flag: Zambia"],
  ["\u{1F1FF}\u{1F1FC}", "flag: Zimbabwe"],
  ["\u{1F3F4}\u{E0067}\u{E0062}\u{E0065}\u{E006E}\u{E0067}\u{E007F}", "flag: England"],
  ["\u{1F3F4}\u{E0067}\u{E0062}\u{E0073}\u{E0063}\u{E0074}\u{E007F}", "flag: Scotland"],
  ["\u{1F3F4}\u{E0067}\u{E0062}\u{E0077}\u{E006C}\u{E0073}\u{E007F}", "flag: Wales"]
]);

// src/Strings.ts
var _Strings = class {
  /**
   * Dynamically import strings for the current language.
   */
  static async localize() {
    let localizedStrings;
    switch (window.localStorage.language) {
      case "ar":
        localizedStrings = await Promise.resolve().then(() => __toESM(require_ar()));
        break;
      case "de":
        localizedStrings = await Promise.resolve().then(() => __toESM(require_de()));
        break;
      case "es":
        localizedStrings = await Promise.resolve().then(() => __toESM(require_es()));
        break;
      case "fr":
        localizedStrings = await Promise.resolve().then(() => __toESM(require_fr()));
        break;
      case "id":
        localizedStrings = await Promise.resolve().then(() => __toESM(require_id()));
        break;
      case "ja":
        localizedStrings = await Promise.resolve().then(() => __toESM(require_ja()));
        break;
      case "ru":
        localizedStrings = await Promise.resolve().then(() => __toESM(require_ru()));
        break;
      case "zh":
        localizedStrings = await Promise.resolve().then(() => __toESM(require_zh()));
        break;
      default:
        return;
    }
    this.localizeDefaultStrings(this, localizedStrings);
  }
  /**
   * Replace default strings with localized strings.
   * Strings and their keys are always type-safe, even if the localized JSON is incomplete or broken.
   */
  static localizeDefaultStrings(defaultStrings, localizedStrings) {
    for (const [key, value] of Object.entries(localizedStrings)) {
      if (typeof defaultStrings[key] === "object") {
        if (typeof value === "object") {
          this.localizeDefaultStrings(defaultStrings[key], value);
        }
      } else if (typeof value === "string") {
        defaultStrings[key] = value;
      }
    }
  }
};
var Strings = _Strings;
Strings.appItems = {
  help: "Open help",
  settings: "Open settings",
  pin: "Toggle pin",
  sidebarLeft: "Toggle left sidebar",
  sidebarRight: "Toggle right sidebar"
};
Strings.menu = {
  changeIcon: "Change icon...",
  changeIcons: "Change {#} icons...",
  removeIcon: "Remove icon",
  removeIcons: "Remove {#} icons",
  resetColor: "Reset color",
  resetColors: "Reset {#} colors"
};
Strings.iconPicker = {
  changeIcon: "Change icon",
  changeIcons: "Change {#} icons",
  changeEmoji: "Change emoji",
  changeEmojis: "Change {#} emojis",
  search: "Search",
  searchIcons: "Search icons...",
  searchEmojis: "Search emojis...",
  changeColor: "Change color",
  resetColor: "Reset color",
  remove: "Remove",
  removeIcons: "Remove {#} icons",
  icons: "Icons",
  emojis: "Emojis",
  save: "Save",
  saveIcons: "Save {#} icons",
  cancel: "Cancel",
  colors: {
    red: "Red",
    orange: "Orange",
    yellow: "Yellow",
    green: "Green",
    cyan: "Cyan",
    blue: "Blue",
    purple: "Purple",
    pink: "Pink",
    gray: "Gray"
  }
};
Strings.categories = {
  item: "Item",
  items: "Items",
  appItem: "Button",
  appItems: "Buttons",
  tab: "Tab",
  tabs: "Tabs",
  file: "File",
  files: "Files",
  folder: "Folder",
  folders: "Folders",
  group: "Group",
  groups: "Groups",
  search: "Query",
  searches: "Queries",
  graph: "Graph",
  graphs: "Graphs",
  url: "URL",
  urls: "URLs",
  property: "Property",
  properties: "Properties",
  ribbonItem: "Ribbon command",
  ribbonItems: "Ribbon commands"
};
Strings.commands = {
  toggleBiggerIcons: "Toggle bigger icons",
  toggleClickableIcons: {
    desktop: "Toggle clickable icons",
    mobile: "Toggle tappable icons"
  },
  toggleAllFileIcons: "Toggle all file icons",
  toggleBiggerSearchResults: "Toggle bigger search results"
};
Strings.settings = {
  values: {
    on: "On",
    off: "Off",
    desktop: "Desktop only",
    mobile: "Mobile only",
    list: "List of colors",
    rgb: "RGB picker"
  },
  headingListsAndTabs: "List & tab icons",
  biggerIcons: {
    name: "Bigger icons",
    desc: "Show bigger icons than the default UI."
  },
  clickableIcons: {
    nameDesktop: "Clickable icons",
    nameMobile: "Tappable icons",
    descDesktop: "Click an icon to open the icon picker.",
    descMobile: "Tap an icon to open the icon picker."
  },
  showAllFileIcons: {
    name: "Show all file icons",
    desc: "Always show a default icon for files without an icon."
  },
  headingIconPicker: "Icon picker",
  showItemName: {
    name: "Show item name",
    desc: "Show the name of the item being edited."
  },
  biggerSearchResults: {
    name: "Bigger search results",
    desc: "Show bigger icons in search results."
  },
  maxSearchResults: {
    name: "Maximum search results",
    desc: "Choose how many icons to show at once."
  },
  colorPicker1: {
    name: "Main color picker",
    descDesktop: "Appears when you click the color bubble.",
    descMobile: "Appears when you tap the color bubble."
  },
  colorPicker2: {
    name: "Second color picker",
    descDesktop: "Appears when you secondary-click the color bubble.",
    descMobile: "Appears when you press & hold the color bubble."
  },
  headingAdvanced: "Advanced",
  uncolorHover: {
    name: "Uncolored hover",
    desc: "Disable icon color while hovering an item."
  },
  uncolorSelect: {
    name: "Uncolored selection",
    desc: "Disable icon color while item is selected."
  },
  rememberDeletedItems: {
    name: "Remember icons of deleted items",
    desc: "Any custom icons will reappear when their item exists again."
  }
};
(() => {
  _Strings.localize();
})();

// src/IconicPlugin.ts
var ICONS = /* @__PURE__ */ new Map();
var KNOWN_TYPES = ["image", "audio", "video", "pdf", "unsupported"];
var IMAGE_EXTENSIONS = ["bmp", "png", "jpg", "jpeg", "gif", "svg", "webp", "avif"];
var AUDIO_EXTENSIONS = ["mp3", "wav", "m4a", "3gp", "flac", "ogg", "oga", "opus"];
var VIDEO_EXTENSIONS = ["mp4", "webm", "ogv", "mov", "mkv"];
var KNOWN_EXTENSIONS = ["md", "canvas", "pdf"].concat(IMAGE_EXTENSIONS).concat(AUDIO_EXTENSIONS).concat(VIDEO_EXTENSIONS);
var DEFAULT_SETTINGS = {
  biggerIcons: "mobile",
  clickableIcons: "desktop",
  showAllFileIcons: false,
  showItemName: "desktop",
  biggerSearchResults: "mobile",
  maxSearchResults: 50,
  colorPicker1: "list",
  colorPicker2: "rgb",
  uncolorHover: false,
  uncolorSelect: false,
  rememberDeletedItems: false,
  appIcons: {},
  tabIcons: {},
  fileIcons: {},
  bookmarkIcons: {},
  propertyIcons: {},
  ribbonIcons: {}
};
var IconicPlugin11 = class extends import_obsidian9.Plugin {
  constructor() {
    super(...arguments);
    this.commands = [];
  }
  /**
   * @override
   */
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new IconicSettingTab(this));
    this.app.workspace.onLayoutReady(() => {
      (0, import_obsidian9.getIconIds)().map((id) => [id, id.replace(/^lucide-/, "").replace(/-/g, " ")]).sort(([, aName], [, bName]) => aName.localeCompare(bName)).forEach(([id, name]) => ICONS.set(id, name));
      this.startIconManagers();
      this.refreshBodyClasses();
    });
    this.registerEvent(this.app.workspace.on("css-change", () => {
      this.refreshIconManagers();
      this.refreshBodyClasses();
    }));
    this.registerEvent(this.app.vault.on("rename", ({ path }, oldPath) => {
      const fileIcon = this.settings.fileIcons[oldPath];
      if (fileIcon) {
        this.settings.fileIcons[path] = fileIcon;
        delete this.settings.fileIcons[oldPath];
        this.saveSettings();
        this.fileIconManager?.refreshIcons();
        this.bookmarkIconManager?.refreshIcons();
      }
    }));
    this.registerEvent(this.app.vault.on("delete", ({ path }) => {
      if (this.settings.rememberDeletedItems === false) {
        delete this.settings.fileIcons[path];
        this.saveSettings();
        this.fileIconManager?.refreshIcons();
        this.bookmarkIconManager?.refreshIcons();
      }
    }));
    this.commands.push(this.addCommand({
      id: "toggle-bigger-icons",
      name: Strings.commands.toggleBiggerIcons,
      callback: () => {
        if (import_obsidian9.Platform.isDesktop) {
          if (this.settings.biggerIcons === "on")
            this.settings.biggerIcons = "mobile";
          else if (this.settings.biggerIcons === "desktop")
            this.settings.biggerIcons = "off";
          else if (this.settings.biggerIcons === "mobile")
            this.settings.biggerIcons = "on";
          else if (this.settings.biggerIcons === "off")
            this.settings.biggerIcons = "desktop";
        } else {
          if (this.settings.biggerIcons === "on")
            this.settings.biggerIcons = "desktop";
          else if (this.settings.biggerIcons === "desktop")
            this.settings.biggerIcons = "on";
          else if (this.settings.biggerIcons === "mobile")
            this.settings.biggerIcons = "off";
          else if (this.settings.biggerIcons === "off")
            this.settings.biggerIcons = "mobile";
        }
        this.saveSettings();
        this.refreshBodyClasses();
      }
    }));
    this.commands.push(this.addCommand({
      id: "toggle-clickable-icons",
      name: import_obsidian9.Platform.isDesktop ? Strings.commands.toggleClickableIcons.desktop : Strings.commands.toggleClickableIcons.mobile,
      callback: () => {
        if (import_obsidian9.Platform.isDesktop) {
          if (this.settings.clickableIcons === "on")
            this.settings.clickableIcons = "mobile";
          else if (this.settings.clickableIcons === "desktop")
            this.settings.clickableIcons = "off";
          else if (this.settings.clickableIcons === "mobile")
            this.settings.clickableIcons = "on";
          else if (this.settings.clickableIcons === "off")
            this.settings.clickableIcons = "desktop";
        } else {
          if (this.settings.clickableIcons === "on")
            this.settings.clickableIcons = "desktop";
          else if (this.settings.clickableIcons === "desktop")
            this.settings.clickableIcons = "on";
          else if (this.settings.clickableIcons === "mobile")
            this.settings.clickableIcons = "off";
          else if (this.settings.clickableIcons === "off")
            this.settings.clickableIcons = "mobile";
        }
        this.saveSettings();
        this.refreshIconManagers();
        this.refreshBodyClasses();
      }
    }));
    this.commands.push(this.addCommand({
      id: "toggle-all-file-icons",
      name: Strings.commands.toggleAllFileIcons,
      callback: () => {
        this.settings.showAllFileIcons = !this.settings.showAllFileIcons;
        this.saveSettings();
        this.tabIconManager?.refreshIcons();
        this.fileIconManager?.refreshIcons();
      }
    }));
    this.commands.push(this.addCommand({
      id: "toggle-bigger-search-results",
      name: Strings.commands.toggleBiggerSearchResults,
      callback: () => {
        if (import_obsidian9.Platform.isDesktop) {
          if (this.settings.biggerSearchResults === "on")
            this.settings.biggerSearchResults = "mobile";
          else if (this.settings.biggerSearchResults === "desktop")
            this.settings.biggerSearchResults = "off";
          else if (this.settings.biggerSearchResults === "mobile")
            this.settings.biggerSearchResults = "on";
          else if (this.settings.biggerSearchResults === "off")
            this.settings.biggerSearchResults = "desktop";
        } else {
          if (this.settings.biggerSearchResults === "on")
            this.settings.biggerSearchResults = "desktop";
          else if (this.settings.biggerSearchResults === "desktop")
            this.settings.biggerSearchResults = "on";
          else if (this.settings.biggerSearchResults === "mobile")
            this.settings.biggerSearchResults = "off";
          else if (this.settings.biggerSearchResults === "off")
            this.settings.biggerSearchResults = "mobile";
        }
        this.saveSettings();
        this.refreshBodyClasses();
      }
    }));
  }
  /**
   * @override
   */
  async onExternalSettingsChange() {
    await this.loadSettings();
    this.refreshIconManagers();
    this.refreshBodyClasses();
  }
  /**
   * Initialize all icon managers.
   */
  startIconManagers() {
    this.menuManager = new MenuManager();
    this.appIconManager = new AppIconManager(this);
    this.tabIconManager = new TabIconManager(this);
    this.fileIconManager = new FileIconManager(this);
    this.bookmarkIconManager = new BookmarkIconManager(this);
    this.propertyIconManager = new PropertyIconManager(this);
    this.editorIconManager = new EditorIconManager(this);
    this.ribbonIconManager = new RibbonIconManager(this);
  }
  /**
   * Refresh all icon managers.
   */
  refreshIconManagers() {
    this.appIconManager?.refreshIcons();
    this.tabIconManager?.refreshIcons();
    this.fileIconManager?.refreshIcons();
    this.bookmarkIconManager?.refreshIcons();
    this.propertyIconManager?.refreshIcons();
    this.editorIconManager?.refreshIcons();
    this.ribbonIconManager?.refreshIcons();
  }
  /**
   * Refresh any global classes on document body.
   * @param unloading Remove all classes if true
   */
  refreshBodyClasses(unloading) {
    activeDocument.body.toggleClass("iconic-bigger-icons", unloading ? false : this.isSettingEnabled("biggerIcons"));
    activeDocument.body.toggleClass("iconic-clickable-icons", unloading ? false : this.isSettingEnabled("clickableIcons"));
    activeDocument.body.toggleClass("iconic-bigger-search-results", unloading ? false : this.isSettingEnabled("biggerSearchResults"));
    activeDocument.body.toggleClass("iconic-uncolor-hover", unloading ? false : this.settings.uncolorHover);
    activeDocument.body.toggleClass("iconic-uncolor-select", unloading ? false : this.settings.uncolorSelect);
    activeDocument.body.toggleClass("iconic-its-theme", unloading ? false : this.app.customCss?.theme === "ITS Theme");
  }
  /**
   * Check whether setting is enabled for the current platform.
   */
  isSettingEnabled(setting) {
    const state = this.settings[setting];
    return state === "on" || import_obsidian9.Platform.isDesktop && state === "desktop" || import_obsidian9.Platform.isMobile && state === "mobile";
  }
  /**
   * Get app item definition.
   */
  getAppItem(appItemId, unloading) {
    const appIcon = this.settings.appIcons[appItemId] ?? {};
    let name, iconDefault;
    switch (appItemId) {
      case "help": {
        name = Strings.appItems.help;
        iconDefault = "help";
        break;
      }
      case "settings": {
        name = Strings.appItems.settings;
        iconDefault = "lucide-settings";
        break;
      }
      case "pin": {
        name = Strings.appItems.pin;
        iconDefault = "lucide-pin";
        break;
      }
      case "sidebarLeft": {
        name = Strings.appItems.sidebarLeft;
        iconDefault = "sidebar-left";
        break;
      }
      case "sidebarRight": {
        name = Strings.appItems.sidebarRight;
        iconDefault = "sidebar-right";
        break;
      }
    }
    return {
      id: appItemId,
      name: name ?? null,
      category: "app",
      iconDefault: iconDefault ?? null,
      icon: unloading ? null : appIcon.icon ?? null,
      color: unloading ? null : appIcon.color ?? null
    };
  }
  /**
   * Get array of tab definitions.
   */
  getTabItems(unloading) {
    const tabIcons = [];
    this.app.workspace.iterateAllLeaves((leaf) => {
      tabIcons.push(this.defineTabItem(leaf, unloading));
    });
    return tabIcons;
  }
  /**
   * Get tab definition.
   */
  getTabItem(tabId, unloading) {
    let tab = null;
    this.app.workspace.iterateAllLeaves((leaf) => {
      if (leaf.view.getViewType() === tabId || leaf.view instanceof import_obsidian9.FileView && leaf.view.file?.path === tabId && leaf.view.allowNoFile === false) {
        tab = this.defineTabItem(leaf, unloading);
      }
    });
    return tab;
  }
  /**
   * Create tab definition.
   */
  defineTabItem(leaf, unloading) {
    let iconEl = leaf.tabHeaderInnerIconEl;
    if (import_obsidian9.Platform.isMobile) {
      if (leaf.containerEl?.parentElement === this.app.workspace.leftSplit.activeTabContentEl) {
        iconEl = this.app.workspace.leftSplit.activeTabIconEl;
      } else if (leaf.containerEl?.parentElement === this.app.workspace.rightSplit.activeTabContentEl) {
        iconEl = this.app.workspace.rightSplit.activeTabIconEl;
      }
    }
    const isStacked = leaf.parent?.isStacked === true;
    if (leaf.view instanceof import_obsidian9.FileView && leaf.view.file && leaf.view.allowNoFile === false) {
      const fileId = leaf.view.file.path;
      const fileIcon = this.settings.fileIcons[fileId] ?? {};
      const isRoot = leaf.parent?.parent === this.app.workspace.rootSplit;
      const isMarkdown = leaf.view.getViewType() === "markdown";
      return {
        id: fileId,
        name: leaf.getDisplayText(),
        category: "file",
        iconDefault: isRoot && isMarkdown && !isStacked && !fileIcon.color && !this.settings.showAllFileIcons ? null : leaf.view.getIcon(),
        icon: unloading ? null : fileIcon.icon ?? null,
        color: unloading ? null : fileIcon.color ?? null,
        isFile: true,
        isRoot,
        iconEl: iconEl ?? null,
        // @ts-expect-error (Private API)
        tabEl: leaf.tabHeaderEl ?? null
      };
    } else {
      const tabId = leaf.view.getViewType();
      const tabIcon = this.settings.tabIcons[tabId] ?? {};
      let iconDefault;
      switch (tabId) {
        case "empty":
          iconDefault = isStacked ? leaf.view.getIcon() : null;
          break;
        case "release-notes":
          iconDefault = unloading ? leaf.view.getIcon() : "lucide-sparkle";
          break;
        default:
          iconDefault = leaf.view.getIcon();
          break;
      }
      return {
        id: tabId,
        name: leaf.getDisplayText(),
        category: "tab",
        iconDefault,
        icon: unloading ? null : tabIcon.icon ?? null,
        color: unloading ? null : tabIcon.color ?? null,
        isFile: false,
        // @ts-expect-error (Private API)
        isRoot: leaf.parent?.parent === this.app.workspace.rootSplit,
        iconEl: iconEl ?? null,
        // @ts-expect-error (Private API)
        tabEl: leaf.tabHeaderEl ?? null
      };
    }
  }
  /**
   * Get array of file definitions.
   */
  getFileItems(unloading) {
    const tFiles = this.app.vault.getAllLoadedFiles();
    const rootFolder = tFiles.find((tFile) => tFile.path === "/");
    if (rootFolder)
      tFiles.remove(rootFolder);
    return tFiles.map((tFile) => this.defineFileItem(tFile, tFile.path, unloading));
  }
  /**
   * Get file definition.
   */
  getFileItem(fileId, unloading) {
    const { path } = this.splitFilePath(fileId);
    const tFile = this.app.vault.getAbstractFileByPath(path);
    return this.defineFileItem(tFile, fileId, unloading);
  }
  /**
   * Create file definition.
   */
  defineFileItem(tFile, fileId, unloading) {
    const { filename, basename, extension } = this.splitFilePath(fileId);
    const fileIcon = this.settings.fileIcons[fileId] ?? {};
    let iconDefault = null;
    if (tFile instanceof import_obsidian9.TFile && (fileIcon.color || this.settings.showAllFileIcons)) {
      if (extension === "canvas") {
        iconDefault = "lucide-layout-dashboard";
      } else if (extension === "pdf") {
        iconDefault = "lucide-file-text";
      } else if (IMAGE_EXTENSIONS.includes(extension)) {
        iconDefault = "lucide-image";
      } else if (AUDIO_EXTENSIONS.includes(extension)) {
        iconDefault = "lucide-file-audio";
      } else {
        iconDefault = "lucide-file";
      }
    }
    return {
      id: fileId,
      name: extension === "md" ? basename : filename,
      category: tFile instanceof import_obsidian9.TFolder ? "folder" : "file",
      iconDefault: unloading ? null : iconDefault,
      icon: unloading ? null : fileIcon.icon ?? null,
      color: unloading ? null : fileIcon.color ?? null,
      items: tFile instanceof import_obsidian9.TFolder ? tFile.children.map((tChild) => this.defineFileItem(tChild, tChild.path, unloading)) : null
    };
  }
  /**
   * Split a filepath into its hierarchical components.
   */
  splitFilePath(fileId = "") {
    const subpathExts = ["md", "pdf"];
    const subpathStart = Math.max(...subpathExts.map((ext) => {
      const index = fileId.lastIndexOf(`.${ext}#`);
      return index > -1 ? index + ext.length + 1 : -1;
    }));
    const subpath = subpathStart > -1 ? fileId.substring(subpathStart, fileId.length) : "";
    const path = subpathStart > -1 ? fileId.substring(0, subpathStart) : fileId;
    const [, tree = "", filename] = path.match(/^(.*\/)?(.*)$/) ?? [];
    const extensionStart = filename.lastIndexOf(".");
    const extension = filename.substring(extensionStart > -1 ? extensionStart + 1 : filename.length) || "";
    const basename = filename.substring(0, extensionStart > -1 ? extensionStart : filename.length - 1) || "";
    return { path, tree, filename, basename, extension, subpath };
  }
  /**
   * Get array of bookmark definitions.
   */
  getBookmarkItems(unloading) {
    const bmarkBases = this.app.internalPlugins?.plugins?.bookmarks?.instance?.items ?? [];
    return bmarkBases.map((bmarkBase) => this.defineBookmarkItem(bmarkBase, unloading));
  }
  /**
   * Get bookmark definition.
   */
  getBookmarkItem(bmarkId, isFile, unloading) {
    const bmarkBases = this.flattenBookmarks(this.app.internalPlugins?.plugins?.bookmarks?.instance?.items ?? []);
    const bmarkBase = bmarkBases.find((bmarkBase2) => {
      return isFile && bmarkBase2.path + (bmarkBase2.subpath ?? "") === bmarkId || bmarkBase2.ctime === bmarkId;
    }) ?? {};
    return this.defineBookmarkItem(bmarkBase, unloading);
  }
  /**
   * Create bookmark definition.
   */
  defineBookmarkItem(bmarkBase, unloading) {
    const { path, filename, basename, extension } = this.splitFilePath(bmarkBase.path);
    const subpath = bmarkBase.subpath ?? "";
    let id, name, bmarkIcon, iconDefault = "lucide-file";
    switch (bmarkBase.type) {
      case "file": {
        id = path + subpath;
        name = (extension === "md" ? basename : filename) + subpath;
        if (extension === "canvas") {
          iconDefault = "lucide-layout-dashboard";
        } else if (subpath.startsWith("#^")) {
          iconDefault = "lucide-toy-brick";
        } else if (subpath.startsWith("#")) {
          iconDefault = "lucide-heading";
        } else if (!unloading) {
          if (extension === "pdf") {
            iconDefault = "lucide-file-text";
          } else if (IMAGE_EXTENSIONS.includes(extension)) {
            iconDefault = "lucide-image";
          } else if (AUDIO_EXTENSIONS.includes(extension)) {
            iconDefault = "lucide-file-audio";
          }
        }
        bmarkIcon = this.settings.fileIcons[id] ?? {};
        break;
      }
      case "folder": {
        id = path;
        name = basename;
        bmarkIcon = this.settings.fileIcons[id] ?? {};
        iconDefault = "lucide-folder";
        break;
      }
      case "group": {
        id = bmarkBase.ctime;
        name = bmarkBase.title;
        bmarkIcon = this.settings.bookmarkIcons[id] ?? {};
        break;
      }
      case "search": {
        id = bmarkBase.ctime;
        name = bmarkBase.query;
        bmarkIcon = this.settings.bookmarkIcons[id] ?? {};
        iconDefault = "lucide-search";
        break;
      }
      case "graph": {
        id = bmarkBase.ctime;
        name = bmarkBase.title;
        bmarkIcon = this.settings.bookmarkIcons[id] ?? {};
        iconDefault = "lucide-git-fork";
        break;
      }
      case "url": {
        id = bmarkBase.ctime;
        name = bmarkBase.url;
        bmarkIcon = this.settings.bookmarkIcons[id] ?? {};
        iconDefault = "lucide-globe-2";
        break;
      }
    }
    return {
      id,
      name,
      category: bmarkBase.type ?? "file",
      iconDefault,
      icon: unloading ? null : bmarkIcon?.icon ?? null,
      color: unloading ? null : bmarkIcon?.color ?? null,
      isFile: bmarkBase.type === "file" || bmarkBase.type === "folder",
      items: bmarkBase.items?.map((bmark) => this.defineBookmarkItem(bmark, unloading)) ?? null
    };
  }
  /**
   * Flatten an array of bookmark bases to include all children.
   */
  flattenBookmarks(bmarkBases) {
    const flatArray = [];
    for (const bmarkBase of bmarkBases) {
      flatArray.push(bmarkBase);
      if (bmarkBase.items)
        flatArray.push(...this.flattenBookmarks(bmarkBase.items));
    }
    return flatArray;
  }
  /**
   * Get array of property definitions.
   */
  getPropertyItems(unloading) {
    const propBases = Object.values(this.app.metadataTypeManager?.properties) ?? [];
    return propBases.map((prop) => this.definePropertyItem(prop, unloading));
  }
  /**
   * Get property definition.
   */
  getPropertyItem(propId, unloading) {
    const propBase = this.app.metadataTypeManager?.properties[propId] ?? {};
    return this.definePropertyItem(propBase, unloading);
  }
  /**
   * Create property definition.
   */
  definePropertyItem(propBase, unloading) {
    const propIcon = this.settings.propertyIcons[propBase.name] ?? {};
    let iconDefault;
    switch (propBase.type) {
      case "text":
        iconDefault = "lucide-text";
        break;
      case "multitext":
        iconDefault = "lucide-list";
        break;
      case "number":
        iconDefault = "lucide-binary";
        break;
      case "checkbox":
        iconDefault = "lucide-check-square";
        break;
      case "date":
        iconDefault = "lucide-calendar";
        break;
      case "datetime":
        iconDefault = "lucide-clock";
        break;
      case "aliases":
        iconDefault = "lucide-forward";
        break;
      case "tags":
        iconDefault = "lucide-tags";
        break;
      default:
        iconDefault = "lucide-file-question";
        break;
    }
    return {
      id: propBase.name,
      name: propBase.name,
      category: "property",
      iconDefault,
      icon: unloading ? null : propIcon.icon ?? null,
      color: unloading ? null : propIcon.color ?? null,
      type: propBase.type ?? null
    };
  }
  /**
   * Get array of ribbon command definitions.
   */
  getRibbonItems(unloading) {
    const itemBases = this.app.workspace.leftRibbon.items ?? [];
    return itemBases.map((item) => this.defineRibbonItem(item, unloading));
  }
  /**
   * Get ribbon command definition.
   */
  getRibbonItem(itemId, unloading) {
    const itemBase = this.app.workspace.leftRibbon.items?.find((itemBase2) => itemBase2?.id === itemId) ?? {};
    return this.defineRibbonItem(itemBase, unloading);
  }
  /**
   * Create ribbon command definition.
   */
  defineRibbonItem(itemBase, unloading) {
    const itemIcon = this.settings.ribbonIcons[itemBase.id] ?? {};
    return {
      id: itemBase.id,
      name: itemBase.title ?? null,
      category: "ribbon",
      iconDefault: itemBase.icon ?? null,
      icon: unloading ? null : itemIcon.icon ?? null,
      color: unloading ? null : itemIcon.color ?? null,
      isHidden: itemBase.hidden ?? false,
      iconEl: itemBase.buttonEl ?? null
    };
  }
  /**
   * Save app icon changes to settings.
   */
  saveAppIcon(appItem, icon, color) {
    this.updateIconSetting(this.settings.appIcons, appItem.id, icon, color);
    this.saveSettings();
  }
  /**
   * Save tab icon changes to settings.
   */
  saveTabIcon(tab, icon, color) {
    this.updateIconSetting(this.settings.tabIcons, tab.id, icon, color);
    this.saveSettings();
  }
  /**
   * Save file icon changes to settings.
   */
  saveFileIcon(file, icon, color) {
    this.updateIconSetting(this.settings.fileIcons, file.id, icon, color);
    this.saveSettings();
  }
  /**
   * Save multiple file icon changes to settings.
   * @param icon If undefined, leave icons unchanged
   * @param color If undefined, leave colors unchanged
   */
  saveFileIcons(files, icon, color) {
    for (const file of files) {
      if (icon !== void 0)
        file.icon = icon;
      if (color !== void 0)
        file.color = color;
      this.updateIconSetting(this.settings.fileIcons, file.id, file.icon, file.color);
    }
    this.saveSettings();
  }
  /**
   * Save bookmark icon changes to settings.
   */
  saveBookmarkIcon(bmark, icon, color) {
    if (bmark.category === "file" || bmark.category === "folder") {
      this.updateIconSetting(this.settings.fileIcons, bmark.id, icon, color);
    } else {
      this.updateIconSetting(this.settings.bookmarkIcons, bmark.id, icon, color);
    }
    this.saveSettings();
  }
  /**
   * Save multiple bookmark icon changes to settings.
   * @param icon If undefined, leave icons unchanged
   * @param color If undefined, leave colors unchanged
   */
  saveBookmarkIcons(bmarks, icon, color) {
    for (const bmark of bmarks) {
      if (icon !== void 0)
        bmark.icon = icon;
      if (color !== void 0)
        bmark.color = color;
      if (bmark.category === "file" || bmark.category === "folder") {
        this.updateIconSetting(this.settings.fileIcons, bmark.id, bmark.icon, bmark.color);
      } else {
        this.updateIconSetting(this.settings.bookmarkIcons, bmark.id, bmark.icon, bmark.color);
      }
    }
    this.saveSettings();
  }
  /**
   * Save property icon changes to settings.
   */
  savePropertyIcon(prop, icon, color) {
    this.updateIconSetting(this.settings.propertyIcons, prop.id, icon, color);
    this.saveSettings();
  }
  /**
   * Save multiple property icon changes to settings.
   * @param icon If undefined, leave icons unchanged
   * @param color If undefined, leave colors unchanged
   */
  savePropertyIcons(props, icon, color) {
    for (const prop of props) {
      if (icon !== void 0)
        prop.icon = icon;
      if (color !== void 0)
        prop.color = color;
      this.updateIconSetting(this.settings.propertyIcons, prop.id, prop.icon, prop.color);
    }
    this.saveSettings();
  }
  /**
   * Save ribbon icon changes to settings.
   */
  saveRibbonIcon(ribbonItem, icon, color) {
    this.updateIconSetting(this.settings.ribbonIcons, ribbonItem.id, icon, color);
    this.saveSettings();
  }
  /**
   * Update icon in a given settings object.
   */
  updateIconSetting(settings, itemId, icon, color) {
    if (icon || color) {
      if (!settings[itemId])
        settings[itemId] = {};
      if (icon)
        settings[itemId].icon = icon;
      else
        delete settings[itemId].icon;
      if (color)
        settings[itemId].color = color;
      else
        delete settings[itemId].color;
    } else {
      delete settings[itemId];
    }
  }
  /**
   * Load settings from storage.
   */
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    if ("groupIcons" in this.settings) {
      if (Object.keys(this.settings.bookmarkIcons).length === 0) {
        this.settings.bookmarkIcons = this.settings.groupIcons;
      }
      delete this.settings.groupIcons;
    }
  }
  /**
   * Save settings to storage.
   */
  async saveSettings() {
    this.pruneSettings();
    this.settings.appIcons = Object.fromEntries(Object.entries(this.settings.appIcons).sort());
    this.settings.tabIcons = Object.fromEntries(Object.entries(this.settings.tabIcons).sort());
    this.settings.fileIcons = Object.fromEntries(Object.entries(this.settings.fileIcons).sort());
    this.settings.bookmarkIcons = Object.fromEntries(Object.entries(this.settings.bookmarkIcons).sort());
    this.settings.propertyIcons = Object.fromEntries(Object.entries(this.settings.propertyIcons).sort());
    this.settings.ribbonIcons = Object.fromEntries(Object.entries(this.settings.ribbonIcons).sort());
    await this.saveData(this.settings);
  }
  /**
   * Check for any deleted items and prune their icons.
   */
  pruneSettings() {
    this.updateUnsyncedFiles();
    const isSyncing = this.app.internalPlugins?.plugins?.sync?.instance?.syncing === true;
    const isPaused = this.app.internalPlugins?.plugins?.sync?.instance?.pause === true;
    if (isSyncing || isPaused || this.settings.rememberDeletedItems) {
      return;
    }
    const thisAppId = this.app.appId;
    const bmarkBases = this.flattenBookmarks(this.app.internalPlugins?.plugins?.bookmarks?.instance?.items ?? []);
    const propBases = this.app.metadataTypeManager?.properties ?? [];
    const fileIcons = Object.entries(this.settings.fileIcons).filter(
      ([fileId, fileIcon]) => (
        // Never prune files that are unsynced on another device
        fileIcon.unsynced?.every((appId) => appId === thisAppId) ?? true
      )
    );
    for (const [fileId] of fileIcons) {
      const { path, subpath } = this.splitFilePath(fileId);
      const bmarkSubpath = subpath.replaceAll(/(?<!^)#|(?<!^#)\^|\s\s/g, " ");
      if (!this.app.vault.getAbstractFileByPath(path)) {
        delete this.settings.fileIcons[fileId];
      } else if (subpath && !bmarkBases.some((bmarkBase) => bmarkBase.path === path && bmarkBase.subpath === bmarkSubpath)) {
        delete this.settings.fileIcons[fileId];
      }
    }
    if (bmarkBases.length > 0) {
      const bmarkIds = bmarkBases.filter((bmarkBase) => bmarkBase.type !== "file" && bmarkBase.type !== "folder").map((bmarkBase) => bmarkBase.ctime.toString());
      for (const bmarkId in this.settings.bookmarkIcons) {
        if (!bmarkIds.includes(bmarkId)) {
          delete this.settings.bookmarkIcons[bmarkId];
        }
      }
    }
    if (propBases.length > 0) {
      const propIds = Object.keys(propBases);
      for (const propId in this.settings.propertyIcons) {
        if (!propIds.includes(propId)) {
          delete this.settings.propertyIcons[propId];
        }
      }
    }
  }
  /**
   * Flag any files excluded from Sync on this device.
   */
  updateUnsyncedFiles() {
    const appId = this.app.appId;
    const unsyncedFolders = this.app.internalPlugins?.plugins?.sync?.instance?.ignoreFolders ?? [];
    const unsyncedTypes = KNOWN_TYPES.filter((type) => !this.app.internalPlugins?.plugins?.sync?.instance?.allowTypes.has(type));
    for (const [fileId, fileIcon] of Object.entries(this.settings.fileIcons)) {
      if (!Array.isArray(fileIcon.unsynced)) {
        delete fileIcon.unsynced;
      }
      const { extension } = this.splitFilePath(fileId);
      const unsynced = unsyncedFolders.some((folder) => folder === fileId || fileId.startsWith(folder + "/")) || unsyncedTypes.includes("unsupported") && !KNOWN_EXTENSIONS.includes(extension) || unsyncedTypes.includes("image") && IMAGE_EXTENSIONS.includes(extension) || unsyncedTypes.includes("audio") && AUDIO_EXTENSIONS.includes(extension) || unsyncedTypes.includes("video") && VIDEO_EXTENSIONS.includes(extension) || unsyncedTypes.includes("pdf") && extension === "pdf";
      if (unsynced) {
        fileIcon.unsynced = fileIcon.unsynced ?? [];
        if (!fileIcon.unsynced.includes(appId))
          fileIcon.unsynced.push(appId);
      } else {
        if (fileIcon.unsynced?.includes(appId))
          fileIcon.unsynced?.remove(appId);
        if (fileIcon.unsynced?.length === 0)
          delete fileIcon.unsynced;
      }
    }
  }
  /**
   * @override
   */
  onunload() {
    this.appIconManager?.unload();
    this.tabIconManager?.unload();
    this.fileIconManager?.unload();
    this.bookmarkIconManager?.unload();
    this.propertyIconManager?.unload();
    this.editorIconManager?.unload();
    this.ribbonIconManager?.unload();
    this.refreshBodyClasses(true);
  }
};
