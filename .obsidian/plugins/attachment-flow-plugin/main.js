/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AttachFlowPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/options/deleleAllAttachsInTheNote.ts
var import_obsidian4 = require("obsidian");

// src/util.ts
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var import_fs = require("fs");
var import_obsidian2 = require("obsidian");
var DEBUG = false;
var SUCCESS_NOTICE_TIMEOUT = 1800;
var print = (message, ...optionalParams) => {
  if (DEBUG) {
    console.log(message, ...optionalParams);
  }
};
function setDebug(value) {
  DEBUG = value;
}
var checkReferenceInfo = (target_file, currentMd) => {
  const resolvedLinks = app.metadataCache.resolvedLinks;
  let CurMDPath;
  let result = {
    state: 0,
    mdPath: []
  };
  let refNum = 0;
  for (const [mdFile, links] of Object.entries(resolvedLinks)) {
    if (currentMd.path === mdFile) {
      CurMDPath = currentMd.path;
      result.mdPath.unshift(CurMDPath);
    }
    for (const [filePath, nr] of Object.entries(links)) {
      if ((target_file == null ? void 0 : target_file.path) === filePath) {
        refNum++;
        if (nr > 1) {
          result.state = 2 /* MORE */;
          result.mdPath.push(mdFile);
          return result;
        }
        result.mdPath.push(mdFile);
      }
    }
  }
  if (refNum > 1) {
    result.state = 1 /* MUTIPLE */;
  } else {
    result.state = 0 /* ONCE */;
  }
  return result;
};
var getFileByBaseName = (currentMd, FileBaseName) => {
  const resolvedLinks = app.metadataCache.resolvedLinks;
  for (const [mdFile, links] of Object.entries(resolvedLinks)) {
    if (currentMd.path === mdFile) {
      for (const [filePath, nr] of Object.entries(links)) {
        if (filePath.includes(FileBaseName)) {
          try {
            const AttachFile = app.vault.getAbstractFileByPath(filePath);
            if (AttachFile instanceof import_obsidian.TFile) {
              return AttachFile;
            }
          } catch (error) {
            new import_obsidian.Notice(` cannot get the image file`);
            console.error(error);
          }
        }
      }
    }
  }
};
var PureClearAttachment = (file, target_type, plugin) => __async(void 0, null, function* () {
  const deleteOption = plugin.settings.deleteOption;
  const delFileFolder = onlyOneFileExists(file);
  const fileFolder = getFileParentFolder(file);
  let name = target_type == "img" ? "Image" : "File";
  try {
    if (deleteOption === ".trash") {
      yield app.vault.trash(file, false);
      new import_obsidian.Notice(name + " moved to Obsidian Trash !", SUCCESS_NOTICE_TIMEOUT);
      if (delFileFolder) {
        yield app.vault.trash(fileFolder, false);
        new import_obsidian.Notice("Attachment folder have been deleted!", 3e3);
      }
    } else if (deleteOption === "system-trash") {
      yield app.vault.trash(file, true);
      new import_obsidian.Notice(name + " moved to System Trash !", SUCCESS_NOTICE_TIMEOUT);
      if (delFileFolder) {
        yield app.vault.trash(fileFolder, true);
        new import_obsidian.Notice("Attachment folder have been deleted!", 3e3);
      }
    } else if (deleteOption === "permanent") {
      yield app.vault.delete(file);
      new import_obsidian.Notice(name + " deleted Permanently !", SUCCESS_NOTICE_TIMEOUT);
      if (delFileFolder) {
        yield app.vault.delete(fileFolder, true);
        new import_obsidian.Notice("Attachment folder have been deleted!", 3e3);
      }
    }
  } catch (error) {
    console.error(error);
    new import_obsidian.Notice("Faild to delelte the " + name + "!", SUCCESS_NOTICE_TIMEOUT);
  }
});
var handlerDelFileNew = (FileBaseName, currentMd, plugin, target_type, target_pos, in_table, in_callout) => {
  let logs;
  let modal;
  const target_file = getFileByBaseName(currentMd, FileBaseName);
  const refInfo = checkReferenceInfo(target_file, currentMd);
  let state = refInfo.state;
  switch (state) {
    case 0:
      deleteCurTargetLink(FileBaseName, plugin, target_type, target_pos, in_table, in_callout);
      PureClearAttachment(target_file, target_type, plugin);
      break;
    case 1:
    case 2:
      deleteCurTargetLink(FileBaseName, plugin, target_type, target_pos, in_table, in_callout);
      logs = refInfo.mdPath;
      new import_obsidian.Notice("As other references of current file exist, just deleted the current reference link without deleting the actual file.", 3500);
    default:
      break;
  }
};
var deleteCurTargetLink = (file_base_name, plugin, target_type, target_pos, in_table, in_callout) => {
  file_base_name = file_base_name.startsWith("/") ? file_base_name.substring(1) : file_base_name;
  const activeView = plugin.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  const editor = activeView.editor;
  const editorView = editor.cm;
  let target_line = editorView.state.doc.lineAt(target_pos);
  let line_text = target_line.text;
  if (!in_table && !in_callout) {
    let finds = findLinkInLine(file_base_name, line_text);
    if (finds.length == 0) {
      new import_obsidian.Notice("Fail to find the link-text, please delete it manually!", 0);
      return;
    } else if (finds.length != 1) {
      new import_obsidian.Notice("Find multiple same Link in current line, please delete it manually!", 0);
      return;
    } else {
      editor.replaceRange("", { line: target_line.number - 1, ch: finds[0][0] }, { line: target_line.number - 1, ch: finds[0][1] });
      return;
    }
  }
  let startReg = {
    "table": /^\s*\|/,
    "callout": /^>/
  };
  let mode = in_table ? "table" : "callout";
  let finds_lines = [];
  let finds_all = [];
  for (let i = target_line.number; i <= editor.lineCount(); i++) {
    let line_text2 = editor.getLine(i - 1);
    if (!startReg[mode].test(line_text2))
      break;
    print(`line_${i}_text:`, line_text2);
    let finds = findLinkInLine(file_base_name, line_text2);
    if (finds.length > 0) {
      finds_lines.push(...new Array(finds.length).fill(i));
      finds_all.push(...finds);
    }
  }
  for (let i = target_line.number - 1; i >= 1; i--) {
    let line_text2 = editor.getLine(i - 1);
    if (!startReg[mode].test(line_text2))
      break;
    print(`line_${i}_text:`, line_text2);
    let finds = findLinkInLine(file_base_name, line_text2);
    if (finds.length > 0) {
      finds_lines.push(...new Array(finds.length).fill(i));
      finds_all.push(...finds);
    }
  }
  if (finds_all.length == 0) {
    new import_obsidian.Notice(`Fail to find the link-text (for links in ${mode}), please delete it manually!`, 0);
    return;
  } else if (finds_all.length != 1) {
    new import_obsidian.Notice(`Find multiple same Link in current ${mode}, please delete it manually!`, 0);
    return;
  } else {
    editor.replaceRange("", { line: finds_lines[0] - 1, ch: finds_all[0][0] }, { line: finds_lines[0] - 1, ch: finds_all[0][1] });
  }
  editor.focus();
};
var handlerCopyFile = (FileBaseName, currentMd, plugin) => __async(void 0, null, function* () {
  const file = getFileByBaseName(currentMd, FileBaseName);
  const basePath = file.vault.adapter.basePath;
  const file_ab_path = basePath + "/" + file.path;
  try {
    copyFileToClipboardCMD(file_ab_path);
    new import_obsidian.Notice("Copied to clipboard !", SUCCESS_NOTICE_TIMEOUT);
  } catch (error) {
    console.error(error);
    new import_obsidian.Notice("Faild to copy the file !", SUCCESS_NOTICE_TIMEOUT);
  }
});
var getFileParentFolder = (file) => {
  if (file instanceof import_obsidian.TFile) {
    if (file.parent instanceof import_obsidian.TFolder) {
      return file.parent;
    }
  }
  return;
};
var onlyOneFileExists = (file) => {
  const fileFolder = getFileParentFolder(file);
  return fileFolder.children.length === 1;
};
function copyFileToClipboardCMD(filePath) {
  if (!(0, import_fs.existsSync)(filePath)) {
    console.error(`File ${filePath} does not exist`);
    return;
  }
  const callback = (error, stdout, stderr) => {
    if (error) {
      new import_obsidian.Notice(`Error executing command: ${error.message}`, SUCCESS_NOTICE_TIMEOUT);
      console.error(`Error executing command: ${error.message}`);
      return;
    }
  };
  if (process.platform === "darwin") {
    (0, import_child_process.execSync)(`open -R "${filePath}"`);
    (0, import_child_process.execSync)(`osascript -e 'tell application "System Events" to keystroke "c" using command down'`);
    (0, import_child_process.execSync)(`osascript -e 'tell application "System Events" to keystroke "w" using command down'`);
    (0, import_child_process.execSync)(`open -a "Obsidian.app"`);
  } else if (process.platform === "linux") {
  } else if (process.platform === "win32") {
    (0, import_child_process.exec)(`powershell -command "Set-Clipboard -Path '${filePath}'"`, callback);
  }
}
var findLinkInLine = (file_name, line_text) => {
  const file_name_mdlink = file_name.replace(/ /g, "%20");
  let regWikiLink = /\!\[\[[^\[\]]*?\]\]/g;
  let regMdLink = /\!\[[^\[\]]*?\]\([^\s\)\(\[\]\{\}']*\)/g;
  print("target_name (WIKI/MD):", file_name, file_name_mdlink);
  let search_result = [];
  if (line_text.includes(file_name)) {
    while (true) {
      let match = regWikiLink.exec(line_text);
      if (!match)
        break;
      let matched_link = match[0];
      print("matched_link:", matched_link);
      print("matched_link.includes(file_name)", matched_link.includes(file_name));
      if (matched_link.includes(file_name)) {
        search_result.push([match.index, match.index + matched_link.length]);
      }
    }
  }
  if (line_text.includes(file_name_mdlink)) {
    while (true) {
      let match = regMdLink.exec(line_text);
      if (!match)
        break;
      let matched_link = match[0];
      print("matched_link:", matched_link);
      print("matched_link.includes(file_name_mdlink)", matched_link.includes(file_name_mdlink));
      if (matched_link.includes(file_name_mdlink)) {
        search_result.push([match.index, match.index + matched_link.length]);
      }
    }
  }
  return search_result;
};
var handlerRenameFile = (FileBaseName, currentMd, plugin) => {
  const target_file = getFileByBaseName(currentMd, FileBaseName);
  let path = target_file.path;
  let name = target_file.name;
  let target_folder = path.substring(0, path.length - name.length);
  let file_type = name.split(".").pop();
  new RenameModal(plugin.app, target_folder, name.substring(0, name.length - file_type.length - 1), file_type, (result) => {
    if (!result)
      return;
    if (result == path)
      return;
    app.vault.adapter.exists(result).then((exists) => {
      if (exists) {
        new import_obsidian.Notice(`Fail to rename for there alreay exist file ${result}`);
      } else {
        plugin.app.fileManager.renameFile(target_file, `${result}`);
      }
    });
  }).open();
};
var RenameModal = class extends import_obsidian2.Modal {
  constructor(app2, folder, name, filetype, onSubmit) {
    super(app2);
    this.onSubmit = onSubmit;
    this.folder = folder;
    this.name = name;
    this.filetype = filetype;
  }
  onOpen() {
    const { contentEl } = this;
    let setting = new import_obsidian2.Setting(contentEl).setName("Rename:").addText((text) => text.setValue(this.name).onChange((value) => {
      this.result = `${this.folder}${value}.${this.filetype}`;
    }));
    setTimeout(() => {
      let inputBox = setting.settingEl.querySelector('input[type="text"]');
      if (inputBox && inputBox.parentElement) {
        let folder_indicator = document.createElement("label");
        folder_indicator.innerText = `${this.folder}`;
        folder_indicator.style.marginRight = "4px";
        inputBox.parentElement.insertBefore(folder_indicator, inputBox);
        let file_type_indicator = document.createElement("label");
        file_type_indicator.innerText = `.${this.filetype}`;
        file_type_indicator.style.marginLeft = "4px";
        inputBox.after(file_type_indicator);
        let parentEl = setting.settingEl.parentElement;
        if (parentEl) {
          parentEl.style.display = "flex";
          parentEl.style.justifyContent = "center";
        }
        let inputElem = inputBox;
        inputElem.select();
      } else {
        console.error("\u65E0\u6CD5\u627E\u5230\u6587\u672C\u8F93\u5165\u6846");
      }
    }, 0);
    this.scope.register([], "Enter", (evt) => {
      if (evt.isComposing) {
        return;
      }
      this.close();
      this.onSubmit(this.result);
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/utils/deleteFile.ts
var import_obsidian3 = require("obsidian");
var SUCCESS_NOTICE_TIMEOUT2 = 1800;
var deleteFile = (file, plugin) => __async(void 0, null, function* () {
  const deleteOption = plugin.settings.deleteOption;
  try {
    if (deleteOption === ".trash") {
      yield app.vault.trash(file, false);
    } else if (deleteOption === "system-trash") {
      yield app.vault.trash(file, true);
    } else if (deleteOption === "permanent") {
      yield app.vault.delete(file);
    }
  } catch (error) {
    console.error(error);
    new import_obsidian3.Notice("Faild to delete the file/folder !", SUCCESS_NOTICE_TIMEOUT2);
  }
});

// src/options/deleleAllAttachsInTheNote.ts
var deleteAllAttachs = (plugin) => __async(void 0, null, function* () {
  const activeMd = app.workspace.getActiveFile();
  const resolvedLinks = app.metadataCache.resolvedLinks;
  const attachsPaths = [];
  for (const [mdFile, links] of Object.entries(resolvedLinks)) {
    if ((activeMd == null ? void 0 : activeMd.path) === mdFile) {
      let fileCount = 0;
      let flag = false;
      for (const [filePath, nr] of Object.entries(links)) {
        if (filePath.match(/.*\.md$/m))
          continue;
        if (isReferencedByOtherNotes(filePath, activeMd))
          continue;
        attachsPaths.push(filePath);
        try {
          const AttachFile = app.vault.getAbstractFileByPath(filePath);
          if (AttachFile instanceof import_obsidian4.TFile) {
            deleteFile(AttachFile, plugin);
          }
          const parentFolder = getFileParentFolder(AttachFile);
          if (!flag) {
            fileCount = parentFolder.children.length;
            flag = !flag;
          }
          fileCount = fileCount - 1;
          if (!fileCount) {
            yield deleteFile(parentFolder, plugin);
            new import_obsidian4.Notice("All attachments and its parent folder deleted!", 3e3);
          }
        } catch (error) {
          console.warn(error);
        }
      }
    }
  }
});
var isReferencedByOtherNotes = (attachPath, currentMd) => {
  const resolvedLinks = app.metadataCache.resolvedLinks;
  let flag = false;
  for (const [mdFile, links] of Object.entries(resolvedLinks)) {
    if (mdFile !== currentMd.path) {
      for (const [filePath, nr] of Object.entries(links)) {
        if (filePath === attachPath) {
          flag = true;
        }
      }
    }
  }
  return flag;
};
var getRefencedLinkCount = () => {
  const activeMd = app.workspace.getActiveFile();
  const resolvedLinks = app.metadataCache.resolvedLinks;
  const attachsPaths = [];
  for (const [mdFile, links] of Object.entries(resolvedLinks)) {
    if ((activeMd == null ? void 0 : activeMd.path) === mdFile) {
      for (const [filePath, nr] of Object.entries(links)) {
        if (filePath.match(/.*\.md$/m))
          continue;
        if (isReferencedByOtherNotes(filePath, activeMd))
          continue;
        attachsPaths.push(filePath);
      }
    }
  }
  return attachsPaths.length;
};

// src/config/addCommand-config.ts
var addCommand = (myPlugin) => {
  myPlugin.addCommand({
    id: "clear-all-attachments-in-current-file",
    name: "clear all attachments in current file",
    callback: () => __async(void 0, null, function* () {
      deleteAllAttachs(myPlugin);
    })
  });
};

// src/settings.ts
var import_obsidian5 = require("obsidian");
var DEFAULT_SETTINGS = {
  deleteOption: ".trash",
  logsModal: true,
  dragResize: false,
  debug: false
};
var AttachFlowSettingsTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "AttachFlow plugin Settings" });
    new import_obsidian5.Setting(containerEl).setName("Deleted Attachment Destination").setDesc("Select where you want Attachments to be moved once they are deleted").addDropdown((dropdown) => {
      dropdown.addOption("permanent", "Delete Permanently");
      dropdown.addOption(".trash", "Move to Obsidian Trash");
      dropdown.addOption("system-trash", "Move to System Trash");
      dropdown.setValue(this.plugin.settings.deleteOption);
      dropdown.onChange((option) => {
        this.plugin.settings.deleteOption = option;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian5.Setting(containerEl).setName("Drag To Resize Images").setDesc("\u62D6\u62FD\u8C03\u6574\u56FE\u7247\u5927\u5C0F").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.dragResize).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.dragResize = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian5.Setting(containerEl).setName("Print Debug Information").setDesc("\u63A7\u5236\u53F0\u8F93\u51FA\u8C03\u8BD5\u4FE1\u606F").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.debug).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.debug = value;
        setDebug(value);
        yield this.plugin.saveSettings();
      }));
    });
  }
};

// src/utils/handlerEvent.ts
var getMouseEventTarget = (event) => {
  event.preventDefault();
  const target = event.target;
  return target;
};

// src/modals/deletionPrompt.ts
var import_obsidian6 = require("obsidian");
var DeleteAllLogsModal = class extends import_obsidian6.Modal {
  constructor(note, myPlugin) {
    super(app);
    this.note = note;
    this.myPlugin = myPlugin;
  }
  getLog() {
    const referenceMessage = `Are you sure you want to delete "${this.note.basename}.md"?

It will be moved to your ${this.myPlugin.settings.deleteOption}.`;
    return referenceMessage;
  }
  showLogs() {
    const logs = this.contentEl.createEl("div");
    logs.addClass("attachment-flow-log");
    logs.setText(this.getLog());
  }
  onOpen() {
    const { contentEl } = this;
    const myModal = this;
    const headerWrapper = contentEl.createEl("div");
    headerWrapper.addClass("attachment-flow-center-wrapper");
    this.showLogs();
    const referencedMessageWrapper = contentEl.createEl("span");
    referencedMessageWrapper.style.color = "red";
    const referencedMessage = `There are(is) currently  [${getRefencedLinkCount()}]  non-multi-referenced link(s) pointing to this note.`;
    referencedMessageWrapper.append(referencedMessage);
    const buttonWrapper = this.contentEl.createEl("div");
    buttonWrapper.addClass("attachment-flow-center-wrapper");
    const headerEl = headerWrapper.createEl("h1", {
      text: "Delete the file and its all attachments - logs "
    });
    headerEl.addClass("modal-title");
    this.showConfirmButton(buttonWrapper, myModal);
    this.showCancelBtn(buttonWrapper, myModal);
  }
  showCancelBtn(buttonWrapper, myModal) {
    const closeButton = buttonWrapper.createEl("button", {
      text: "Cancel"
    });
    closeButton.setAttribute("aria-label", "Cancel the operation");
    closeButton.addEventListener("click", () => {
      myModal.close();
    });
  }
  showConfirmButton(buttonWrapper, myModal) {
    const removeLinkButton = buttonWrapper.createEl("button", {
      text: "Confirm"
    });
    removeLinkButton.setAttribute("aria-label", "Continue to delete current file and its all non-multi-referenced attachments");
    removeLinkButton.addClass("mod-warning");
    removeLinkButton.addEventListener("click", () => __async(this, null, function* () {
      deleteFile(this.note, this.myPlugin);
      deleteAllAttachs(this.myPlugin);
      myModal.close();
    }));
  }
};

// src/helpers.ts
function onElement(el, event, selector, listener, options) {
  el.on(event, selector, listener, options);
  return () => el.off(event, selector, listener, options);
}

// src/main.ts
var AttachFlowPlugin = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.addMenuExtendedSourceMode = (menu, FileBaseName, currentMd, target_type, target_pos, inTable, inCallout) => {
      menu.addItem((item) => item.setIcon("trash-2").setTitle("Clear file and associated link").onClick(() => __async(this, null, function* () {
        try {
          handlerDelFileNew(FileBaseName, currentMd, this, target_type, target_pos, inTable, inCallout);
        } catch (e) {
          new import_obsidian7.Notice("Error, could not clear the file!");
        }
      })));
      menu.addItem((item) => item.setIcon("pencil").setTitle("Rename").onClick(() => __async(this, null, function* () {
        try {
          print("test rename");
          handlerRenameFile(FileBaseName, currentMd, this);
        } catch (e) {
          new import_obsidian7.Notice("Error, could not rename the file!");
        }
      })));
      this.addMenuExtendedPreviewMode(menu, FileBaseName, currentMd);
    };
    this.addMenuExtendedPreviewMode = (menu, FileBaseName, currentMd) => {
      const file = getFileByBaseName(currentMd, FileBaseName);
      menu.addItem((item) => item.setIcon("copy").setTitle("Copy file to clipboard").onClick(() => __async(this, null, function* () {
        try {
          handlerCopyFile(FileBaseName, currentMd, this);
        } catch (e) {
          new import_obsidian7.Notice("Error, could not copy the file!");
        }
      })));
      menu.addItem((item) => item.setIcon("arrow-up-right").setTitle("Open in default app").onClick(() => this.app.openWithDefaultApp(file.path)));
      menu.addItem((item) => item.setIcon("arrow-up-right").setTitle(import_obsidian7.Platform.isMacOS ? "Reveal in finder" : "Show in system explorer").onClick(() => {
        this.app.showInFolder(file.path);
      }));
      menu.addItem((item) => item.setIcon("folder").setTitle("Reveal file in navigation").onClick(() => {
        const abstractFilePath = this.app.vault.getAbstractFileByPath(file.path);
        this.app.internalPlugins.getEnabledPluginById("file-explorer").revealInFolder(abstractFilePath);
      }));
    };
  }
  onload() {
    return __async(this, null, function* () {
      console.log("AttachFlow plugin loaded...");
      this.addSettingTab(new AttachFlowSettingsTab(this.app, this));
      yield this.loadSettings();
      this.registerDocument(document);
      app.workspace.on("window-open", (workspaceWindow, window) => {
        this.registerDocument(window.document);
      });
      this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian7.TFile) {
          if (!file.path.endsWith(".md"))
            return;
          const addMenuItem = (item) => {
            item.setTitle("Delete file and its attachments").setIcon("trash-2").setSection("danger");
            item.onClick(() => __async(this, null, function* () {
              const modal = new DeleteAllLogsModal(file, this);
              modal.open();
            }));
          };
          menu.addItem(addMenuItem);
        }
      }));
      addCommand(this);
      setDebug(this.settings.debug);
    });
  }
  onunload() {
    console.log("AttachFlow plugin unloaded...");
  }
  registerDocument(document2) {
    this.register(onElement(document2, "contextmenu", "img, iframe, video, div.file-embed-title, audio", this.onClick.bind(this)));
    this.register(onElement(document2, "mousedown", "img, video", (event) => {
      var _a, _b;
      if (!this.settings.dragResize)
        return;
      const currentMd = app.workspace.getActiveFile();
      if (currentMd.name.endsWith(".canvas"))
        return;
      const inPreview = ((_a = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView)) == null ? void 0 : _a.getMode()) == "preview";
      if (inPreview)
        return;
      if (event.button === 0) {
        event.preventDefault();
      }
      const img = event.target;
      const editor = (_b = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView)) == null ? void 0 : _b.editor;
      const editorView = editor.cm;
      const target_pos = editorView.posAtDOM(img);
      let target_line = editorView.state.doc.lineAt(target_pos);
      const inTable = img.closest("table") != null;
      const inCallout = img.closest(".callout") != null;
      const isExcalidraw = img.classList.contains("excalidraw-embedded-img");
      print("InTable", inTable);
      print("Target Element", img);
      if (isExcalidraw) {
        print("Excalidraw file!");
      }
      const rect = img.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;
      const edgeSize = 30;
      if (x < edgeSize || y < edgeSize || x > rect.width - edgeSize || y > rect.height - edgeSize) {
        const startX = event.clientX;
        const startY = event.clientY;
        const startWidth = img.clientWidth;
        const startHeight = img.clientHeight;
        let lastUpdateX = startX;
        let lastUpdateY = startY;
        const updateThreshold = 5;
        const onMouseMove = (event2) => {
          var _a2;
          const currentX = event2.clientX;
          let newWidth = startWidth + (currentX - startX);
          const aspectRatio = startWidth / startHeight;
          newWidth = Math.max(newWidth, 50);
          let newHeight = newWidth / aspectRatio;
          newWidth = Math.round(newWidth);
          newHeight = Math.round(newHeight);
          if (img instanceof HTMLImageElement) {
            img.style.border = "solid";
            img.style.borderWidth = "2px";
            img.style.borderColor = "blue";
            img.style.boxSizing = "border-box";
            img.style.width = `${newWidth}px`;
          } else if (img instanceof HTMLVideoElement) {
            img.style.border = "solid";
            img.style.borderWidth = "2px";
            img.style.borderColor = "blue";
            img.style.boxSizing = "border-box";
            if (img.parentElement) {
              const containerWidth = img.parentElement.clientWidth;
              const newWidthPercentage = newWidth / containerWidth * 100;
              img.style.width = `${newWidthPercentage}%`;
            }
          }
          if (Math.abs(event2.clientX - lastUpdateX) > updateThreshold) {
            const activeView = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
            if (activeView) {
              print("update new Width", newWidth);
              let imageName = img.getAttribute("src");
              if (imageName == null ? void 0 : imageName.startsWith("http")) {
                updateExternalLink(activeView, img, target_pos, newWidth, newHeight, inTable, inCallout);
              } else if (isExcalidraw) {
                let target_name = img.getAttribute("filesource");
                let draw_base_name = target_name;
                if (draw_base_name.includes("/")) {
                  let temp_arr = draw_base_name.split("/");
                  draw_base_name = temp_arr[temp_arr.length - 1];
                } else if (draw_base_name.includes("\\")) {
                  let temp_arr = draw_base_name.split("\\");
                  draw_base_name = temp_arr[temp_arr.length - 1];
                }
                draw_base_name = draw_base_name.endsWith(".md") ? draw_base_name.substring(0, draw_base_name.length - 3) : draw_base_name;
                print(target_name);
                print("excalidraw file:", draw_base_name);
                img.style.maxWidth = "none";
                updateInternalLink(activeView, img, target_pos, draw_base_name, newWidth, newHeight, inTable, inCallout);
              } else {
                imageName = (_a2 = img.parentElement) == null ? void 0 : _a2.getAttribute("src");
                updateInternalLink(activeView, img, target_pos, imageName, newWidth, newHeight, inTable, inCallout);
              }
            }
            lastUpdateX = event2.clientX;
            lastUpdateY = event2.clientY;
          }
        };
        const onMouseUp = (event2) => {
          event2.preventDefault();
          img.style.borderStyle = "none";
          img.style.outline = "none";
          img.style.cursor = "default";
          document2.removeEventListener("mousemove", onMouseMove);
          document2.removeEventListener("mouseup", onMouseUp);
        };
        document2.addEventListener("mousemove", onMouseMove);
        document2.addEventListener("mouseup", onMouseUp);
      }
    }));
    this.register(onElement(document2, "mouseover", "img, video", (event) => {
      var _a;
      if (!this.settings.dragResize)
        return;
      const currentMd = app.workspace.getActiveFile();
      if (currentMd.name.endsWith(".canvas"))
        return;
      const inPreview = ((_a = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView)) == null ? void 0 : _a.getMode()) == "preview";
      if (inPreview)
        return;
      const img = event.target;
      const rect = img.getBoundingClientRect();
      const edgeSize = 30;
      const isExcalidraw = img.classList.contains("excalidraw-embedded-img");
      let lastMove = 0;
      const mouseOverHandler = (event2) => {
        if (!this.settings.dragResize)
          return;
        const now = Date.now();
        if (now - lastMove < 100)
          return;
        lastMove = now;
        const x = event2.clientX - rect.left;
        const y = event2.clientY - rect.top;
        if (x >= rect.width - edgeSize || x <= edgeSize || (y >= rect.height - edgeSize || y <= edgeSize)) {
          img.style.cursor = "nwse-resize";
          img.style.outline = "solid";
          img.style.outlineWidth = "6px";
          img.style.outlineColor = "#dfb0f283";
        } else {
          img.style.cursor = "default";
          img.style.outline = "none";
        }
      };
      this.registerDomEvent(img, "mousemove", mouseOverHandler);
    }));
    this.register(onElement(document2, "mouseout", "img, video", (event) => {
      var _a;
      if (!this.settings.dragResize)
        return;
      const currentMd = app.workspace.getActiveFile();
      if (currentMd.name.endsWith(".canvas"))
        return;
      const inPreview = ((_a = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView)) == null ? void 0 : _a.getMode()) == "preview";
      if (inPreview)
        return;
      const img = event.target;
      img.style.borderStyle = "none";
      img.style.cursor = "default";
      img.style.outline = "none";
    }));
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  registerEscapeButton(menu, document2 = activeDocument) {
    menu.register(onElement(document2, "keydown", "*", (e) => {
      if (e.key === "Escape") {
        e.preventDefault();
        e.stopPropagation();
        menu.hide();
      }
    }));
  }
  onClick(event) {
    var _a, _b, _c, _d, _e;
    const target = getMouseEventTarget(event);
    const curTargetType = target.localName;
    const currentMd = app.workspace.getActiveFile();
    const inCanvas = currentMd.name.endsWith(".canvas");
    const SupportedTargetType = ["img", "iframe", "video", "div", "audio"];
    const menu = new import_obsidian7.Menu();
    if (!SupportedTargetType.includes(curTargetType))
      return;
    const inTable = target.closest("table") != null;
    const inCallout = target.closest(".callout") != null;
    const inPreview = ((_a = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView)) == null ? void 0 : _a.getMode()) == "preview";
    const isExcalidraw = target.classList.contains("excalidraw-embedded-img");
    let target_name = target.getAttribute("src");
    if (target_name && target_name.startsWith("http"))
      return;
    if (inCanvas) {
      if ((_b = target.parentElement) == null ? void 0 : _b.classList.contains("canvas-node-content"))
        return;
      let file_name = (_c = target.parentElement) == null ? void 0 : _c.getAttribute("src");
      return;
    }
    if (isExcalidraw) {
      target_name = target.getAttribute("filesource");
      let file_base_name = target_name;
      if (file_base_name.includes("/")) {
        let temp_arr = file_base_name.split("/");
        file_base_name = temp_arr[temp_arr.length - 1];
      } else if (file_base_name.includes("\\")) {
        let temp_arr = file_base_name.split("\\");
        file_base_name = temp_arr[temp_arr.length - 1];
      }
      file_base_name = file_base_name.endsWith(".md") ? file_base_name.substring(0, file_base_name.length - 3) : file_base_name;
      target_name = file_base_name;
    } else {
      target_name = (_d = target.parentElement) == null ? void 0 : _d.getAttribute("src");
      target_name = target_name.replace(/^(\.\.\/)+/g, "");
      let pdf_match = target_name.match(/.*\.pdf/);
      target_name = pdf_match ? pdf_match[0] : target_name;
      if (curTargetType == "img" && pdf_match)
        return;
    }
    if (inPreview) {
      if (SupportedTargetType.includes(curTargetType)) {
        this.addMenuExtendedPreviewMode(menu, target_name, currentMd);
      }
    } else {
      const editor = (_e = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView)) == null ? void 0 : _e.editor;
      const editorView = editor.cm;
      const target_pos = editorView.posAtDOM(target);
      let target_line = editorView.state.doc.lineAt(target_pos);
      print("target line information: line-content, line-number(1-based), target.ch");
      print(target_line.text, target_line.number, target_pos - target_line.from);
      if (SupportedTargetType.includes(curTargetType)) {
        this.addMenuExtendedSourceMode(menu, target_name, currentMd, curTargetType, target_pos, inTable, inCallout);
      }
    }
    this.registerEscapeButton(menu);
    if (inTable && !inPreview) {
      menu.showAtPosition({ x: event.pageX, y: event.pageY - 163 });
    } else {
      menu.showAtPosition({ x: event.pageX, y: event.pageY });
    }
    this.app.workspace.trigger("AttachFlow:contextmenu", menu);
  }
};
function updateInternalLink(activeView, target, target_pos, imageName, newWidth, newHeight, inTable, inCallout) {
  const editor = activeView.editor;
  const editorView = editor.cm;
  let target_line = editorView.state.doc.lineAt(target_pos);
  if (!inCallout && !inTable) {
    let matched = matchLineWithInternalLink(target_line.text, imageName, newWidth, inTable);
    if (matched.length == 1) {
      editorView.dispatch({
        changes: {
          from: target_line.from + matched[0].from_ch,
          to: target_line.from + matched[0].to_ch,
          insert: matched[0].new_link
        }
      });
    } else if (matched.length == 0) {
    } else {
      new import_obsidian7.Notice("Find multiple same image-link in line, please zoom manually!");
    }
    return;
  }
  let startReg = {
    "table": /^\s*\|/,
    "callout": /^>/
  };
  let mode = inTable ? "table" : "callout";
  print("mode", mode);
  const start_reg = startReg[mode];
  let start_line_number = target_line.number;
  let matched_results = [];
  let matched_lines = [];
  for (let i = start_line_number; i <= editor.lineCount(); i++) {
    let line = editorView.state.doc.line(i);
    if (!start_reg.test(line.text))
      break;
    let matched = matchLineWithInternalLink(line.text, imageName, newWidth, inTable);
    matched_results.push(...matched);
    matched_lines.push(...new Array(matched.length).fill(i));
  }
  for (let i = start_line_number - 1; i >= 1; i--) {
    let line = editorView.state.doc.line(i);
    if (!start_reg.test(line.text))
      break;
    let matched = matchLineWithInternalLink(line.text, imageName, newWidth, inTable);
    matched_results.push(...matched);
    matched_lines.push(...new Array(matched.length).fill(i));
  }
  if (matched_results.length == 1) {
    let target_line2 = editorView.state.doc.line(matched_lines[0]);
    if (mode == "table") {
      let old_text = target_line2.text;
      let new_line_text = old_text.substring(0, matched_results[0].from_ch) + matched_results[0].new_link + old_text.substring(matched_results[0].to_ch);
      editorView.dispatch({
        changes: {
          from: target_line2.from,
          to: target_line2.from + old_text.length,
          insert: new_line_text
        }
      });
    } else {
      editorView.dispatch({
        changes: {
          from: target_line2.from + matched_results[0].from_ch,
          to: target_line2.from + matched_results[0].to_ch,
          insert: matched_results[0].new_link
        }
      });
    }
  } else if (matched_results.length == 0) {
    new import_obsidian7.Notice(`Fail to find current image-link in ${mode}, please zoom manually!`);
  } else {
    new import_obsidian7.Notice(`Find multiple same image-link in ${mode}, please zoom manually!`);
  }
  return;
}
function updateExternalLink(activeView, target, target_pos, newWidth, newHeight, inTable, inCallout) {
  const editor = activeView.editor;
  const editorView = editor.cm;
  let target_line = editorView.state.doc.lineAt(target_pos);
  const link = target.getAttribute("src");
  const altText = target.getAttribute("alt");
  if (!inCallout && !inTable) {
    let matched = matchLineWithExternalLink(target_line.text, link, altText, newWidth, inTable);
    if (matched.length == 1) {
      editorView.dispatch({
        changes: {
          from: target_line.from + matched[0].from_ch,
          to: target_line.from + matched[0].to_ch,
          insert: matched[0].new_link
        }
      });
    } else if (matched.length == 0) {
    } else {
      new import_obsidian7.Notice("Find multiple same image-link in line, please zoom manually!");
    }
    return;
  }
  let startReg = {
    "table": /^\s*\|/,
    "callout": /^>/
  };
  let mode = inTable ? "table" : "callout";
  print("mode", mode);
  const start_reg = startReg[mode];
  let start_line_number = target_line.number;
  let matched_results = [];
  let matched_lines = [];
  for (let i = start_line_number; i <= editor.lineCount(); i++) {
    let line = editorView.state.doc.line(i);
    if (!start_reg.test(line.text))
      break;
    let matched = matchLineWithExternalLink(line.text, link, altText, newWidth, inTable);
    matched_results.push(...matched);
    matched_lines.push(...new Array(matched.length).fill(i));
  }
  for (let i = start_line_number - 1; i >= 1; i--) {
    let line = editorView.state.doc.line(i);
    if (!start_reg.test(line.text))
      break;
    let matched = matchLineWithExternalLink(line.text, link, altText, newWidth, inTable);
    matched_results.push(...matched);
    matched_lines.push(...new Array(matched.length).fill(i));
  }
  print(matched_results);
  print(matched_lines);
  if (matched_results.length == 1) {
    let target_line2 = editorView.state.doc.line(matched_lines[0]);
    if (mode == "table") {
      let old_text = target_line2.text;
      let new_line_text = old_text.substring(0, matched_results[0].from_ch) + matched_results[0].new_link + old_text.substring(matched_results[0].to_ch);
      editorView.dispatch({
        changes: {
          from: target_line2.from,
          to: target_line2.from + old_text.length,
          insert: new_line_text
        }
      });
    } else {
      editorView.dispatch({
        changes: {
          from: target_line2.from + matched_results[0].from_ch,
          to: target_line2.from + matched_results[0].to_ch,
          insert: matched_results[0].new_link
        }
      });
    }
  } else if (matched_results.length == 0) {
    new import_obsidian7.Notice(`Fail to find current image-link in ${mode}, please zoom manually!`);
  } else {
    new import_obsidian7.Notice(`Find multiple same image-link in ${mode}, please zoom manually!`);
  }
  return;
}
function matchLineWithInternalLink(line_text, target_name, new_width, intable) {
  let regWikiLink = /\!\[\[[^\[\]]*?\]\]/g;
  let regMdLink = /\!\[[^\[\]]*?\]\([^\s\)\(\[\]\{\}']*\)/g;
  const target_name_mdlink = target_name.replace(/ /g, "%20");
  if (!line_text.includes(target_name) && !line_text.includes(target_name_mdlink))
    return [];
  let result = [];
  while (true) {
    let wiki_match = regWikiLink.exec(line_text);
    if (!wiki_match)
      break;
    const matched_link = wiki_match[0];
    if (matched_link.includes(target_name)) {
      let normal_link = intable ? matched_link.replace(/\\\|/g, "|") : matched_link;
      console.log(normal_link);
      let link_match = normal_link.match(/!\[\[(.*?)(\||\]\])/);
      let link_text = link_match ? link_match[1] : "";
      let alt_match = matched_link.match(/!\[\[.*?(\|(.*?))\]\]/);
      let alt_text = alt_match ? alt_match[1] : "";
      let alt_text_list = alt_text.split("|");
      let alt_text_wo_size = "";
      let new_alt_text = "";
      for (let alt of alt_text_list) {
        if (!/^\d+$/.test(alt) && !/^\s*$/.test(alt)) {
          alt_text_wo_size = alt_text_wo_size + "|" + alt;
        }
      }
      new_alt_text = new_width != 0 ? `${alt_text_wo_size}|${new_width}` : alt_text_wo_size;
      new_alt_text = intable ? new_alt_text.replace(/\|/g, "\\|") : new_alt_text;
      let newWikiLink = link_match ? `![[${link_text}${new_alt_text}]]` : `![[${target_name}${new_alt_text}]]`;
      result.push({
        old_link: matched_link,
        new_link: newWikiLink,
        from_ch: wiki_match.index,
        to_ch: wiki_match.index + matched_link.length
      });
    }
  }
  while (true) {
    let match = regMdLink.exec(line_text);
    if (!match)
      break;
    const matched_link = match[0];
    if (matched_link.includes(target_name_mdlink)) {
      let alt_text_match = matched_link.match(/\[.*?\]/g);
      let alt_text = alt_text_match[0].substring(1, alt_text_match[0].length - 1);
      let pure_alt = alt_text.replace(/\|\d+(\|\d+)?$/g, "");
      if (intable) {
        pure_alt = alt_text.replace(/\\\|\d+(\|\d+)?$/g, "");
      }
      let link_text = matched_link.substring(alt_text_match[0].length + 2, matched_link.length - 1);
      let newMDLink = intable ? `![${pure_alt}\\|${new_width}](${link_text})` : `![${pure_alt}|${new_width}](${link_text})`;
      if (/^\d*$/.test(alt_text)) {
        newMDLink = `![${new_width}](${link_text})`;
      }
      result.push({
        old_link: matched_link,
        new_link: newMDLink,
        from_ch: match.index,
        to_ch: match.index + matched_link.length
      });
    }
  }
  print("Line Text: ", line_text);
  print("MatchedInfo:", result);
  return result;
}
function matchLineWithExternalLink(line_text, link, alt_text, new_width, intable) {
  let result = [];
  let regMdLink = /\!\[[^\[\]]*?\]\([^\s\)\(\[\]\{\}']*\)/g;
  if (!line_text.includes(link) || !line_text.includes(alt_text))
    return [];
  let newExternalLink = intable ? `![${alt_text}\\|${new_width}](${link})` : `![${alt_text}|${new_width}](${link})`;
  if (/^\d*$/.test(alt_text) || /^\s*$/.test(alt_text)) {
    newExternalLink = `![${new_width}](${link})`;
  }
  while (true) {
    let match = regMdLink.exec(line_text);
    if (!match)
      break;
    let matched_link = match[0];
    if (matched_link.includes(link) && matched_link.includes(alt_text)) {
      result.push({
        old_link: matched_link,
        new_link: newExternalLink,
        from_ch: match.index,
        to_ch: match.index + matched_link.length
      });
    }
  }
  print("Line Text: ", line_text);
  print("MatchedInfo:", result);
  return result;
}
//# sourceMappingURL=data:application/json;base64,
